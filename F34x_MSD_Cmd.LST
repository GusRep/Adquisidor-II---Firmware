C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE F34X_MSD_CMD
OBJECT MODULE PLACED IN F34x_MSD_Cmd.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe F34x_MSD_Cmd.c PW(80) SB LC OT(9,SI
                    -ZE) CD DB OE DF(__F340_VER__) LARGE

line level    source

   1          //----------------------------------------------------------------
             --------------
   2          // F34x_MSD_Cmd.c
   3          //----------------------------------------------------------------
             --------------
   4          // Copyright 2006 Silicon Laboratories, Inc.
   5          // http://www.silabs.com
   6          //
   7          // Program Description:
   8          //
   9          // Module contains a functions for communication via UART. These f
             -unctions are 
  10          // mainly used to initializing, communicating, executing commands 
             -used by 
  11          // UART interface.
  12          //
  13          //
  14          //
  15          // How To Test:    See Readme.txt
  16          //
  17          //
  18          // FID:            34X000030
  19          // Target:         C8051F34x
  20          // Tool chain:     Keil
  21          // Command Line:   See Readme.txt
  22          // Project Name:   F34x_USB_MSD
  23          //
  24          // Release 1.1
  25          //    -All changes by PKC
  26          //    -09 JUN 2006
  27          //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  28          //
  29          // Release 1.0
  30          //    -Initial Release
  31          //
  32          
  33          //----------------------------------------------------------------
             --------------
  34          // Includes
  35          //----------------------------------------------------------------
             --------------
  36          
  37          #include "F34x_MSD_Definitions.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Definitions.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 2   

   9      =1  // Header file with all definitions.
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000032
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef __DEFINITIONS_H__
  32      =1  #define __DEFINITIONS_H__
  33      =1  
  34      =1  #define DEBUG_TIMEOUTS
  35      =1  #include "c8051f340.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // C8051F340.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2005 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Register/bit definitions for the C8051F34x family.
  10      =2  //
  11      =2  //
  12      =2  // FID:            34X000002
  13      =2  // Target:         C8051F340, 'F341, 'F342, 'F343, 'F344, 'F345, '
             -F346, 'F347
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   None
  16      =2  //
  17      =2  // Release 1.0
  18      =2  //    -Initial Release (GP\PKC)
  19      =2  //    -13 DEC 2005
  20      =2  
  21      =2  //----------------------------------------------------------------
             --------------
  22      =2  // Header File Preprocessor Directive
  23      =2  //----------------------------------------------------------------
             --------------
  24      =2  
  25      =2  #ifndef C8051F340_H
  26      =2  #define C8051F340_H
  27      =2  
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 3   

  28      =2  //----------------------------------------------------------------
             --------------
  29      =2  // Byte Registers
  30      =2  //----------------------------------------------------------------
             --------------
  31      =2  
  32      =2  sfr  P0           =  0x80;             // Port 0 Latch
  33      =2  sfr  SP           =  0x81;             // Stack Pointer
  34      =2  sfr  DPL          =  0x82;             // Data Pointer Low
  35      =2  sfr  DPH          =  0x83;             // Data Pointer High
  36      =2  sfr  EMI0TC       =  0x84;             // EMIF Timing
  37      =2  sfr  EMI0CF       =  0x85;             // EMIF Configuration
  38      =2  sfr  OSCLCN       =  0x86;             // Internal Low-Freq Oscill
             -ator Control
  39      =2  sfr  PCON         =  0x87;             // Power Control
  40      =2  sfr  TCON         =  0x88;             // Timer/Counter Control
  41      =2  sfr  TMOD         =  0x89;             // Timer/Counter Mode
  42      =2  sfr  TL0          =  0x8A;             // Timer/Counter 0 Low
  43      =2  sfr  TL1          =  0x8B;             // Timer/Counter 1 Low
  44      =2  sfr  TH0          =  0x8C;             // Timer/Counter 0 High
  45      =2  sfr  TH1          =  0x8D;             // Timer/Counter 1 High
  46      =2  sfr  CKCON        =  0x8E;             // Clock Control
  47      =2  sfr  PSCTL        =  0x8F;             // Program Store R/W Contro
             -l
  48      =2  sfr  P1           =  0x90;             // Port 1 Latch
  49      =2  sfr  TMR3CN       =  0x91;             // Timer/Counter 3Control
  50      =2  sfr  TMR3RLL      =  0x92;             // Timer/Counter 3 Reload L
             -ow
  51      =2  sfr  TMR3RLH      =  0x93;             // Timer/Counter 3 Reload H
             -igh
  52      =2  sfr  TMR3L        =  0x94;             // Timer/Counter 3Low
  53      =2  sfr  TMR3H        =  0x95;             // Timer/Counter 3 High
  54      =2  sfr  USB0ADR      =  0x96;             // USB0 Indirect Address Re
             -gister
  55      =2  sfr  USB0DAT      =  0x97;             // USB0 Data Register
  56      =2  sfr  SCON0        =  0x98;             // UART0 Control
  57      =2  sfr  SBUF0        =  0x99;             // UART0 Data Buffer
  58      =2  sfr  CPT1CN       =  0x9A;             // Comparator1 Control
  59      =2  sfr  CPT0CN       =  0x9B;             // Comparator0 Control
  60      =2  sfr  CPT1MD       =  0x9C;             // Comparator1 Mode Selecti
             -on
  61      =2  sfr  CPT0MD       =  0x9D;             // Comparator0 Mode Selecti
             -on
  62      =2  sfr  CPT1MX       =  0x9E;             // Comparator1 MUX Selectio
             -n
  63      =2  sfr  CPT0MX       =  0x9F;             // Comparator0 MUX Selectio
             -n
  64      =2  sfr  P2           =  0xA0;             // Port 2 Latch
  65      =2  sfr  SPI0CFG      =  0xA1;             // SPI Configuration
  66      =2  sfr  SPI0CKR      =  0xA2;             // SPI Clock Rate Control
  67      =2  sfr  SPI0DAT      =  0xA3;             // SPI Data
  68      =2  sfr  P0MDOUT      =  0xA4;             // Port 0 Output Mode Confi
             -guration
  69      =2  sfr  P1MDOUT      =  0xA5;             // Port 1 Output Mode Confi
             -guration
  70      =2  sfr  P2MDOUT      =  0xA6;             // Port 2 Output Mode Confi
             -guration
  71      =2  sfr  P3MDOUT      =  0xA7;             // Port 3 Output Mode Confi
             -guration
  72      =2  sfr  IE           =  0xA8;             // Interrupt Enable
  73      =2  sfr  CLKSEL       =  0xA9;             // Clock Select
  74      =2  sfr  EMI0CN       =  0xAA;             // External Memory Interfac
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 4   

             -e Control
  75      =2  sfr  SBCON1       =  0xAC;             // UART1 Baud Rate Generato
             -r Control
  76      =2  sfr  P4MDOUT      =  0xAE;             // Port 4 Output Mode Confi
             -guration
  77      =2  sfr  PFE0CN       =  0xAF;             // Prefetch Engine Control
  78      =2  sfr  P3           =  0xB0;             // Port 3 Latch
  79      =2  sfr  OSCXCN       =  0xB1;             // External Oscillator Cont
             -rol
  80      =2  sfr  OSCICN       =  0xB2;             // Internal Oscillator Cont
             -rol
  81      =2  sfr  OSCICL       =  0xB3;             // Internal Oscillator Cali
             -bration
  82      =2  sfr  SBRLL1       =  0xB4;             // UART1 Baud Rate Generato
             -r Low
  83      =2  sfr  SBRLH1       =  0xB5;             // UART1 Baud Rate Generato
             -r High
  84      =2  sfr  FLSCL        =  0xB6;             // Flash Scale
  85      =2  sfr  FLKEY        =  0xB7;             // Flash Lock and Key
  86      =2  sfr  IP           =  0xB8;             // Interrupt Priority
  87      =2  sfr  CLKMUL       =  0xB9;             // Clock Multiplier
  88      =2  sfr  AMX0N        =  0xBA;             // AMUX0 Negative Channel S
             -elect
  89      =2  sfr  AMX0P        =  0xBB;             // AMUX0 Positive Channel S
             -elect
  90      =2  sfr  ADC0CF       =  0xBC;             // ADC0 Configuration
  91      =2  sfr  ADC0L        =  0xBD;             // ADC0 Low
  92      =2  sfr  ADC0H        =  0xBE;             // ADC0 High
  93      =2  sfr  SMB0CN       =  0xC0;             // SMBus Control
  94      =2  sfr  SMB0CF       =  0xC1;             // SMBus Configuration
  95      =2  sfr  SMB0DAT      =  0xC2;             // SMBus Data
  96      =2  sfr  ADC0GTL      =  0xC3;             // ADC0 Greater-Than Compar
             -e Low
  97      =2  sfr  ADC0GTH      =  0xC4;             // ADC0 Greater-Than Compar
             -e High
  98      =2  sfr  ADC0LTL      =  0xC5;             // ADC0 Less-Than Compare W
             -ord Low
  99      =2  sfr  ADC0LTH      =  0xC6;             // ADC0 Less-Than Compare W
             -ord High
 100      =2  sfr  P4           =  0xC7;             // Port 4 Latch
 101      =2  sfr  TMR2CN       =  0xC8;             // Timer/Counter 2 Control
 102      =2  sfr  REG0CN       =  0xC9;             // Voltage Regulator Contro
             -l
 103      =2  sfr  TMR2RLL      =  0xCA;             // Timer/Counter 2 Reload L
             -ow
 104      =2  sfr  TMR2RLH      =  0xCB;             // Timer/Counter 2 Reload H
             -igh
 105      =2  sfr  TMR2L        =  0xCC;             // Timer/Counter 2 Low
 106      =2  sfr  TMR2H        =  0xCD;             // Timer/Counter 2 High
 107      =2  sfr  PSW          =  0xD0;             // Program Status Word
 108      =2  sfr  REF0CN       =  0xD1;             // Voltage Reference Contro
             -l
 109      =2  sfr  SCON1        =  0xD2;             // UART1 Control
 110      =2  sfr  SBUF1        =  0xD3;             // UART1 Data Buffer
 111      =2  sfr  P0SKIP       =  0xD4;             // Port 0 Skip
 112      =2  sfr  P1SKIP       =  0xD5;             // Port 1 Skip
 113      =2  sfr  P2SKIP       =  0xD6;             // Port 2 Skip
 114      =2  sfr  USB0XCN      =  0xD7;             // USB0 Transceiver Control
 115      =2  sfr  PCA0CN       =  0xD8;             // PCA0 Control
 116      =2  sfr  PCA0MD       =  0xD9;             // PCA0 Mode
 117      =2  sfr  PCA0CPM0     =  0xDA;             // PCA0 Module 0 Mode Regis
             -ter
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 5   

 118      =2  sfr  PCA0CPM1     =  0xDB;             // PCA0 Module 1 Mode Regis
             -ter
 119      =2  sfr  PCA0CPM2     =  0xDC;             // PCA0 Module 2 Mode Regis
             -ter
 120      =2  sfr  PCA0CPM3     =  0xDD;             // PCA0 Module 3 Mode Regis
             -ter
 121      =2  sfr  PCA0CPM4     =  0xDE;             // PCA0 Module 4 Mode Regis
             -ter
 122      =2  sfr  P3SKIP       =  0xDF;             // Port 3 Skip
 123      =2  sfr  ACC          =  0xE0;             // Accumulator
 124      =2  sfr  XBR0         =  0xE1;             // Port I/O Crossbar Contro
             -l 0
 125      =2  sfr  XBR1         =  0xE2;             // Port I/O Crossbar Contro
             -l 1
 126      =2  sfr  XBR2         =  0xE3;             // Port I/O Crossbar Contro
             -l 2
 127      =2  sfr  IT01CF       =  0xE4;             // INT0/INT1 Configuration
 128      =2  sfr  SMOD1        =  0xE5;             // UART1 Mode
 129      =2  sfr  EIE1         =  0xE6;             // Extended Interrupt Enabl
             -e 1
 130      =2  sfr  EIE2         =  0xE7;             // Extended Interrupt Enabl
             -e 2
 131      =2  sfr  ADC0CN       =  0xE8;             // ADC0 Control
 132      =2  sfr  PCA0CPL1     =  0xE9;             // PCA0 Capture 1 Low
 133      =2  sfr  PCA0CPH1     =  0xEA;             // PCA0 Capture 1 High
 134      =2  sfr  PCA0CPL2     =  0xEB;             // PCA0 Capture 2 Low
 135      =2  sfr  PCA0CPH2     =  0xEC;             // PCA0 Capture 2 High
 136      =2  sfr  PCA0CPL3     =  0xED;             // PCA0 Capture 3 Low
 137      =2  sfr  PCA0CPH3     =  0xEE;             // PCA0 Capture 3 High
 138      =2  sfr  RSTSRC       =  0xEF;             // Reset Source Configurati
             -on/Status
 139      =2  sfr  B            =  0xF0;             // B Register
 140      =2  sfr  P0MDIN       =  0xF1;             // Port 0 Input Mode Config
             -uration
 141      =2  sfr  P1MDIN       =  0xF2;             // Port 1 Input Mode Config
             -uration
 142      =2  sfr  P2MDIN       =  0xF3;             // Port 2 Input Mode Config
             -uration
 143      =2  sfr  P3MDIN       =  0xF4;             // Port 3 Input Mode Config
             -uration
 144      =2  sfr  P4MDIN       =  0xF5;             // Port 4 Input Mode Config
             -uration
 145      =2  sfr  EIP1         =  0xF6;             // Extended Interrupt Prior
             -ity 1
 146      =2  sfr  EIP2         =  0xF7;             // Extended Interrupt Prior
             -ity 2
 147      =2  sfr  SPI0CN       =  0xF8;             // SPI0 Control
 148      =2  sfr  PCA0L        =  0xF9;             // PCA0 Counter Low
 149      =2  sfr  PCA0H        =  0xFA;             // PCA0 Counter High
 150      =2  sfr  PCA0CPL0     =  0xFB;             // PCA0 Capture 0 Low
 151      =2  sfr  PCA0CPH0     =  0xFC;             // PCA0 Capture 0 High
 152      =2  sfr  PCA0CPL4     =  0xFD;             // PCA0 Capture 4 Low
 153      =2  sfr  PCA0CPH4     =  0xFE;             // PCA0 Capture 4 High
 154      =2  sfr  VDM0CN       =  0xFF;             // VDD Monitor Control
 155      =2  
 156      =2  
 157      =2  //----------------------------------------------------------------
             --------------
 158      =2  // Bit Definitions
 159      =2  //----------------------------------------------------------------
             --------------
 160      =2  
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 6   

 161      =2  // TCON 0x88
 162      =2  sbit TF1     = 0x8F;                   // Timer1 overflow flag
 163      =2  sbit TR1     = 0x8E;                   // Timer1 on/off control
 164      =2  sbit TF0     = 0x8D;                   // Timer0 overflow flag
 165      =2  sbit TR0     = 0x8C;                   // Timer0 on/off control
 166      =2  sbit IE1     = 0x8B;                   // Ext interrupt 1 edge fla
             -g
 167      =2  sbit IT1     = 0x8A;                   // Ext interrupt 1 type
 168      =2  sbit IE0     = 0x89;                   // Ext interrupt 0 edge fla
             -g
 169      =2  sbit IT0     = 0x88;                   // Ext interrupt 0 type
 170      =2  
 171      =2  // SCON0 0x98
 172      =2  sbit S0MODE  = 0x9F;                   // Serial mode control bit 
             -0
 173      =2                                         // Bit6 UNUSED
 174      =2  sbit MCE0    = 0x9D;                   // Multiprocessor communica
             -tion enable
 175      =2  sbit REN0    = 0x9C;                   // Receive enable
 176      =2  sbit TB80    = 0x9B;                   // Transmit bit 8
 177      =2  sbit RB80    = 0x9A;                   // Receive bit 8
 178      =2  sbit TI0     = 0x99;                   // Transmit interrupt flag
 179      =2  sbit RI0     = 0x98;                   // Receive interrupt flag
 180      =2  
 181      =2  // IE 0xA8
 182      =2  sbit EA      = 0xAF;                   // Global interrupt enable
 183      =2  sbit ESPI0   = 0xAE;                   // SPI0 interrupt enable
 184      =2  sbit ET2     = 0xAD;                   // Timer2 interrupt enable
 185      =2  sbit ES0     = 0xAC;                   // UART0 interrupt enable
 186      =2  sbit ET1     = 0xAB;                   // Timer1 interrupt enable
 187      =2  sbit EX1     = 0xAA;                   // External interrupt 1 ena
             -ble
 188      =2  sbit ET0     = 0xA9;                   // Timer0 interrupt enable
 189      =2  sbit EX0     = 0xA8;                   // External interrupt 0 ena
             -ble
 190      =2  
 191      =2  // IP 0xB8
 192      =2                                         // Bit7 UNUSED
 193      =2  sbit PSPI0   = 0xBE;                   // SPI0 interrupt priority
 194      =2  sbit PT2     = 0xBD;                   // Timer2 priority
 195      =2  sbit PS0     = 0xBC;                   // UART0 priority
 196      =2  sbit PT1     = 0xBB;                   // Timer1 priority
 197      =2  sbit PX1     = 0xBA;                   // External interrupt 1 pri
             -ority
 198      =2  sbit PT0     = 0xB9;                   // Timer0 priority
 199      =2  sbit PX0     = 0xB8;                   // External interrupt 0 pri
             -ority
 200      =2  
 201      =2  // SMB0CN 0xC0
 202      =2  sbit MASTER  = 0xC7;                   // Master/slave indicator
 203      =2  sbit TXMODE  = 0xC6;                   // Transmit mode indicator
 204      =2  sbit STA     = 0xC5;                   // Start flag
 205      =2  sbit STO     = 0xC4;                   // Stop flag
 206      =2  sbit ACKRQ   = 0xC3;                   // Acknowledge request
 207      =2  sbit ARBLOST = 0xC2;                   // Arbitration lost indicat
             -or
 208      =2  sbit ACK     = 0xC1;                   // Acknowledge flag
 209      =2  sbit SI      = 0xC0;                   // SMBus interrupt flag
 210      =2  
 211      =2  // TMR2CN 0xC8
 212      =2  sbit TF2H    = 0xCF;                   // Timer2 high byte overflo
             -w flag
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 7   

 213      =2  sbit TF2L    = 0xCE;                   // Timer2 low byte overflow
             - flag
 214      =2  sbit TF2LEN  = 0xCD;                   // Timer2 low byte interrup
             -t enable
 215      =2  sbit T2CE    = 0xCC;                   // Timer2 capture enable
 216      =2  sbit T2SPLIT = 0xCB;                   // Timer2 split mode enable
 217      =2  sbit TR2     = 0xCA;                   // Timer2 on/off control
 218      =2  sbit T2CSS   = 0xC9;                   // Timer 2 Capture Source s
             -elect
 219      =2  sbit T2XCLK  = 0xC8;                   // Timer2 external clock se
             -lect
 220      =2  
 221      =2  // PSW 0xD0
 222      =2  sbit CY      = 0xD7;                   // Carry flag
 223      =2  sbit AC      = 0xD6;                   // Auxiliary carry flag
 224      =2  sbit F0      = 0xD5;                   // User flag 0
 225      =2  sbit RS1     = 0xD4;                   // Register bank select 1
 226      =2  sbit RS0     = 0xD3;                   // Register bank select 0
 227      =2  sbit OV      = 0xD2;                   // Overflow flag
 228      =2  sbit F1      = 0xD1;                   // User flag 1
 229      =2  sbit P       = 0xD0;                   // Accumulator parity flag
 230      =2  
 231      =2  // PCA0CN 0xD8
 232      =2  sbit CF      = 0xDF;                   // PCA0 counter overflow fl
             -ag
 233      =2  sbit CR      = 0xDE;                   // PCA0 counter run control
 234      =2                                         // Bit5 UNUSED
 235      =2  sbit CCF4    = 0xDC;                   // PCA0 module4 capture/com
             -pare flag
 236      =2  sbit CCF3    = 0xDB;                   // PCA0 module3 capture/com
             -pare flag
 237      =2  sbit CCF2    = 0xDA;                   // PCA0 module2 capture/com
             -pare flag
 238      =2  sbit CCF1    = 0xD9;                   // PCA0 module1 capture/com
             -pare flag
 239      =2  sbit CCF0    = 0xD8;                   // PCA0 module0 capture/com
             -pare flag
 240      =2  
 241      =2  // ADC0CN 0xE8
 242      =2  sbit AD0EN   = 0xEF;                   // ADC0 enable
 243      =2  sbit AD0TM   = 0xEE;                   // ADC0 track mode
 244      =2  sbit AD0INT  = 0xED;                   // ADC0 conversion complete
             - interrupt flag
 245      =2  sbit AD0BUSY = 0xEC;                   // ADC0 busy flag
 246      =2  sbit AD0WINT = 0xEB;                   // ADC0 window compare inte
             -rrupt flag
 247      =2  sbit AD0CM2  = 0xEA;                   // ADC0 conversion mode sel
             -ect 2
 248      =2  sbit AD0CM1  = 0xE9;                   // ADC0 conversion mode sel
             -ect 1
 249      =2  sbit AD0CM0  = 0xE8;                   // ADC0 conversion mode sel
             -ect 0
 250      =2  
 251      =2  // SPI0CN 0xF8
 252      =2  sbit SPIF    = 0xFF;                   // SPI0 interrupt flag
 253      =2  sbit WCOL    = 0xFE;                   // SPI0 write collision fla
             -g
 254      =2  sbit MODF    = 0xFD;                   // SPI0 mode fault flag
 255      =2  sbit RXOVRN  = 0xFC;                   // SPI0 rx overrun flag
 256      =2  sbit NSSMD1  = 0xFB;                   // SPI0 slave select mode 1
 257      =2  sbit NSSMD0  = 0xFA;                   // SPI0 slave select mode 0
 258      =2  sbit TXBMT   = 0xF9;                   // SPI0 transmit buffer emp
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 8   

             -ty
 259      =2  sbit SPIEN   = 0xF8;                   // SPI0 SPI enable
 260      =2  
 261      =2  
 262      =2  //----------------------------------------------------------------
             --------------
 263      =2  // Interrupt Priorities
 264      =2  //----------------------------------------------------------------
             --------------
 265      =2  
 266      =2  #define INTERRUPT_INT0             0   // External Interrupt 0
 267      =2  #define INTERRUPT_TIMER0           1   // Timer0 Overflow
 268      =2  #define INTERRUPT_INT1             2   // External Interrupt 1
 269      =2  #define INTERRUPT_TIMER1           3   // Timer1 Overflow
 270      =2  #define INTERRUPT_UART0            4   // Serial Port 0
 271      =2  #define INTERRUPT_TIMER2           5   // Timer2 Overflow
 272      =2  #define INTERRUPT_SPI0             6   // Serial Peripheral Interf
             -ace 0
 273      =2  #define INTERRUPT_SMBUS0           7   // SMBus0 Interface
 274      =2  #define INTERRUPT_USB0             8   // USB Interface
 275      =2  #define INTERRUPT_ADC0_WINDOW      9   // ADC0 Window Comparison
 276      =2  #define INTERRUPT_ADC0_EOC         10  // ADC0 End Of Conversion
 277      =2  #define INTERRUPT_PCA0             11  // PCA0 Peripheral
 278      =2  #define INTERRUPT_COMPARATOR0      12  // Comparator0
 279      =2  #define INTERRUPT_COMPARATOR1      13  // Comparator1
 280      =2  #define INTERRUPT_TIMER3           14  // Timer3 Overflow
 281      =2  #define INTERRUPT_VBUS_LEVEL       15  // VBUS level-triggered int
             -errupt
 282      =2  #define INTERRUPT_UART1            16  // Serial Port 1
 283      =2  
 284      =2  //----------------------------------------------------------------
             --------------
 285      =2  // Header File PreProcessor Directive
 286      =2  //----------------------------------------------------------------
             --------------
 287      =2  
 288      =2  #endif                                 // #define C8051F340_H
 289      =2  
 290      =2  //----------------------------------------------------------------
             --------------
 291      =2  // End Of File
 292      =2  //----------------------------------------------------------------
             --------------
  36      =1  #ifdef DEBUG_TIMEOUTS
  37      =1  sbit START_STOP_SPI = P3^0 ;
  38      =1  sbit START_STOP_READ_TO = P3^1;
  39      =1  sbit START_STOP_WRITE_TO = P3^2;
  40      =1  
  41      =1  #define START_SPI_TIMEOUT (START_STOP_SPI = 1)
  42      =1  #define STOP_SPI_TIME_OUT (START_STOP_SPI = 0)
  43      =1  #define START_READ_COPY (START_STOP_READ_TO = 1)
  44      =1  #define STOP_READ_COPY (START_STOP_READ_TO = 0)
  45      =1  #define START_WRITE_COPY (START_STOP_WRITE_TO = 1)
  46      =1  #define STOP_WRITE_COPY (START_STOP_WRITE_TO = 0)
  47      =1  #else
           =1 
           =1 #define START_SPI_TIMEOUT /\
           =1 /
           =1 #define STOP_SPI_TIME_OUT /\
           =1 /
           =1 #define START_READ_COPY /\
           =1 /
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 9   

           =1 #define STOP_READ_COPY /\
           =1 /
           =1 #define START_WRITE_COPY /\
           =1 /
           =1 #define STOP_WRITE_COPY /\
           =1 /
           =1 
           =1 #endif
  63      =1  
  64      =1  #define ENDLINE         "\r\n"
  65      =1  #define ENDLINE_SGN '\r'
  66      =1  
  67      =1  #endif
  38          #include "c8051f340.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // C8051F340.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2005 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Register/bit definitions for the C8051F34x family.
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000002
  13      =1  // Target:         C8051F340, 'F341, 'F342, 'F343, 'F344, 'F345, '
             -F346, 'F347
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   None
  16      =1  //
  17      =1  // Release 1.0
  18      =1  //    -Initial Release (GP\PKC)
  19      =1  //    -13 DEC 2005
  20      =1  
  21      =1  //----------------------------------------------------------------
             --------------
  22      =1  // Header File Preprocessor Directive
  23      =1  //----------------------------------------------------------------
             --------------
  24      =1  
  25      =1  #ifndef C8051F340_H
           =1 #define C8051F340_H
           =1 
           =1 //----------------------------------------------------------------
             --------------
           =1 // Byte Registers
           =1 //----------------------------------------------------------------
             --------------
           =1 
           =1 sfr  P0           =  0x80;             // Port 0 Latch
           =1 sfr  SP           =  0x81;             // Stack Pointer
           =1 sfr  DPL          =  0x82;             // Data Pointer Low
           =1 sfr  DPH          =  0x83;             // Data Pointer High
           =1 sfr  EMI0TC       =  0x84;             // EMIF Timing
           =1 sfr  EMI0CF       =  0x85;             // EMIF Configuration
           =1 sfr  OSCLCN       =  0x86;             // Internal Low-Freq Oscill
             -ator Control
           =1 sfr  PCON         =  0x87;             // Power Control
           =1 sfr  TCON         =  0x88;             // Timer/Counter Control
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 10  

           =1 sfr  TMOD         =  0x89;             // Timer/Counter Mode
           =1 sfr  TL0          =  0x8A;             // Timer/Counter 0 Low
           =1 sfr  TL1          =  0x8B;             // Timer/Counter 1 Low
           =1 sfr  TH0          =  0x8C;             // Timer/Counter 0 High
           =1 sfr  TH1          =  0x8D;             // Timer/Counter 1 High
           =1 sfr  CKCON        =  0x8E;             // Clock Control
           =1 sfr  PSCTL        =  0x8F;             // Program Store R/W Contro
             -l
           =1 sfr  P1           =  0x90;             // Port 1 Latch
           =1 sfr  TMR3CN       =  0x91;             // Timer/Counter 3Control
           =1 sfr  TMR3RLL      =  0x92;             // Timer/Counter 3 Reload L
             -ow
           =1 sfr  TMR3RLH      =  0x93;             // Timer/Counter 3 Reload H
             -igh
           =1 sfr  TMR3L        =  0x94;             // Timer/Counter 3Low
           =1 sfr  TMR3H        =  0x95;             // Timer/Counter 3 High
           =1 sfr  USB0ADR      =  0x96;             // USB0 Indirect Address Re
             -gister
           =1 sfr  USB0DAT      =  0x97;             // USB0 Data Register
           =1 sfr  SCON0        =  0x98;             // UART0 Control
           =1 sfr  SBUF0        =  0x99;             // UART0 Data Buffer
           =1 sfr  CPT1CN       =  0x9A;             // Comparator1 Control
           =1 sfr  CPT0CN       =  0x9B;             // Comparator0 Control
           =1 sfr  CPT1MD       =  0x9C;             // Comparator1 Mode Selecti
             -on
           =1 sfr  CPT0MD       =  0x9D;             // Comparator0 Mode Selecti
             -on
           =1 sfr  CPT1MX       =  0x9E;             // Comparator1 MUX Selectio
             -n
           =1 sfr  CPT0MX       =  0x9F;             // Comparator0 MUX Selectio
             -n
           =1 sfr  P2           =  0xA0;             // Port 2 Latch
           =1 sfr  SPI0CFG      =  0xA1;             // SPI Configuration
           =1 sfr  SPI0CKR      =  0xA2;             // SPI Clock Rate Control
           =1 sfr  SPI0DAT      =  0xA3;             // SPI Data
           =1 sfr  P0MDOUT      =  0xA4;             // Port 0 Output Mode Confi
             -guration
           =1 sfr  P1MDOUT      =  0xA5;             // Port 1 Output Mode Confi
             -guration
           =1 sfr  P2MDOUT      =  0xA6;             // Port 2 Output Mode Confi
             -guration
           =1 sfr  P3MDOUT      =  0xA7;             // Port 3 Output Mode Confi
             -guration
           =1 sfr  IE           =  0xA8;             // Interrupt Enable
           =1 sfr  CLKSEL       =  0xA9;             // Clock Select
           =1 sfr  EMI0CN       =  0xAA;             // External Memory Interfac
             -e Control
           =1 sfr  SBCON1       =  0xAC;             // UART1 Baud Rate Generato
             -r Control
           =1 sfr  P4MDOUT      =  0xAE;             // Port 4 Output Mode Confi
             -guration
           =1 sfr  PFE0CN       =  0xAF;             // Prefetch Engine Control
           =1 sfr  P3           =  0xB0;             // Port 3 Latch
           =1 sfr  OSCXCN       =  0xB1;             // External Oscillator Cont
             -rol
           =1 sfr  OSCICN       =  0xB2;             // Internal Oscillator Cont
             -rol
           =1 sfr  OSCICL       =  0xB3;             // Internal Oscillator Cali
             -bration
           =1 sfr  SBRLL1       =  0xB4;             // UART1 Baud Rate Generato
             -r Low
           =1 sfr  SBRLH1       =  0xB5;             // UART1 Baud Rate Generato
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 11  

             -r High
           =1 sfr  FLSCL        =  0xB6;             // Flash Scale
           =1 sfr  FLKEY        =  0xB7;             // Flash Lock and Key
           =1 sfr  IP           =  0xB8;             // Interrupt Priority
           =1 sfr  CLKMUL       =  0xB9;             // Clock Multiplier
           =1 sfr  AMX0N        =  0xBA;             // AMUX0 Negative Channel S
             -elect
           =1 sfr  AMX0P        =  0xBB;             // AMUX0 Positive Channel S
             -elect
           =1 sfr  ADC0CF       =  0xBC;             // ADC0 Configuration
           =1 sfr  ADC0L        =  0xBD;             // ADC0 Low
           =1 sfr  ADC0H        =  0xBE;             // ADC0 High
           =1 sfr  SMB0CN       =  0xC0;             // SMBus Control
           =1 sfr  SMB0CF       =  0xC1;             // SMBus Configuration
           =1 sfr  SMB0DAT      =  0xC2;             // SMBus Data
           =1 sfr  ADC0GTL      =  0xC3;             // ADC0 Greater-Than Compar
             -e Low
           =1 sfr  ADC0GTH      =  0xC4;             // ADC0 Greater-Than Compar
             -e High
           =1 sfr  ADC0LTL      =  0xC5;             // ADC0 Less-Than Compare W
             -ord Low
           =1 sfr  ADC0LTH      =  0xC6;             // ADC0 Less-Than Compare W
             -ord High
           =1 sfr  P4           =  0xC7;             // Port 4 Latch
           =1 sfr  TMR2CN       =  0xC8;             // Timer/Counter 2 Control
           =1 sfr  REG0CN       =  0xC9;             // Voltage Regulator Contro
             -l
           =1 sfr  TMR2RLL      =  0xCA;             // Timer/Counter 2 Reload L
             -ow
           =1 sfr  TMR2RLH      =  0xCB;             // Timer/Counter 2 Reload H
             -igh
           =1 sfr  TMR2L        =  0xCC;             // Timer/Counter 2 Low
           =1 sfr  TMR2H        =  0xCD;             // Timer/Counter 2 High
           =1 sfr  PSW          =  0xD0;             // Program Status Word
           =1 sfr  REF0CN       =  0xD1;             // Voltage Reference Contro
             -l
           =1 sfr  SCON1        =  0xD2;             // UART1 Control
           =1 sfr  SBUF1        =  0xD3;             // UART1 Data Buffer
           =1 sfr  P0SKIP       =  0xD4;             // Port 0 Skip
           =1 sfr  P1SKIP       =  0xD5;             // Port 1 Skip
           =1 sfr  P2SKIP       =  0xD6;             // Port 2 Skip
           =1 sfr  USB0XCN      =  0xD7;             // USB0 Transceiver Control
           =1 sfr  PCA0CN       =  0xD8;             // PCA0 Control
           =1 sfr  PCA0MD       =  0xD9;             // PCA0 Mode
           =1 sfr  PCA0CPM0     =  0xDA;             // PCA0 Module 0 Mode Regis
             -ter
           =1 sfr  PCA0CPM1     =  0xDB;             // PCA0 Module 1 Mode Regis
             -ter
           =1 sfr  PCA0CPM2     =  0xDC;             // PCA0 Module 2 Mode Regis
             -ter
           =1 sfr  PCA0CPM3     =  0xDD;             // PCA0 Module 3 Mode Regis
             -ter
           =1 sfr  PCA0CPM4     =  0xDE;             // PCA0 Module 4 Mode Regis
             -ter
           =1 sfr  P3SKIP       =  0xDF;             // Port 3 Skip
           =1 sfr  ACC          =  0xE0;             // Accumulator
           =1 sfr  XBR0         =  0xE1;             // Port I/O Crossbar Contro
             -l 0
           =1 sfr  XBR1         =  0xE2;             // Port I/O Crossbar Contro
             -l 1
           =1 sfr  XBR2         =  0xE3;             // Port I/O Crossbar Contro
             -l 2
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 12  

           =1 sfr  IT01CF       =  0xE4;             // INT0/INT1 Configuration
           =1 sfr  SMOD1        =  0xE5;             // UART1 Mode
           =1 sfr  EIE1         =  0xE6;             // Extended Interrupt Enabl
             -e 1
           =1 sfr  EIE2         =  0xE7;             // Extended Interrupt Enabl
             -e 2
           =1 sfr  ADC0CN       =  0xE8;             // ADC0 Control
           =1 sfr  PCA0CPL1     =  0xE9;             // PCA0 Capture 1 Low
           =1 sfr  PCA0CPH1     =  0xEA;             // PCA0 Capture 1 High
           =1 sfr  PCA0CPL2     =  0xEB;             // PCA0 Capture 2 Low
           =1 sfr  PCA0CPH2     =  0xEC;             // PCA0 Capture 2 High
           =1 sfr  PCA0CPL3     =  0xED;             // PCA0 Capture 3 Low
           =1 sfr  PCA0CPH3     =  0xEE;             // PCA0 Capture 3 High
           =1 sfr  RSTSRC       =  0xEF;             // Reset Source Configurati
             -on/Status
           =1 sfr  B            =  0xF0;             // B Register
           =1 sfr  P0MDIN       =  0xF1;             // Port 0 Input Mode Config
             -uration
           =1 sfr  P1MDIN       =  0xF2;             // Port 1 Input Mode Config
             -uration
           =1 sfr  P2MDIN       =  0xF3;             // Port 2 Input Mode Config
             -uration
           =1 sfr  P3MDIN       =  0xF4;             // Port 3 Input Mode Config
             -uration
           =1 sfr  P4MDIN       =  0xF5;             // Port 4 Input Mode Config
             -uration
           =1 sfr  EIP1         =  0xF6;             // Extended Interrupt Prior
             -ity 1
           =1 sfr  EIP2         =  0xF7;             // Extended Interrupt Prior
             -ity 2
           =1 sfr  SPI0CN       =  0xF8;             // SPI0 Control
           =1 sfr  PCA0L        =  0xF9;             // PCA0 Counter Low
           =1 sfr  PCA0H        =  0xFA;             // PCA0 Counter High
           =1 sfr  PCA0CPL0     =  0xFB;             // PCA0 Capture 0 Low
           =1 sfr  PCA0CPH0     =  0xFC;             // PCA0 Capture 0 High
           =1 sfr  PCA0CPL4     =  0xFD;             // PCA0 Capture 4 Low
           =1 sfr  PCA0CPH4     =  0xFE;             // PCA0 Capture 4 High
           =1 sfr  VDM0CN       =  0xFF;             // VDD Monitor Control
           =1 
           =1 
           =1 //----------------------------------------------------------------
             --------------
           =1 // Bit Definitions
           =1 //----------------------------------------------------------------
             --------------
           =1 
           =1 // TCON 0x88
           =1 sbit TF1     = 0x8F;                   // Timer1 overflow flag
           =1 sbit TR1     = 0x8E;                   // Timer1 on/off control
           =1 sbit TF0     = 0x8D;                   // Timer0 overflow flag
           =1 sbit TR0     = 0x8C;                   // Timer0 on/off control
           =1 sbit IE1     = 0x8B;                   // Ext interrupt 1 edge fla
             -g
           =1 sbit IT1     = 0x8A;                   // Ext interrupt 1 type
           =1 sbit IE0     = 0x89;                   // Ext interrupt 0 edge fla
             -g
           =1 sbit IT0     = 0x88;                   // Ext interrupt 0 type
           =1 
           =1 // SCON0 0x98
           =1 sbit S0MODE  = 0x9F;                   // Serial mode control bit 
             -0
           =1                                        // Bit6 UNUSED
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 13  

           =1 sbit MCE0    = 0x9D;                   // Multiprocessor communica
             -tion enable
           =1 sbit REN0    = 0x9C;                   // Receive enable
           =1 sbit TB80    = 0x9B;                   // Transmit bit 8
           =1 sbit RB80    = 0x9A;                   // Receive bit 8
           =1 sbit TI0     = 0x99;                   // Transmit interrupt flag
           =1 sbit RI0     = 0x98;                   // Receive interrupt flag
           =1 
           =1 // IE 0xA8
           =1 sbit EA      = 0xAF;                   // Global interrupt enable
           =1 sbit ESPI0   = 0xAE;                   // SPI0 interrupt enable
           =1 sbit ET2     = 0xAD;                   // Timer2 interrupt enable
           =1 sbit ES0     = 0xAC;                   // UART0 interrupt enable
           =1 sbit ET1     = 0xAB;                   // Timer1 interrupt enable
           =1 sbit EX1     = 0xAA;                   // External interrupt 1 ena
             -ble
           =1 sbit ET0     = 0xA9;                   // Timer0 interrupt enable
           =1 sbit EX0     = 0xA8;                   // External interrupt 0 ena
             -ble
           =1 
           =1 // IP 0xB8
           =1                                        // Bit7 UNUSED
           =1 sbit PSPI0   = 0xBE;                   // SPI0 interrupt priority
           =1 sbit PT2     = 0xBD;                   // Timer2 priority
           =1 sbit PS0     = 0xBC;                   // UART0 priority
           =1 sbit PT1     = 0xBB;                   // Timer1 priority
           =1 sbit PX1     = 0xBA;                   // External interrupt 1 pri
             -ority
           =1 sbit PT0     = 0xB9;                   // Timer0 priority
           =1 sbit PX0     = 0xB8;                   // External interrupt 0 pri
             -ority
           =1 
           =1 // SMB0CN 0xC0
           =1 sbit MASTER  = 0xC7;                   // Master/slave indicator
           =1 sbit TXMODE  = 0xC6;                   // Transmit mode indicator
           =1 sbit STA     = 0xC5;                   // Start flag
           =1 sbit STO     = 0xC4;                   // Stop flag
           =1 sbit ACKRQ   = 0xC3;                   // Acknowledge request
           =1 sbit ARBLOST = 0xC2;                   // Arbitration lost indicat
             -or
           =1 sbit ACK     = 0xC1;                   // Acknowledge flag
           =1 sbit SI      = 0xC0;                   // SMBus interrupt flag
           =1 
           =1 // TMR2CN 0xC8
           =1 sbit TF2H    = 0xCF;                   // Timer2 high byte overflo
             -w flag
           =1 sbit TF2L    = 0xCE;                   // Timer2 low byte overflow
             - flag
           =1 sbit TF2LEN  = 0xCD;                   // Timer2 low byte interrup
             -t enable
           =1 sbit T2CE    = 0xCC;                   // Timer2 capture enable
           =1 sbit T2SPLIT = 0xCB;                   // Timer2 split mode enable
           =1 sbit TR2     = 0xCA;                   // Timer2 on/off control
           =1 sbit T2CSS   = 0xC9;                   // Timer 2 Capture Source s
             -elect
           =1 sbit T2XCLK  = 0xC8;                   // Timer2 external clock se
             -lect
           =1 
           =1 // PSW 0xD0
           =1 sbit CY      = 0xD7;                   // Carry flag
           =1 sbit AC      = 0xD6;                   // Auxiliary carry flag
           =1 sbit F0      = 0xD5;                   // User flag 0
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 14  

           =1 sbit RS1     = 0xD4;                   // Register bank select 1
           =1 sbit RS0     = 0xD3;                   // Register bank select 0
           =1 sbit OV      = 0xD2;                   // Overflow flag
           =1 sbit F1      = 0xD1;                   // User flag 1
           =1 sbit P       = 0xD0;                   // Accumulator parity flag
           =1 
           =1 // PCA0CN 0xD8
           =1 sbit CF      = 0xDF;                   // PCA0 counter overflow fl
             -ag
           =1 sbit CR      = 0xDE;                   // PCA0 counter run control
           =1                                        // Bit5 UNUSED
           =1 sbit CCF4    = 0xDC;                   // PCA0 module4 capture/com
             -pare flag
           =1 sbit CCF3    = 0xDB;                   // PCA0 module3 capture/com
             -pare flag
           =1 sbit CCF2    = 0xDA;                   // PCA0 module2 capture/com
             -pare flag
           =1 sbit CCF1    = 0xD9;                   // PCA0 module1 capture/com
             -pare flag
           =1 sbit CCF0    = 0xD8;                   // PCA0 module0 capture/com
             -pare flag
           =1 
           =1 // ADC0CN 0xE8
           =1 sbit AD0EN   = 0xEF;                   // ADC0 enable
           =1 sbit AD0TM   = 0xEE;                   // ADC0 track mode
           =1 sbit AD0INT  = 0xED;                   // ADC0 conversion complete
             - interrupt flag
           =1 sbit AD0BUSY = 0xEC;                   // ADC0 busy flag
           =1 sbit AD0WINT = 0xEB;                   // ADC0 window compare inte
             -rrupt flag
           =1 sbit AD0CM2  = 0xEA;                   // ADC0 conversion mode sel
             -ect 2
           =1 sbit AD0CM1  = 0xE9;                   // ADC0 conversion mode sel
             -ect 1
           =1 sbit AD0CM0  = 0xE8;                   // ADC0 conversion mode sel
             -ect 0
           =1 
           =1 // SPI0CN 0xF8
           =1 sbit SPIF    = 0xFF;                   // SPI0 interrupt flag
           =1 sbit WCOL    = 0xFE;                   // SPI0 write collision fla
             -g
           =1 sbit MODF    = 0xFD;                   // SPI0 mode fault flag
           =1 sbit RXOVRN  = 0xFC;                   // SPI0 rx overrun flag
           =1 sbit NSSMD1  = 0xFB;                   // SPI0 slave select mode 1
           =1 sbit NSSMD0  = 0xFA;                   // SPI0 slave select mode 0
           =1 sbit TXBMT   = 0xF9;                   // SPI0 transmit buffer emp
             -ty
           =1 sbit SPIEN   = 0xF8;                   // SPI0 SPI enable
           =1 
           =1 
           =1 //----------------------------------------------------------------
             --------------
           =1 // Interrupt Priorities
           =1 //----------------------------------------------------------------
             --------------
           =1 
           =1 #define INTERRUPT_INT0             0   // External Interrupt 0
           =1 #define INTERRUPT_TIMER0           1   // Timer0 Overflow
           =1 #define INTERRUPT_INT1             2   // External Interrupt 1
           =1 #define INTERRUPT_TIMER1           3   // Timer1 Overflow
           =1 #define INTERRUPT_UART0            4   // Serial Port 0
           =1 #define INTERRUPT_TIMER2           5   // Timer2 Overflow
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 15  

           =1 #define INTERRUPT_SPI0             6   // Serial Peripheral Interf
             -ace 0
           =1 #define INTERRUPT_SMBUS0           7   // SMBus0 Interface
           =1 #define INTERRUPT_USB0             8   // USB Interface
           =1 #define INTERRUPT_ADC0_WINDOW      9   // ADC0 Window Comparison
           =1 #define INTERRUPT_ADC0_EOC         10  // ADC0 End Of Conversion
           =1 #define INTERRUPT_PCA0             11  // PCA0 Peripheral
           =1 #define INTERRUPT_COMPARATOR0      12  // Comparator0
           =1 #define INTERRUPT_COMPARATOR1      13  // Comparator1
           =1 #define INTERRUPT_TIMER3           14  // Timer3 Overflow
           =1 #define INTERRUPT_VBUS_LEVEL       15  // VBUS level-triggered int
             -errupt
           =1 #define INTERRUPT_UART1            16  // Serial Port 1
           =1 
           =1 //----------------------------------------------------------------
             --------------
           =1 // Header File PreProcessor Directive
           =1 //----------------------------------------------------------------
             --------------
           =1 
           =1 #endif                                 // #define C8051F340_H
 289      =1  
 290      =1  //----------------------------------------------------------------
             --------------
 291      =1  // End Of File
 292      =1  //----------------------------------------------------------------
             --------------
  39          #include "F34x_MSD_Util.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Util.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file for F34x_Util.h. It contains functions and variable
             -s 
  10      =1  // prototypes.
  11      =1  //
  12      =1  //
  13      =1  // FID:            34X000068
  14      =1  // Target:         C8051F34x
  15      =1  // Tool chain:     Keil
  16      =1  // Command Line:   See Readme.txt
  17      =1  // Project Name:   F34x_USB_MSD
  18      =1  //
  19      =1  // Release 1.1
  20      =1  //    -All changes by PKC
  21      =1  //    -09 JUN 2006
  22      =1  //    -No changes; incremented revision number to match project re
             -vision
  23      =1  //
  24      =1  // Release 1.0
  25      =1  //    -Initial Release
  26      =1  //
  27      =1  
  28      =1  //----------------------------------------------------------------
             --------------
  29      =1  // Header File Preprocessor Directive
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 16  

  30      =1  //----------------------------------------------------------------
             --------------
  31      =1  
  32      =1  #ifndef _UTIL_H_
  33      =1  #define _UTIL_H_
  34      =1  
  35      =1  #include "F34x_MSD_USB_Main.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_USB_Main.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Main header file for USB firmware. Includes function prototypes
             -,
  10      =2  // standard constants, and configuration constants.//
  11      =2  //
  12      =2  // FID:            34X000063
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -No changes; incremented revision number to match project re
             -vision
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  // 11/22/02 - DM: 1. Updated function prototypes and added constan
             -ts
  27      =2  //                to F34x_USB_Main.h with sample interrupt firmwar
             -e.
  28      =2  
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  // Header File Preprocessor Directive
  31      =2  //----------------------------------------------------------------
             --------------
  32      =2  
  33      =2  #ifndef _USB_MAIN_H_
  34      =2  #define _USB_MAIN_H_
  35      =2  
  36      =2  #include "F34x_MSD_Definitions.h"
   1      =3  //----------------------------------------------------------------
             --------------
   2      =3  // F34x_MSD_Definitions.h
   3      =3  //----------------------------------------------------------------
             --------------
   4      =3  // Copyright 2006 Silicon Laboratories, Inc.
   5      =3  // http://www.silabs.com
   6      =3  //
   7      =3  // Program Description:
   8      =3  //
   9      =3  // Header file with all definitions.
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 17  

  10      =3  //
  11      =3  //
  12      =3  // FID:            34X000032
  13      =3  // Target:         C8051F34x
  14      =3  // Tool chain:     Keil
  15      =3  // Command Line:   See Readme.txt
  16      =3  // Project Name:   F34x_USB_MSD
  17      =3  //
  18      =3  // Release 1.1
  19      =3  //    -All changes by PKC
  20      =3  //    -09 JUN 2006
  21      =3  //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  22      =3  //
  23      =3  // Release 1.0
  24      =3  //    -Initial Release
  25      =3  //
  26      =3  
  27      =3  //----------------------------------------------------------------
             --------------
  28      =3  // Header File Preprocessor Directive
  29      =3  //----------------------------------------------------------------
             --------------
  30      =3  
  31      =3  #ifndef __DEFINITIONS_H__
           =3 #define __DEFINITIONS_H__
           =3 
           =3 #define DEBUG_TIMEOUTS
           =3 #include "c8051f340.h"
           =3 #ifdef DEBUG_TIMEOUTS
           =3 sbit START_STOP_SPI = P3^0 ;
           =3 sbit START_STOP_READ_TO = P3^1;
           =3 sbit START_STOP_WRITE_TO = P3^2;
           =3 
           =3 #define START_SPI_TIMEOUT (START_STOP_SPI = 1)
           =3 #define STOP_SPI_TIME_OUT (START_STOP_SPI = 0)
           =3 #define START_READ_COPY (START_STOP_READ_TO = 1)
           =3 #define STOP_READ_COPY (START_STOP_READ_TO = 0)
           =3 #define START_WRITE_COPY (START_STOP_WRITE_TO = 1)
           =3 #define STOP_WRITE_COPY (START_STOP_WRITE_TO = 0)
           =3 #else
           =3 
           =3 #define START_SPI_TIMEOUT /\
           =3 /
           =3 #define STOP_SPI_TIME_OUT /\
           =3 /
           =3 #define START_READ_COPY /\
           =3 /
           =3 #define STOP_READ_COPY /\
           =3 /
           =3 #define START_WRITE_COPY /\
           =3 /
           =3 #define STOP_WRITE_COPY /\
           =3 /
           =3 
           =3 #endif
           =3 
           =3 #define ENDLINE         "\r\n"
           =3 #define ENDLINE_SGN '\r'
           =3 
           =3 #endif
  37      =2  //#define _USB_LOW_SPEED_                      // Change this comm
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 18  

             -ent to make Full/Low speed
  38      =2  
  39      =2  #define SYSCLK                   12000000    // SYSCLK frequency i
             -n Hz
  40      =2  
  41      =2  // USB clock selections (SFR CLKSEL)
  42      =2  #define USB_4X_CLOCK             0x00        // Select 4x clock mu
             -ltiplier, for USB Full Speed
  43      =2  #define USB_INT_OSC_DIV_2        0x10        // See Data Sheet sec
             -tion 13. Oscillators
  44      =2  #define USB_EXT_OSC              0x20
  45      =2  #define USB_EXT_OSC_DIV_2        0x30
  46      =2  #define USB_EXT_OSC_DIV_3        0x40
  47      =2  #define USB_EXT_OSC_DIV_4        0x50
  48      =2  
  49      =2  // System clock selections (SFR CLKSEL)
  50      =2  #define SYS_INT_OSC              0x00        // Select to use inte
             -rnal oscillator
  51      =2  #define SYS_4X_MUL               0x03        // Select to use inte
             -rnal oscillator
  52      =2  #define SYS_EXT_OSC              0x01        // Select to use an e
             -xternal oscillator
  53      =2  #define SYS_4X_DIV_2             0x02
  54      =2  
  55      =2  // BYTE type definition
  56      =2  #ifndef _BYTE_DEF_
  57      =2  #define _BYTE_DEF_
  58      =2  typedef unsigned char BYTE;
  59      =2  #endif   /* _BYTE_DEF_ */
  60      =2  
  61      =2  // WORD type definition, for KEIL Compiler
  62      =2  #ifndef _WORD_DEF_                           // Compiler Specific,
             - written for Little Endian
  63      =2  #define _WORD_DEF_
  64      =2  typedef union {unsigned int i; unsigned char c[2];} WORD;
  65      =2  #define LSB 1                                // All words sent to 
             -and received from the host are
  66      =2  #define MSB 0                                // little endian, thi
             -s is switched by software when
  67      =2                                               // neccessary.  These
             - sections of code have been marked
  68      =2                                                                                           // with "Compiler Specific" as above for easier modifi
             -cation
  69      =2  #endif   /* _WORD_DEF_ */
  70      =2  
  71      =2  // DWORD type definition
  72      =2  #ifndef _DWORD_DEF_
  73      =2  #define _DWORD_DEF_
  74      =2  typedef unsigned long DWORD;
  75      =2  #endif /* _DWORD_DEF_ */
  76      =2  
  77      =2  extern volatile DWORD xdata tickcount;
  78      =2  
  79      =2  // Define Endpoint Packet Sizes
  80      =2  #ifdef _USB_LOW_SPEED_
           =2 #define  EP0_PACKET_SIZE         0x40        // This value can be 
             -8,16,32,64 depending on device speed, see USB spec
           =2 #else
  83      =2  #define  EP0_PACKET_SIZE         0x40
  84      =2  #endif /* _USB_LOW_SPEED_ */ 
  85      =2  
  86      =2  #define  EP1_PACKET_SIZE         0x0040      // Can range 0 - 1024
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 19  

             - depending on data and transfer type  
  87      =2  #define  EP1_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP1_PACKET_SIZE
  88      =2  #define  EP2_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type
  89      =2  #define  EP2_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP2_PACKET_SIZE
  90      =2  
  91      =2  // Standard Descriptor Types
  92      =2  #define  DSC_DEVICE              0x01        // Device Descriptor
  93      =2  #define  DSC_CONFIG              0x02        // Configuration Desc
             -riptor
  94      =2  #define  DSC_STRING              0x03        // String Descriptor
  95      =2  #define  DSC_INTERFACE           0x04        // Interface Descript
             -or
  96      =2  #define  DSC_ENDPOINT            0x05        // Endpoint Descripto
             -r
  97      =2  
  98      =2  // HID Descriptor Types
  99      =2  #define DSC_HID                                 0x21            // HID Class Descriptor
 100      =2  #define DSC_HID_REPORT                  0x22            // HID Report Descriptor
 101      =2  
 102      =2  // Standard Request Codes
 103      =2  #define  GET_STATUS             0x00        // Code for Get Status
 104      =2  #define  CLEAR_FEATURE          0x01        // Code for Clear Feat
             -ure
 105      =2  #define  SET_FEATURE            0x03        // Code for Set Featur
             -e
 106      =2  #define  SET_ADDRESS            0x05        // Code for Set Addres
             -s
 107      =2  #define  GET_DESCRIPTOR         0x06        // Code for Get Descri
             -ptor
 108      =2  #define  SET_DESCRIPTOR         0x07        // Code for Set Descri
             -ptor(not used)
 109      =2  #define  GET_CONFIGURATION      0x08        // Code for Get Config
             -uration
 110      =2  #define  SET_CONFIGURATION      0x09        // Code for Set Config
             -uration
 111      =2  #define  GET_INTERFACE          0x0A        // Code for Get Interf
             -ace
 112      =2  #define  SET_INTERFACE          0x0B        // Code for Set Interf
             -ace
 113      =2  #define  SYNCH_FRAME            0x0C        // Code for Synch Fram
             -e(not used)
 114      =2  #define  MSD_RESET                              0xFF            // Mass-storage device Reset
 115      =2  #define  MSD_GET_MAX_LUN                0xFE            // Mass-storage device Get Max LU
             -N
 116      =2  
 117      =2  // HID Request Codes
 118      =2  #define GET_REPORT                              0x01            // Code for Get Report
 119      =2  #define GET_IDLE                                0x02            // Code for Get Idle
 120      =2  #define GET_PROTOCOL                    0x03            // Code for Get Protocol
 121      =2  #define SET_REPORT                              0x09            // Code for Set Report
 122      =2  #define SET_IDLE                                0x0A            // Code for Set Idle
 123      =2  #define SET_PROTOCOL                    0x0B            // Code for Set Protocol
 124      =2  
 125      =2  // Define device states
 126      =2  #define  DEV_ATTACHED            0x00        // Device is in Attac
             -hed State
 127      =2  #define  DEV_POWERED             0x01        // Device is in Power
             -ed State
 128      =2  #define  DEV_DEFAULT             0x02        // Device is in Defau
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 20  

             -lt State
 129      =2  #define  DEV_ADDRESS             0x03        // Device is in Addre
             -ssed State
 130      =2  #define  DEV_CONFIGURED          0x04        // Device is in Confi
             -gured State
 131      =2  #define  DEV_SUSPENDED           0x05        // Device is in Suspe
             -nded State
 132      =2  
 133      =2  // Define bmRequestType bitmaps
 134      =2  #define  IN_DEVICE               0x00        // Request made to de
             -vice, direction is IN 
 135      =2  #define  OUT_DEVICE              0x80        // Request made to de
             -vice, direction is OUT
 136      =2  #define  IN_INTERFACE            0x01        // Request made to in
             -terface, direction is IN
 137      =2  #define  OUT_INTERFACE           0x81        // Request made to in
             -terface, direction is OUT
 138      =2  #define  IN_ENDPOINT             0x02        // Request made to en
             -dpoint, direction is IN
 139      =2  #define  OUT_ENDPOINT            0x82        // Request made to en
             -dpoint, direction is OUT
 140      =2  
 141      =2  // Define wIndex bitmaps
 142      =2  #define  IN_EP1                  0x81        // Index values used 
             -by Set and Clear feature
 143      =2  #define  OUT_EP1                 0x01        // commands for Endpo
             -int_Halt
 144      =2  #define  IN_EP2                  0x82
 145      =2  #ifdef __F326_VER__
           =2 #define  OUT_EP2                                 0x01           
           =2 #else
 148      =2  #define  OUT_EP2                                 0x01           
 149      =2  #endif
 150      =2  
 151      =2  // Define wValue bitmaps for Standard Feature Selectors
 152      =2  #define  DEVICE_REMOTE_WAKEUP    0x01        // Remote wakeup feat
             -ure(not used)
 153      =2  #define  ENDPOINT_HALT           0x00        // Endpoint_Halt feat
             -ure selector
 154      =2  
 155      =2  // Define Endpoint States
 156      =2  #define  EP_IDLE                 0x00        // This signifies End
             -point Idle State
 157      =2  #define  EP_TX                   0x01        // Endpoint Transmit 
             -State
 158      =2  #define  EP_RX                   0x02        // Endpoint Receive S
             -tate
 159      =2  #define  EP_HALT                 0x03        // Endpoint Halt Stat
             -e (return stalls)
 160      =2  #define  EP_STALL                0x04        // Endpoint Stall (se
             -nd procedural stall next status phase)
 161      =2  #define  EP_ADDRESS              0x05        // Endpoint Address (
             -change FADDR during next status phase)
 162      =2  
 163      =2  // Function prototypes
 164      =2  // USB Routines
 165      =2  void USB_Resume(void);                       // This routine resum
             -es USB operation
 166      =2  void USB_Reset(void);                        // Called after USB b
             -us reset
 167      =2  void Handle_Setup(void);                     // Handle setup packe
             -t on Endpoint 0
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 21  

 168      =2  void Handle_In1(BYTE* ptr_buf);                       // Handle in
             - packet on Endpoint 1
 169      =2  void Handle_Out2(void);                      // Handle out packet 
             -on Endpoint 2
 170      =2  void USB_Suspend(void);                      // This routine calle
             -d when suspend signalling on bus
 171      =2  void Out2_Get_Data(BYTE* ptr_buf);                               // Copies from FIFO to ptr_
             -buf, clears FIFO-full flag.
 172      =2  void Out2_Done(void);                                            // Call this when finished with the d
             -ata
 173      =2  
 174      =2  // Standard Requests
 175      =2  void Get_Status(void);                       // These are called f
             -or each specific standard request
 176      =2  void Clear_Feature(void);
 177      =2  void Set_Feature(void);
 178      =2  void Set_Address(void);
 179      =2  void Get_Descriptor(void);
 180      =2  void Get_Configuration(void);
 181      =2  void Set_Configuration(void);
 182      =2  void Get_Interface(void);
 183      =2  void Set_Interface(void);
 184      =2  
 185      =2  // MSD Specific Requests
 186      =2  // void Reset_Msd(void);
 187      =2  // void Get_MaxLUN(void);
 188      =2  
 189      =2  // Initialization Routines
 190      =2  void Sys_Clk_Init(void);                      // Initialize the sy
             -stem clock(depends on Full/Low speed)
 191      =2  void Port_Init(void);                        // Configure ports fo
             -r this specific application
 192      =2  void USB0_Init(void);                        // Configure USB core
             - for either Full/Low speed
 193      =2  void Timer_Init(void);                       // Start timer 2 for 
             -use by ADC and to check switches
 194      =2  void Adc_Init(void);                         // Configure ADC for 
             -continuous conversion, low-power mode
 195      =2  
 196      =2  // Other Routines
 197      =2  void Timer2_ISR(void);                       // Called when Timer 
             -2 overflows, see if switches are pressed
 198      =2  void Adc_ConvComple_ISR(void);               // When a conversion 
             -completes, switch ADC multiplexor
 199      =2  void USB_ISR(void);                          // Called to determin
             -e type of USB interrupt
 200      =2  void Fifo_ReadC(BYTE, unsigned int, BYTE *) ;
 201      =2  extern void Fifo_Read (BYTE, unsigned int, BYTE *) ; // Used for m
             -ultiple byte reads of Endpoint fifos
 202      =2  extern void Fifo_Write (BYTE, unsigned int, BYTE *) reentrant;// U
             -sed for multiple byte writes of Endpoint fifos
 203      =2  void Force_Stall(void);                      // Forces a procedura
             -l stall on Endpoint 0
 204      =2  void Delay(void);                            // Approximately 80 u
             -s/1 ms on Full/Low Speed
 205      =2  
 206      =2  void USB_In(BYTE* ptr_buf,unsigned count);
 207      =2  
 208      =2  void USB_Bulk_Init(void);
 209      =2  
 210      =2  extern unsigned xdata Out_Count;
 211      =2  extern BYTE xdata Out_Packet[EP2_PACKET_SIZE];
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 22  

 212      =2  extern BYTE xdata In_count;
 213      =2  extern BYTE xdata In_Packet[EP1_PACKET_SIZE];
 214      =2  //extern BYTE xdata In_Overrun;
 215      =2  
 216      =2  #endif      /* _USB_MAIN_H_ */
 217      =2  
  36      =1  
  37      =1  //----------------------------------------------------------------
             --------------
  38      =1  // Function Prototypes
  39      =1  //----------------------------------------------------------------
             --------------
  40      =1  
  41      =1  extern DWORD htonl(DWORD d);
  42      =1  extern unsigned htons(unsigned w);
  43      =1  #define ntohs htons
  44      =1  #define ntohl htonl
  45      =1  
  46      =1  //----------------------------------------------------------------
             --------------
  47      =1  // Variable Prototype
  48      =1  //----------------------------------------------------------------
             --------------
  49      =1  
  50      =1  char* Str_Token(char* str);
  51      =1  
  52      =1  //----------------------------------------------------------------
             --------------
  53      =1  // Macros Prototypes
  54      =1  //----------------------------------------------------------------
             --------------
  55      =1  
  56      =1  #define min(a,b) (((a)<(b))?(a):(b))
  57      =1  #define max(a,b) (((a)>(b))?(a):(b))
  58      =1  
  59      =1  #define msb(x) (((x)>>8)&0x000000FFul)
  60      =1  #define lsb(x) ((x)&0x000000FFul)
  61      =1  
  62      =1  #endif
  40          #include "F34x_MSD_UART.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_UART.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_UART.c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000058
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 23  

  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef _UART_H_
  32      =1  #define _UART_H_
  33      =1  
  34      =1  //----------------------------------------------------------------
             --------------
  35      =1  // Function Prototypes
  36      =1  //----------------------------------------------------------------
             --------------
  37      =1  
  38      =1  void UART0_Init(void);
  39      =1  
  40      =1  unsigned char key_available(void);
  41      =1  
  42      =1  #endif
  41          #include "F34x_MSD_Cmd.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Cmd.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_Cmd.c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000031
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 24  

  30      =1  
  31      =1  #ifndef _CMD_H_
  32      =1  #define _CMD_H_
  33      =1  
  34      =1  #define CLS 12
  35      =1  #define BACKSPACE 8
  36      =1  #define CRLF '\n'
  37      =1  #define SPACE ' '
  38      =1  #define PROMPT '>'
  39      =1  
  40      =1  //----------------------------------------------------------------
             --------------
  41      =1  // Function Prototypes
  42      =1  //----------------------------------------------------------------
             --------------
  43      =1  
  44      =1  void Cmd_Init(void);
  45      =1  void Cmd_Step(void);
  46      =1  
  47      =1  #endif
  42          #include "F34x_MSD_Sect_Serv.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Sect_Serv.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_Sect_Serv
             -.c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000054
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef _SECT_SERV_H_
  32      =1  #define _SECT_SERV_H_
  33      =1  
  34      =1  #include "F34x_MSD_USB_Main.h"
   1      =2  //----------------------------------------------------------------
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 25  

             --------------
   2      =2  // F34x_MSD_USB_Main.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Main header file for USB firmware. Includes function prototypes
             -,
  10      =2  // standard constants, and configuration constants.//
  11      =2  //
  12      =2  // FID:            34X000063
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -No changes; incremented revision number to match project re
             -vision
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  // 11/22/02 - DM: 1. Updated function prototypes and added constan
             -ts
  27      =2  //                to F34x_USB_Main.h with sample interrupt firmwar
             -e.
  28      =2  
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  // Header File Preprocessor Directive
  31      =2  //----------------------------------------------------------------
             --------------
  32      =2  
  33      =2  #ifndef _USB_MAIN_H_
           =2 #define _USB_MAIN_H_
           =2 
           =2 #include "F34x_MSD_Definitions.h"
           =2 //#define _USB_LOW_SPEED_                      // Change this comm
             -ent to make Full/Low speed
           =2 
           =2 #define SYSCLK                   12000000    // SYSCLK frequency i
             -n Hz
           =2 
           =2 // USB clock selections (SFR CLKSEL)
           =2 #define USB_4X_CLOCK             0x00        // Select 4x clock mu
             -ltiplier, for USB Full Speed
           =2 #define USB_INT_OSC_DIV_2        0x10        // See Data Sheet sec
             -tion 13. Oscillators
           =2 #define USB_EXT_OSC              0x20
           =2 #define USB_EXT_OSC_DIV_2        0x30
           =2 #define USB_EXT_OSC_DIV_3        0x40
           =2 #define USB_EXT_OSC_DIV_4        0x50
           =2 
           =2 // System clock selections (SFR CLKSEL)
           =2 #define SYS_INT_OSC              0x00        // Select to use inte
             -rnal oscillator
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 26  

           =2 #define SYS_4X_MUL               0x03        // Select to use inte
             -rnal oscillator
           =2 #define SYS_EXT_OSC              0x01        // Select to use an e
             -xternal oscillator
           =2 #define SYS_4X_DIV_2             0x02
           =2 
           =2 // BYTE type definition
           =2 #ifndef _BYTE_DEF_
           =2 #define _BYTE_DEF_
           =2 typedef unsigned char BYTE;
           =2 #endif   /* _BYTE_DEF_ */
           =2 
           =2 // WORD type definition, for KEIL Compiler
           =2 #ifndef _WORD_DEF_                           // Compiler Specific,
             - written for Little Endian
           =2 #define _WORD_DEF_
           =2 typedef union {unsigned int i; unsigned char c[2];} WORD;
           =2 #define LSB 1                                // All words sent to 
             -and received from the host are
           =2 #define MSB 0                                // little endian, thi
             -s is switched by software when
           =2                                              // neccessary.  These
             - sections of code have been marked
           =2                                                                                          // with "Compiler Specific" as above for easier modifi
             -cation
           =2 #endif   /* _WORD_DEF_ */
           =2 
           =2 // DWORD type definition
           =2 #ifndef _DWORD_DEF_
           =2 #define _DWORD_DEF_
           =2 typedef unsigned long DWORD;
           =2 #endif /* _DWORD_DEF_ */
           =2 
           =2 extern volatile DWORD xdata tickcount;
           =2 
           =2 // Define Endpoint Packet Sizes
           =2 #ifdef _USB_LOW_SPEED_
           =2 #define  EP0_PACKET_SIZE         0x40        // This value can be 
             -8,16,32,64 depending on device speed, see USB spec
           =2 #else
           =2 #define  EP0_PACKET_SIZE         0x40
           =2 #endif /* _USB_LOW_SPEED_ */ 
           =2 
           =2 #define  EP1_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type  
           =2 #define  EP1_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP1_PACKET_SIZE
           =2 #define  EP2_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type
           =2 #define  EP2_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP2_PACKET_SIZE
           =2 
           =2 // Standard Descriptor Types
           =2 #define  DSC_DEVICE              0x01        // Device Descriptor
           =2 #define  DSC_CONFIG              0x02        // Configuration Desc
             -riptor
           =2 #define  DSC_STRING              0x03        // String Descriptor
           =2 #define  DSC_INTERFACE           0x04        // Interface Descript
             -or
           =2 #define  DSC_ENDPOINT            0x05        // Endpoint Descripto
             -r
           =2 
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 27  

           =2 // HID Descriptor Types
           =2 #define DSC_HID                                 0x21            // HID Class Descriptor
           =2 #define DSC_HID_REPORT                  0x22            // HID Report Descriptor
           =2 
           =2 // Standard Request Codes
           =2 #define  GET_STATUS             0x00        // Code for Get Status
           =2 #define  CLEAR_FEATURE          0x01        // Code for Clear Feat
             -ure
           =2 #define  SET_FEATURE            0x03        // Code for Set Featur
             -e
           =2 #define  SET_ADDRESS            0x05        // Code for Set Addres
             -s
           =2 #define  GET_DESCRIPTOR         0x06        // Code for Get Descri
             -ptor
           =2 #define  SET_DESCRIPTOR         0x07        // Code for Set Descri
             -ptor(not used)
           =2 #define  GET_CONFIGURATION      0x08        // Code for Get Config
             -uration
           =2 #define  SET_CONFIGURATION      0x09        // Code for Set Config
             -uration
           =2 #define  GET_INTERFACE          0x0A        // Code for Get Interf
             -ace
           =2 #define  SET_INTERFACE          0x0B        // Code for Set Interf
             -ace
           =2 #define  SYNCH_FRAME            0x0C        // Code for Synch Fram
             -e(not used)
           =2 #define  MSD_RESET                              0xFF            // Mass-storage device Reset
           =2 #define  MSD_GET_MAX_LUN                0xFE            // Mass-storage device Get Max LU
             -N
           =2 
           =2 // HID Request Codes
           =2 #define GET_REPORT                              0x01            // Code for Get Report
           =2 #define GET_IDLE                                0x02            // Code for Get Idle
           =2 #define GET_PROTOCOL                    0x03            // Code for Get Protocol
           =2 #define SET_REPORT                              0x09            // Code for Set Report
           =2 #define SET_IDLE                                0x0A            // Code for Set Idle
           =2 #define SET_PROTOCOL                    0x0B            // Code for Set Protocol
           =2 
           =2 // Define device states
           =2 #define  DEV_ATTACHED            0x00        // Device is in Attac
             -hed State
           =2 #define  DEV_POWERED             0x01        // Device is in Power
             -ed State
           =2 #define  DEV_DEFAULT             0x02        // Device is in Defau
             -lt State
           =2 #define  DEV_ADDRESS             0x03        // Device is in Addre
             -ssed State
           =2 #define  DEV_CONFIGURED          0x04        // Device is in Confi
             -gured State
           =2 #define  DEV_SUSPENDED           0x05        // Device is in Suspe
             -nded State
           =2 
           =2 // Define bmRequestType bitmaps
           =2 #define  IN_DEVICE               0x00        // Request made to de
             -vice, direction is IN 
           =2 #define  OUT_DEVICE              0x80        // Request made to de
             -vice, direction is OUT
           =2 #define  IN_INTERFACE            0x01        // Request made to in
             -terface, direction is IN
           =2 #define  OUT_INTERFACE           0x81        // Request made to in
             -terface, direction is OUT
           =2 #define  IN_ENDPOINT             0x02        // Request made to en
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 28  

             -dpoint, direction is IN
           =2 #define  OUT_ENDPOINT            0x82        // Request made to en
             -dpoint, direction is OUT
           =2 
           =2 // Define wIndex bitmaps
           =2 #define  IN_EP1                  0x81        // Index values used 
             -by Set and Clear feature
           =2 #define  OUT_EP1                 0x01        // commands for Endpo
             -int_Halt
           =2 #define  IN_EP2                  0x82
           =2 #ifdef __F326_VER__
           =2 #define  OUT_EP2                                 0x01           
           =2 #else
           =2 #define  OUT_EP2                                 0x01           
           =2 #endif
           =2 
           =2 // Define wValue bitmaps for Standard Feature Selectors
           =2 #define  DEVICE_REMOTE_WAKEUP    0x01        // Remote wakeup feat
             -ure(not used)
           =2 #define  ENDPOINT_HALT           0x00        // Endpoint_Halt feat
             -ure selector
           =2 
           =2 // Define Endpoint States
           =2 #define  EP_IDLE                 0x00        // This signifies End
             -point Idle State
           =2 #define  EP_TX                   0x01        // Endpoint Transmit 
             -State
           =2 #define  EP_RX                   0x02        // Endpoint Receive S
             -tate
           =2 #define  EP_HALT                 0x03        // Endpoint Halt Stat
             -e (return stalls)
           =2 #define  EP_STALL                0x04        // Endpoint Stall (se
             -nd procedural stall next status phase)
           =2 #define  EP_ADDRESS              0x05        // Endpoint Address (
             -change FADDR during next status phase)
           =2 
           =2 // Function prototypes
           =2 // USB Routines
           =2 void USB_Resume(void);                       // This routine resum
             -es USB operation
           =2 void USB_Reset(void);                        // Called after USB b
             -us reset
           =2 void Handle_Setup(void);                     // Handle setup packe
             -t on Endpoint 0
           =2 void Handle_In1(BYTE* ptr_buf);                       // Handle in
             - packet on Endpoint 1
           =2 void Handle_Out2(void);                      // Handle out packet 
             -on Endpoint 2
           =2 void USB_Suspend(void);                      // This routine calle
             -d when suspend signalling on bus
           =2 void Out2_Get_Data(BYTE* ptr_buf);                               // Copies from FIFO to ptr_
             -buf, clears FIFO-full flag.
           =2 void Out2_Done(void);                                            // Call this when finished with the d
             -ata
           =2 
           =2 // Standard Requests
           =2 void Get_Status(void);                       // These are called f
             -or each specific standard request
           =2 void Clear_Feature(void);
           =2 void Set_Feature(void);
           =2 void Set_Address(void);
           =2 void Get_Descriptor(void);
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 29  

           =2 void Get_Configuration(void);
           =2 void Set_Configuration(void);
           =2 void Get_Interface(void);
           =2 void Set_Interface(void);
           =2 
           =2 // MSD Specific Requests
           =2 // void Reset_Msd(void);
           =2 // void Get_MaxLUN(void);
           =2 
           =2 // Initialization Routines
           =2 void Sys_Clk_Init(void);                      // Initialize the sy
             -stem clock(depends on Full/Low speed)
           =2 void Port_Init(void);                        // Configure ports fo
             -r this specific application
           =2 void USB0_Init(void);                        // Configure USB core
             - for either Full/Low speed
           =2 void Timer_Init(void);                       // Start timer 2 for 
             -use by ADC and to check switches
           =2 void Adc_Init(void);                         // Configure ADC for 
             -continuous conversion, low-power mode
           =2 
           =2 // Other Routines
           =2 void Timer2_ISR(void);                       // Called when Timer 
             -2 overflows, see if switches are pressed
           =2 void Adc_ConvComple_ISR(void);               // When a conversion 
             -completes, switch ADC multiplexor
           =2 void USB_ISR(void);                          // Called to determin
             -e type of USB interrupt
           =2 void Fifo_ReadC(BYTE, unsigned int, BYTE *) ;
           =2 extern void Fifo_Read (BYTE, unsigned int, BYTE *) ; // Used for m
             -ultiple byte reads of Endpoint fifos
           =2 extern void Fifo_Write (BYTE, unsigned int, BYTE *) reentrant;// U
             -sed for multiple byte writes of Endpoint fifos
           =2 void Force_Stall(void);                      // Forces a procedura
             -l stall on Endpoint 0
           =2 void Delay(void);                            // Approximately 80 u
             -s/1 ms on Full/Low Speed
           =2 
           =2 void USB_In(BYTE* ptr_buf,unsigned count);
           =2 
           =2 void USB_Bulk_Init(void);
           =2 
           =2 extern unsigned xdata Out_Count;
           =2 extern BYTE xdata Out_Packet[EP2_PACKET_SIZE];
           =2 extern BYTE xdata In_count;
           =2 extern BYTE xdata In_Packet[EP1_PACKET_SIZE];
           =2 //extern BYTE xdata In_Overrun;
           =2 
           =2 #endif      /* _USB_MAIN_H_ */
 217      =2  
  35      =1  #include "F34x_MSD_Physical_Settings.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_Physical_Settings.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Header file with common definitions
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 30  

  10      =2  //
  11      =2  //
  12      =2  // FID:            34X000048
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  
  27      =2  //----------------------------------------------------------------
             --------------
  28      =2  // Header File Preprocessor Directive
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  
  31      =2  #ifndef __PHYSICAL_SETTINGS_H__
  32      =2  #define __PHYSICAL_SETTINGS_H__
  33      =2  
  34      =2  #include "c8051f340.h"
   1      =3  //----------------------------------------------------------------
             --------------
   2      =3  // C8051F340.h
   3      =3  //----------------------------------------------------------------
             --------------
   4      =3  // Copyright 2005 Silicon Laboratories, Inc.
   5      =3  // http://www.silabs.com
   6      =3  //
   7      =3  // Program Description:
   8      =3  //
   9      =3  // Register/bit definitions for the C8051F34x family.
  10      =3  //
  11      =3  //
  12      =3  // FID:            34X000002
  13      =3  // Target:         C8051F340, 'F341, 'F342, 'F343, 'F344, 'F345, '
             -F346, 'F347
  14      =3  // Tool chain:     Keil
  15      =3  // Command Line:   None
  16      =3  //
  17      =3  // Release 1.0
  18      =3  //    -Initial Release (GP\PKC)
  19      =3  //    -13 DEC 2005
  20      =3  
  21      =3  //----------------------------------------------------------------
             --------------
  22      =3  // Header File Preprocessor Directive
  23      =3  //----------------------------------------------------------------
             --------------
  24      =3  
  25      =3  #ifndef C8051F340_H
           =3 #define C8051F340_H
           =3 
           =3 //----------------------------------------------------------------
             --------------
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 31  

           =3 // Byte Registers
           =3 //----------------------------------------------------------------
             --------------
           =3 
           =3 sfr  P0           =  0x80;             // Port 0 Latch
           =3 sfr  SP           =  0x81;             // Stack Pointer
           =3 sfr  DPL          =  0x82;             // Data Pointer Low
           =3 sfr  DPH          =  0x83;             // Data Pointer High
           =3 sfr  EMI0TC       =  0x84;             // EMIF Timing
           =3 sfr  EMI0CF       =  0x85;             // EMIF Configuration
           =3 sfr  OSCLCN       =  0x86;             // Internal Low-Freq Oscill
             -ator Control
           =3 sfr  PCON         =  0x87;             // Power Control
           =3 sfr  TCON         =  0x88;             // Timer/Counter Control
           =3 sfr  TMOD         =  0x89;             // Timer/Counter Mode
           =3 sfr  TL0          =  0x8A;             // Timer/Counter 0 Low
           =3 sfr  TL1          =  0x8B;             // Timer/Counter 1 Low
           =3 sfr  TH0          =  0x8C;             // Timer/Counter 0 High
           =3 sfr  TH1          =  0x8D;             // Timer/Counter 1 High
           =3 sfr  CKCON        =  0x8E;             // Clock Control
           =3 sfr  PSCTL        =  0x8F;             // Program Store R/W Contro
             -l
           =3 sfr  P1           =  0x90;             // Port 1 Latch
           =3 sfr  TMR3CN       =  0x91;             // Timer/Counter 3Control
           =3 sfr  TMR3RLL      =  0x92;             // Timer/Counter 3 Reload L
             -ow
           =3 sfr  TMR3RLH      =  0x93;             // Timer/Counter 3 Reload H
             -igh
           =3 sfr  TMR3L        =  0x94;             // Timer/Counter 3Low
           =3 sfr  TMR3H        =  0x95;             // Timer/Counter 3 High
           =3 sfr  USB0ADR      =  0x96;             // USB0 Indirect Address Re
             -gister
           =3 sfr  USB0DAT      =  0x97;             // USB0 Data Register
           =3 sfr  SCON0        =  0x98;             // UART0 Control
           =3 sfr  SBUF0        =  0x99;             // UART0 Data Buffer
           =3 sfr  CPT1CN       =  0x9A;             // Comparator1 Control
           =3 sfr  CPT0CN       =  0x9B;             // Comparator0 Control
           =3 sfr  CPT1MD       =  0x9C;             // Comparator1 Mode Selecti
             -on
           =3 sfr  CPT0MD       =  0x9D;             // Comparator0 Mode Selecti
             -on
           =3 sfr  CPT1MX       =  0x9E;             // Comparator1 MUX Selectio
             -n
           =3 sfr  CPT0MX       =  0x9F;             // Comparator0 MUX Selectio
             -n
           =3 sfr  P2           =  0xA0;             // Port 2 Latch
           =3 sfr  SPI0CFG      =  0xA1;             // SPI Configuration
           =3 sfr  SPI0CKR      =  0xA2;             // SPI Clock Rate Control
           =3 sfr  SPI0DAT      =  0xA3;             // SPI Data
           =3 sfr  P0MDOUT      =  0xA4;             // Port 0 Output Mode Confi
             -guration
           =3 sfr  P1MDOUT      =  0xA5;             // Port 1 Output Mode Confi
             -guration
           =3 sfr  P2MDOUT      =  0xA6;             // Port 2 Output Mode Confi
             -guration
           =3 sfr  P3MDOUT      =  0xA7;             // Port 3 Output Mode Confi
             -guration
           =3 sfr  IE           =  0xA8;             // Interrupt Enable
           =3 sfr  CLKSEL       =  0xA9;             // Clock Select
           =3 sfr  EMI0CN       =  0xAA;             // External Memory Interfac
             -e Control
           =3 sfr  SBCON1       =  0xAC;             // UART1 Baud Rate Generato
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 32  

             -r Control
           =3 sfr  P4MDOUT      =  0xAE;             // Port 4 Output Mode Confi
             -guration
           =3 sfr  PFE0CN       =  0xAF;             // Prefetch Engine Control
           =3 sfr  P3           =  0xB0;             // Port 3 Latch
           =3 sfr  OSCXCN       =  0xB1;             // External Oscillator Cont
             -rol
           =3 sfr  OSCICN       =  0xB2;             // Internal Oscillator Cont
             -rol
           =3 sfr  OSCICL       =  0xB3;             // Internal Oscillator Cali
             -bration
           =3 sfr  SBRLL1       =  0xB4;             // UART1 Baud Rate Generato
             -r Low
           =3 sfr  SBRLH1       =  0xB5;             // UART1 Baud Rate Generato
             -r High
           =3 sfr  FLSCL        =  0xB6;             // Flash Scale
           =3 sfr  FLKEY        =  0xB7;             // Flash Lock and Key
           =3 sfr  IP           =  0xB8;             // Interrupt Priority
           =3 sfr  CLKMUL       =  0xB9;             // Clock Multiplier
           =3 sfr  AMX0N        =  0xBA;             // AMUX0 Negative Channel S
             -elect
           =3 sfr  AMX0P        =  0xBB;             // AMUX0 Positive Channel S
             -elect
           =3 sfr  ADC0CF       =  0xBC;             // ADC0 Configuration
           =3 sfr  ADC0L        =  0xBD;             // ADC0 Low
           =3 sfr  ADC0H        =  0xBE;             // ADC0 High
           =3 sfr  SMB0CN       =  0xC0;             // SMBus Control
           =3 sfr  SMB0CF       =  0xC1;             // SMBus Configuration
           =3 sfr  SMB0DAT      =  0xC2;             // SMBus Data
           =3 sfr  ADC0GTL      =  0xC3;             // ADC0 Greater-Than Compar
             -e Low
           =3 sfr  ADC0GTH      =  0xC4;             // ADC0 Greater-Than Compar
             -e High
           =3 sfr  ADC0LTL      =  0xC5;             // ADC0 Less-Than Compare W
             -ord Low
           =3 sfr  ADC0LTH      =  0xC6;             // ADC0 Less-Than Compare W
             -ord High
           =3 sfr  P4           =  0xC7;             // Port 4 Latch
           =3 sfr  TMR2CN       =  0xC8;             // Timer/Counter 2 Control
           =3 sfr  REG0CN       =  0xC9;             // Voltage Regulator Contro
             -l
           =3 sfr  TMR2RLL      =  0xCA;             // Timer/Counter 2 Reload L
             -ow
           =3 sfr  TMR2RLH      =  0xCB;             // Timer/Counter 2 Reload H
             -igh
           =3 sfr  TMR2L        =  0xCC;             // Timer/Counter 2 Low
           =3 sfr  TMR2H        =  0xCD;             // Timer/Counter 2 High
           =3 sfr  PSW          =  0xD0;             // Program Status Word
           =3 sfr  REF0CN       =  0xD1;             // Voltage Reference Contro
             -l
           =3 sfr  SCON1        =  0xD2;             // UART1 Control
           =3 sfr  SBUF1        =  0xD3;             // UART1 Data Buffer
           =3 sfr  P0SKIP       =  0xD4;             // Port 0 Skip
           =3 sfr  P1SKIP       =  0xD5;             // Port 1 Skip
           =3 sfr  P2SKIP       =  0xD6;             // Port 2 Skip
           =3 sfr  USB0XCN      =  0xD7;             // USB0 Transceiver Control
           =3 sfr  PCA0CN       =  0xD8;             // PCA0 Control
           =3 sfr  PCA0MD       =  0xD9;             // PCA0 Mode
           =3 sfr  PCA0CPM0     =  0xDA;             // PCA0 Module 0 Mode Regis
             -ter
           =3 sfr  PCA0CPM1     =  0xDB;             // PCA0 Module 1 Mode Regis
             -ter
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 33  

           =3 sfr  PCA0CPM2     =  0xDC;             // PCA0 Module 2 Mode Regis
             -ter
           =3 sfr  PCA0CPM3     =  0xDD;             // PCA0 Module 3 Mode Regis
             -ter
           =3 sfr  PCA0CPM4     =  0xDE;             // PCA0 Module 4 Mode Regis
             -ter
           =3 sfr  P3SKIP       =  0xDF;             // Port 3 Skip
           =3 sfr  ACC          =  0xE0;             // Accumulator
           =3 sfr  XBR0         =  0xE1;             // Port I/O Crossbar Contro
             -l 0
           =3 sfr  XBR1         =  0xE2;             // Port I/O Crossbar Contro
             -l 1
           =3 sfr  XBR2         =  0xE3;             // Port I/O Crossbar Contro
             -l 2
           =3 sfr  IT01CF       =  0xE4;             // INT0/INT1 Configuration
           =3 sfr  SMOD1        =  0xE5;             // UART1 Mode
           =3 sfr  EIE1         =  0xE6;             // Extended Interrupt Enabl
             -e 1
           =3 sfr  EIE2         =  0xE7;             // Extended Interrupt Enabl
             -e 2
           =3 sfr  ADC0CN       =  0xE8;             // ADC0 Control
           =3 sfr  PCA0CPL1     =  0xE9;             // PCA0 Capture 1 Low
           =3 sfr  PCA0CPH1     =  0xEA;             // PCA0 Capture 1 High
           =3 sfr  PCA0CPL2     =  0xEB;             // PCA0 Capture 2 Low
           =3 sfr  PCA0CPH2     =  0xEC;             // PCA0 Capture 2 High
           =3 sfr  PCA0CPL3     =  0xED;             // PCA0 Capture 3 Low
           =3 sfr  PCA0CPH3     =  0xEE;             // PCA0 Capture 3 High
           =3 sfr  RSTSRC       =  0xEF;             // Reset Source Configurati
             -on/Status
           =3 sfr  B            =  0xF0;             // B Register
           =3 sfr  P0MDIN       =  0xF1;             // Port 0 Input Mode Config
             -uration
           =3 sfr  P1MDIN       =  0xF2;             // Port 1 Input Mode Config
             -uration
           =3 sfr  P2MDIN       =  0xF3;             // Port 2 Input Mode Config
             -uration
           =3 sfr  P3MDIN       =  0xF4;             // Port 3 Input Mode Config
             -uration
           =3 sfr  P4MDIN       =  0xF5;             // Port 4 Input Mode Config
             -uration
           =3 sfr  EIP1         =  0xF6;             // Extended Interrupt Prior
             -ity 1
           =3 sfr  EIP2         =  0xF7;             // Extended Interrupt Prior
             -ity 2
           =3 sfr  SPI0CN       =  0xF8;             // SPI0 Control
           =3 sfr  PCA0L        =  0xF9;             // PCA0 Counter Low
           =3 sfr  PCA0H        =  0xFA;             // PCA0 Counter High
           =3 sfr  PCA0CPL0     =  0xFB;             // PCA0 Capture 0 Low
           =3 sfr  PCA0CPH0     =  0xFC;             // PCA0 Capture 0 High
           =3 sfr  PCA0CPL4     =  0xFD;             // PCA0 Capture 4 Low
           =3 sfr  PCA0CPH4     =  0xFE;             // PCA0 Capture 4 High
           =3 sfr  VDM0CN       =  0xFF;             // VDD Monitor Control
           =3 
           =3 
           =3 //----------------------------------------------------------------
             --------------
           =3 // Bit Definitions
           =3 //----------------------------------------------------------------
             --------------
           =3 
           =3 // TCON 0x88
           =3 sbit TF1     = 0x8F;                   // Timer1 overflow flag
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 34  

           =3 sbit TR1     = 0x8E;                   // Timer1 on/off control
           =3 sbit TF0     = 0x8D;                   // Timer0 overflow flag
           =3 sbit TR0     = 0x8C;                   // Timer0 on/off control
           =3 sbit IE1     = 0x8B;                   // Ext interrupt 1 edge fla
             -g
           =3 sbit IT1     = 0x8A;                   // Ext interrupt 1 type
           =3 sbit IE0     = 0x89;                   // Ext interrupt 0 edge fla
             -g
           =3 sbit IT0     = 0x88;                   // Ext interrupt 0 type
           =3 
           =3 // SCON0 0x98
           =3 sbit S0MODE  = 0x9F;                   // Serial mode control bit 
             -0
           =3                                        // Bit6 UNUSED
           =3 sbit MCE0    = 0x9D;                   // Multiprocessor communica
             -tion enable
           =3 sbit REN0    = 0x9C;                   // Receive enable
           =3 sbit TB80    = 0x9B;                   // Transmit bit 8
           =3 sbit RB80    = 0x9A;                   // Receive bit 8
           =3 sbit TI0     = 0x99;                   // Transmit interrupt flag
           =3 sbit RI0     = 0x98;                   // Receive interrupt flag
           =3 
           =3 // IE 0xA8
           =3 sbit EA      = 0xAF;                   // Global interrupt enable
           =3 sbit ESPI0   = 0xAE;                   // SPI0 interrupt enable
           =3 sbit ET2     = 0xAD;                   // Timer2 interrupt enable
           =3 sbit ES0     = 0xAC;                   // UART0 interrupt enable
           =3 sbit ET1     = 0xAB;                   // Timer1 interrupt enable
           =3 sbit EX1     = 0xAA;                   // External interrupt 1 ena
             -ble
           =3 sbit ET0     = 0xA9;                   // Timer0 interrupt enable
           =3 sbit EX0     = 0xA8;                   // External interrupt 0 ena
             -ble
           =3 
           =3 // IP 0xB8
           =3                                        // Bit7 UNUSED
           =3 sbit PSPI0   = 0xBE;                   // SPI0 interrupt priority
           =3 sbit PT2     = 0xBD;                   // Timer2 priority
           =3 sbit PS0     = 0xBC;                   // UART0 priority
           =3 sbit PT1     = 0xBB;                   // Timer1 priority
           =3 sbit PX1     = 0xBA;                   // External interrupt 1 pri
             -ority
           =3 sbit PT0     = 0xB9;                   // Timer0 priority
           =3 sbit PX0     = 0xB8;                   // External interrupt 0 pri
             -ority
           =3 
           =3 // SMB0CN 0xC0
           =3 sbit MASTER  = 0xC7;                   // Master/slave indicator
           =3 sbit TXMODE  = 0xC6;                   // Transmit mode indicator
           =3 sbit STA     = 0xC5;                   // Start flag
           =3 sbit STO     = 0xC4;                   // Stop flag
           =3 sbit ACKRQ   = 0xC3;                   // Acknowledge request
           =3 sbit ARBLOST = 0xC2;                   // Arbitration lost indicat
             -or
           =3 sbit ACK     = 0xC1;                   // Acknowledge flag
           =3 sbit SI      = 0xC0;                   // SMBus interrupt flag
           =3 
           =3 // TMR2CN 0xC8
           =3 sbit TF2H    = 0xCF;                   // Timer2 high byte overflo
             -w flag
           =3 sbit TF2L    = 0xCE;                   // Timer2 low byte overflow
             - flag
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 35  

           =3 sbit TF2LEN  = 0xCD;                   // Timer2 low byte interrup
             -t enable
           =3 sbit T2CE    = 0xCC;                   // Timer2 capture enable
           =3 sbit T2SPLIT = 0xCB;                   // Timer2 split mode enable
           =3 sbit TR2     = 0xCA;                   // Timer2 on/off control
           =3 sbit T2CSS   = 0xC9;                   // Timer 2 Capture Source s
             -elect
           =3 sbit T2XCLK  = 0xC8;                   // Timer2 external clock se
             -lect
           =3 
           =3 // PSW 0xD0
           =3 sbit CY      = 0xD7;                   // Carry flag
           =3 sbit AC      = 0xD6;                   // Auxiliary carry flag
           =3 sbit F0      = 0xD5;                   // User flag 0
           =3 sbit RS1     = 0xD4;                   // Register bank select 1
           =3 sbit RS0     = 0xD3;                   // Register bank select 0
           =3 sbit OV      = 0xD2;                   // Overflow flag
           =3 sbit F1      = 0xD1;                   // User flag 1
           =3 sbit P       = 0xD0;                   // Accumulator parity flag
           =3 
           =3 // PCA0CN 0xD8
           =3 sbit CF      = 0xDF;                   // PCA0 counter overflow fl
             -ag
           =3 sbit CR      = 0xDE;                   // PCA0 counter run control
           =3                                        // Bit5 UNUSED
           =3 sbit CCF4    = 0xDC;                   // PCA0 module4 capture/com
             -pare flag
           =3 sbit CCF3    = 0xDB;                   // PCA0 module3 capture/com
             -pare flag
           =3 sbit CCF2    = 0xDA;                   // PCA0 module2 capture/com
             -pare flag
           =3 sbit CCF1    = 0xD9;                   // PCA0 module1 capture/com
             -pare flag
           =3 sbit CCF0    = 0xD8;                   // PCA0 module0 capture/com
             -pare flag
           =3 
           =3 // ADC0CN 0xE8
           =3 sbit AD0EN   = 0xEF;                   // ADC0 enable
           =3 sbit AD0TM   = 0xEE;                   // ADC0 track mode
           =3 sbit AD0INT  = 0xED;                   // ADC0 conversion complete
             - interrupt flag
           =3 sbit AD0BUSY = 0xEC;                   // ADC0 busy flag
           =3 sbit AD0WINT = 0xEB;                   // ADC0 window compare inte
             -rrupt flag
           =3 sbit AD0CM2  = 0xEA;                   // ADC0 conversion mode sel
             -ect 2
           =3 sbit AD0CM1  = 0xE9;                   // ADC0 conversion mode sel
             -ect 1
           =3 sbit AD0CM0  = 0xE8;                   // ADC0 conversion mode sel
             -ect 0
           =3 
           =3 // SPI0CN 0xF8
           =3 sbit SPIF    = 0xFF;                   // SPI0 interrupt flag
           =3 sbit WCOL    = 0xFE;                   // SPI0 write collision fla
             -g
           =3 sbit MODF    = 0xFD;                   // SPI0 mode fault flag
           =3 sbit RXOVRN  = 0xFC;                   // SPI0 rx overrun flag
           =3 sbit NSSMD1  = 0xFB;                   // SPI0 slave select mode 1
           =3 sbit NSSMD0  = 0xFA;                   // SPI0 slave select mode 0
           =3 sbit TXBMT   = 0xF9;                   // SPI0 transmit buffer emp
             -ty
           =3 sbit SPIEN   = 0xF8;                   // SPI0 SPI enable
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 36  

           =3 
           =3 
           =3 //----------------------------------------------------------------
             --------------
           =3 // Interrupt Priorities
           =3 //----------------------------------------------------------------
             --------------
           =3 
           =3 #define INTERRUPT_INT0             0   // External Interrupt 0
           =3 #define INTERRUPT_TIMER0           1   // Timer0 Overflow
           =3 #define INTERRUPT_INT1             2   // External Interrupt 1
           =3 #define INTERRUPT_TIMER1           3   // Timer1 Overflow
           =3 #define INTERRUPT_UART0            4   // Serial Port 0
           =3 #define INTERRUPT_TIMER2           5   // Timer2 Overflow
           =3 #define INTERRUPT_SPI0             6   // Serial Peripheral Interf
             -ace 0
           =3 #define INTERRUPT_SMBUS0           7   // SMBus0 Interface
           =3 #define INTERRUPT_USB0             8   // USB Interface
           =3 #define INTERRUPT_ADC0_WINDOW      9   // ADC0 Window Comparison
           =3 #define INTERRUPT_ADC0_EOC         10  // ADC0 End Of Conversion
           =3 #define INTERRUPT_PCA0             11  // PCA0 Peripheral
           =3 #define INTERRUPT_COMPARATOR0      12  // Comparator0
           =3 #define INTERRUPT_COMPARATOR1      13  // Comparator1
           =3 #define INTERRUPT_TIMER3           14  // Timer3 Overflow
           =3 #define INTERRUPT_VBUS_LEVEL       15  // VBUS level-triggered int
             -errupt
           =3 #define INTERRUPT_UART1            16  // Serial Port 1
           =3 
           =3 //----------------------------------------------------------------
             --------------
           =3 // Header File PreProcessor Directive
           =3 //----------------------------------------------------------------
             --------------
           =3 
           =3 #endif                                 // #define C8051F340_H
 289      =3  
 290      =3  //----------------------------------------------------------------
             --------------
 291      =3  // End Of File
 292      =3  //----------------------------------------------------------------
             --------------
  35      =2  
  36      =2  // Physical size in bytes of one MMC FLASH sector
  37      =2  #define PHYSICAL_BLOCK_SIZE     512   
  38      =2  
  39      =2  sbit SCLK = P0^0;
  40      =2  sbit SCS  = P0^3;
  41      =2  sbit MISO = P0^1;
  42      =2  sbit MOSI = P0^2;
  43      =2  
  44      =2  #endif
  36      =1  //#include "F34x_MMC.h"
  37      =1  
  38      =1  //----------------------------------------------------------------
             --------------
  39      =1  // Structure Prototypes
  40      =1  //----------------------------------------------------------------
             --------------
  41      =1  
  42      =1  // This large bootrecord will be overlayed on the physical block t
             -hat was read.
  43      =1  typedef struct {
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 37  

  44      =1    BYTE jmp[3];
  45      =1    char oem_name[8];
  46      =1    unsigned bytes_per_sector;
  47      =1    BYTE sectors_per_cluster;
  48      =1    unsigned reserved_sectors;
  49      =1    BYTE fat_copies;
  50      =1    unsigned root_directory_entries;
  51      =1    unsigned number_of_sectors;
  52      =1    BYTE media_descriptor;
  53      =1    unsigned sectors_per_fat;
  54      =1    unsigned sectors_per_track;
  55      =1    unsigned heads;
  56      =1    DWORD hidden_sectors;
  57      =1    DWORD total_sectors;
  58      =1    BYTE drive_number;
  59      =1    BYTE reserved;
  60      =1    BYTE extended_signature;              // 0x29
  61      =1    BYTE serial_number[4];
  62      =1    char volume_label[11];
  63      =1    char filesystem[8];                           // "FAT16   "
  64      =1    BYTE bootstrap[448];
  65      =1    BYTE signature[2];                            // 0x55 0xAA
  66      =1  } bootrecord_large;
  67      =1  
  68      =1  // This small bootrecord will be in memory as long as the program 
             -is running
  69      =1  typedef struct {
  70      =1          BYTE valid;
  71      =1          BYTE fat_copies;
  72      =1          unsigned root_directory_entries;
  73      =1          unsigned number_of_sectors;
  74      =1          unsigned sectors_per_fat;
  75      =1          DWORD total_sectors;
  76      =1          unsigned reserved_sectors;
  77      =1          unsigned hidden_sectors;
  78      =1          BYTE sectors_per_cluster;
  79      =1  } bootrecord_small;
  80      =1  
  81      =1  // This is a global 512-byte buffer. 
  82      =1  // Sect_Read() puts data in this buffer.
  83      =1  // Sect_Write() gets data from this buffer.
  84      =1  extern BYTE xdata Scratch[];
  85      =1  
  86      =1  // Changed these functions into #define, to safe code memory.
  87      =1  #define Sect_Block_Size() ((unsigned)PHYSICAL_BLOCK_SIZE)
  88      =1  //#define Sect_Fat1() ((unsigned)1)
  89      =1  
  90      =1  //----------------------------------------------------------------
             --------------
  91      =1  // Function Prototypes
  92      =1  //----------------------------------------------------------------
             --------------
  93      =1  
  94      =1  void Sect_Init(void);                           // Must be called before calling any othe
             -r Sect_Function.
  95      =1  BYTE Sect_Formatted(void);                      // Returns TRUE is MMC card appears 
             -to be correctly formatted.
  96      =1  unsigned long Sect_Sectors(void);       // Returns number of sectors
  97      =1  DWORD Sect_Size(void);                          // Returns number of bytes available on
             - MMC card.
  98      =1  void Sect_Print(void);                          // Dumps some info (size, bootrecord, fi
             -lesystem, etc).
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 38  

  99      =1  unsigned Sect_Read(unsigned long sector);       // Reads one sector into
             - Scratch buffer.
 100      =1  void Sect_Write(unsigned long sector);  // Write one sector from Sc
             -ratch buffer.
 101      =1  unsigned Sect_Root_Dir(void);           // Returns sector number of root d
             -irectory.
 102      =1  unsigned Sect_Root_Dir_Last(void);      // Last sector number of root d
             -irectory.
 103      =1  unsigned Sect_File_Data(void);          // First sector of file data.
 104      =1  unsigned Sect_Fat1(void);
 105      =1  unsigned Sect_Fat2(void);                       // First sector of 2nd FAT.
 106      =1  void Sect_Write_Multi_Fat(unsigned long sector); // Automatically 
             -handle multiple FAT copies.
 107      =1  void Sect_Validate(void) reentrant;
 108      =1  
 109      =1  #endif
  43          #include "F34x_MSD_File_System.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_File_System.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_File_Syst
             -em..c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000036
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef _FILESYS_H_
  32      =1  #define _FILESYS_H_
  33      =1  
  34      =1  #include "F34x_MSD_USB_Main.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_USB_Main.h
   3      =2  //----------------------------------------------------------------
             --------------
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 39  

   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Main header file for USB firmware. Includes function prototypes
             -,
  10      =2  // standard constants, and configuration constants.//
  11      =2  //
  12      =2  // FID:            34X000063
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -No changes; incremented revision number to match project re
             -vision
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  // 11/22/02 - DM: 1. Updated function prototypes and added constan
             -ts
  27      =2  //                to F34x_USB_Main.h with sample interrupt firmwar
             -e.
  28      =2  
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  // Header File Preprocessor Directive
  31      =2  //----------------------------------------------------------------
             --------------
  32      =2  
  33      =2  #ifndef _USB_MAIN_H_
           =2 #define _USB_MAIN_H_
           =2 
           =2 #include "F34x_MSD_Definitions.h"
           =2 //#define _USB_LOW_SPEED_                      // Change this comm
             -ent to make Full/Low speed
           =2 
           =2 #define SYSCLK                   12000000    // SYSCLK frequency i
             -n Hz
           =2 
           =2 // USB clock selections (SFR CLKSEL)
           =2 #define USB_4X_CLOCK             0x00        // Select 4x clock mu
             -ltiplier, for USB Full Speed
           =2 #define USB_INT_OSC_DIV_2        0x10        // See Data Sheet sec
             -tion 13. Oscillators
           =2 #define USB_EXT_OSC              0x20
           =2 #define USB_EXT_OSC_DIV_2        0x30
           =2 #define USB_EXT_OSC_DIV_3        0x40
           =2 #define USB_EXT_OSC_DIV_4        0x50
           =2 
           =2 // System clock selections (SFR CLKSEL)
           =2 #define SYS_INT_OSC              0x00        // Select to use inte
             -rnal oscillator
           =2 #define SYS_4X_MUL               0x03        // Select to use inte
             -rnal oscillator
           =2 #define SYS_EXT_OSC              0x01        // Select to use an e
             -xternal oscillator
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 40  

           =2 #define SYS_4X_DIV_2             0x02
           =2 
           =2 // BYTE type definition
           =2 #ifndef _BYTE_DEF_
           =2 #define _BYTE_DEF_
           =2 typedef unsigned char BYTE;
           =2 #endif   /* _BYTE_DEF_ */
           =2 
           =2 // WORD type definition, for KEIL Compiler
           =2 #ifndef _WORD_DEF_                           // Compiler Specific,
             - written for Little Endian
           =2 #define _WORD_DEF_
           =2 typedef union {unsigned int i; unsigned char c[2];} WORD;
           =2 #define LSB 1                                // All words sent to 
             -and received from the host are
           =2 #define MSB 0                                // little endian, thi
             -s is switched by software when
           =2                                              // neccessary.  These
             - sections of code have been marked
           =2                                                                                          // with "Compiler Specific" as above for easier modifi
             -cation
           =2 #endif   /* _WORD_DEF_ */
           =2 
           =2 // DWORD type definition
           =2 #ifndef _DWORD_DEF_
           =2 #define _DWORD_DEF_
           =2 typedef unsigned long DWORD;
           =2 #endif /* _DWORD_DEF_ */
           =2 
           =2 extern volatile DWORD xdata tickcount;
           =2 
           =2 // Define Endpoint Packet Sizes
           =2 #ifdef _USB_LOW_SPEED_
           =2 #define  EP0_PACKET_SIZE         0x40        // This value can be 
             -8,16,32,64 depending on device speed, see USB spec
           =2 #else
           =2 #define  EP0_PACKET_SIZE         0x40
           =2 #endif /* _USB_LOW_SPEED_ */ 
           =2 
           =2 #define  EP1_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type  
           =2 #define  EP1_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP1_PACKET_SIZE
           =2 #define  EP2_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type
           =2 #define  EP2_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP2_PACKET_SIZE
           =2 
           =2 // Standard Descriptor Types
           =2 #define  DSC_DEVICE              0x01        // Device Descriptor
           =2 #define  DSC_CONFIG              0x02        // Configuration Desc
             -riptor
           =2 #define  DSC_STRING              0x03        // String Descriptor
           =2 #define  DSC_INTERFACE           0x04        // Interface Descript
             -or
           =2 #define  DSC_ENDPOINT            0x05        // Endpoint Descripto
             -r
           =2 
           =2 // HID Descriptor Types
           =2 #define DSC_HID                                 0x21            // HID Class Descriptor
           =2 #define DSC_HID_REPORT                  0x22            // HID Report Descriptor
           =2 
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 41  

           =2 // Standard Request Codes
           =2 #define  GET_STATUS             0x00        // Code for Get Status
           =2 #define  CLEAR_FEATURE          0x01        // Code for Clear Feat
             -ure
           =2 #define  SET_FEATURE            0x03        // Code for Set Featur
             -e
           =2 #define  SET_ADDRESS            0x05        // Code for Set Addres
             -s
           =2 #define  GET_DESCRIPTOR         0x06        // Code for Get Descri
             -ptor
           =2 #define  SET_DESCRIPTOR         0x07        // Code for Set Descri
             -ptor(not used)
           =2 #define  GET_CONFIGURATION      0x08        // Code for Get Config
             -uration
           =2 #define  SET_CONFIGURATION      0x09        // Code for Set Config
             -uration
           =2 #define  GET_INTERFACE          0x0A        // Code for Get Interf
             -ace
           =2 #define  SET_INTERFACE          0x0B        // Code for Set Interf
             -ace
           =2 #define  SYNCH_FRAME            0x0C        // Code for Synch Fram
             -e(not used)
           =2 #define  MSD_RESET                              0xFF            // Mass-storage device Reset
           =2 #define  MSD_GET_MAX_LUN                0xFE            // Mass-storage device Get Max LU
             -N
           =2 
           =2 // HID Request Codes
           =2 #define GET_REPORT                              0x01            // Code for Get Report
           =2 #define GET_IDLE                                0x02            // Code for Get Idle
           =2 #define GET_PROTOCOL                    0x03            // Code for Get Protocol
           =2 #define SET_REPORT                              0x09            // Code for Set Report
           =2 #define SET_IDLE                                0x0A            // Code for Set Idle
           =2 #define SET_PROTOCOL                    0x0B            // Code for Set Protocol
           =2 
           =2 // Define device states
           =2 #define  DEV_ATTACHED            0x00        // Device is in Attac
             -hed State
           =2 #define  DEV_POWERED             0x01        // Device is in Power
             -ed State
           =2 #define  DEV_DEFAULT             0x02        // Device is in Defau
             -lt State
           =2 #define  DEV_ADDRESS             0x03        // Device is in Addre
             -ssed State
           =2 #define  DEV_CONFIGURED          0x04        // Device is in Confi
             -gured State
           =2 #define  DEV_SUSPENDED           0x05        // Device is in Suspe
             -nded State
           =2 
           =2 // Define bmRequestType bitmaps
           =2 #define  IN_DEVICE               0x00        // Request made to de
             -vice, direction is IN 
           =2 #define  OUT_DEVICE              0x80        // Request made to de
             -vice, direction is OUT
           =2 #define  IN_INTERFACE            0x01        // Request made to in
             -terface, direction is IN
           =2 #define  OUT_INTERFACE           0x81        // Request made to in
             -terface, direction is OUT
           =2 #define  IN_ENDPOINT             0x02        // Request made to en
             -dpoint, direction is IN
           =2 #define  OUT_ENDPOINT            0x82        // Request made to en
             -dpoint, direction is OUT
           =2 
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 42  

           =2 // Define wIndex bitmaps
           =2 #define  IN_EP1                  0x81        // Index values used 
             -by Set and Clear feature
           =2 #define  OUT_EP1                 0x01        // commands for Endpo
             -int_Halt
           =2 #define  IN_EP2                  0x82
           =2 #ifdef __F326_VER__
           =2 #define  OUT_EP2                                 0x01           
           =2 #else
           =2 #define  OUT_EP2                                 0x01           
           =2 #endif
           =2 
           =2 // Define wValue bitmaps for Standard Feature Selectors
           =2 #define  DEVICE_REMOTE_WAKEUP    0x01        // Remote wakeup feat
             -ure(not used)
           =2 #define  ENDPOINT_HALT           0x00        // Endpoint_Halt feat
             -ure selector
           =2 
           =2 // Define Endpoint States
           =2 #define  EP_IDLE                 0x00        // This signifies End
             -point Idle State
           =2 #define  EP_TX                   0x01        // Endpoint Transmit 
             -State
           =2 #define  EP_RX                   0x02        // Endpoint Receive S
             -tate
           =2 #define  EP_HALT                 0x03        // Endpoint Halt Stat
             -e (return stalls)
           =2 #define  EP_STALL                0x04        // Endpoint Stall (se
             -nd procedural stall next status phase)
           =2 #define  EP_ADDRESS              0x05        // Endpoint Address (
             -change FADDR during next status phase)
           =2 
           =2 // Function prototypes
           =2 // USB Routines
           =2 void USB_Resume(void);                       // This routine resum
             -es USB operation
           =2 void USB_Reset(void);                        // Called after USB b
             -us reset
           =2 void Handle_Setup(void);                     // Handle setup packe
             -t on Endpoint 0
           =2 void Handle_In1(BYTE* ptr_buf);                       // Handle in
             - packet on Endpoint 1
           =2 void Handle_Out2(void);                      // Handle out packet 
             -on Endpoint 2
           =2 void USB_Suspend(void);                      // This routine calle
             -d when suspend signalling on bus
           =2 void Out2_Get_Data(BYTE* ptr_buf);                               // Copies from FIFO to ptr_
             -buf, clears FIFO-full flag.
           =2 void Out2_Done(void);                                            // Call this when finished with the d
             -ata
           =2 
           =2 // Standard Requests
           =2 void Get_Status(void);                       // These are called f
             -or each specific standard request
           =2 void Clear_Feature(void);
           =2 void Set_Feature(void);
           =2 void Set_Address(void);
           =2 void Get_Descriptor(void);
           =2 void Get_Configuration(void);
           =2 void Set_Configuration(void);
           =2 void Get_Interface(void);
           =2 void Set_Interface(void);
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 43  

           =2 
           =2 // MSD Specific Requests
           =2 // void Reset_Msd(void);
           =2 // void Get_MaxLUN(void);
           =2 
           =2 // Initialization Routines
           =2 void Sys_Clk_Init(void);                      // Initialize the sy
             -stem clock(depends on Full/Low speed)
           =2 void Port_Init(void);                        // Configure ports fo
             -r this specific application
           =2 void USB0_Init(void);                        // Configure USB core
             - for either Full/Low speed
           =2 void Timer_Init(void);                       // Start timer 2 for 
             -use by ADC and to check switches
           =2 void Adc_Init(void);                         // Configure ADC for 
             -continuous conversion, low-power mode
           =2 
           =2 // Other Routines
           =2 void Timer2_ISR(void);                       // Called when Timer 
             -2 overflows, see if switches are pressed
           =2 void Adc_ConvComple_ISR(void);               // When a conversion 
             -completes, switch ADC multiplexor
           =2 void USB_ISR(void);                          // Called to determin
             -e type of USB interrupt
           =2 void Fifo_ReadC(BYTE, unsigned int, BYTE *) ;
           =2 extern void Fifo_Read (BYTE, unsigned int, BYTE *) ; // Used for m
             -ultiple byte reads of Endpoint fifos
           =2 extern void Fifo_Write (BYTE, unsigned int, BYTE *) reentrant;// U
             -sed for multiple byte writes of Endpoint fifos
           =2 void Force_Stall(void);                      // Forces a procedura
             -l stall on Endpoint 0
           =2 void Delay(void);                            // Approximately 80 u
             -s/1 ms on Full/Low Speed
           =2 
           =2 void USB_In(BYTE* ptr_buf,unsigned count);
           =2 
           =2 void USB_Bulk_Init(void);
           =2 
           =2 extern unsigned xdata Out_Count;
           =2 extern BYTE xdata Out_Packet[EP2_PACKET_SIZE];
           =2 extern BYTE xdata In_count;
           =2 extern BYTE xdata In_Packet[EP1_PACKET_SIZE];
           =2 //extern BYTE xdata In_Overrun;
           =2 
           =2 #endif      /* _USB_MAIN_H_ */
 217      =2  
  35      =1  
  36      =1  //----------------------------------------------------------------
             --------------
  37      =1  // Structure Prototypes
  38      =1  //----------------------------------------------------------------
             --------------
  39      =1  
  40      =1  typedef struct {
  41      =1          unsigned cluster_start;
  42      =1          unsigned long sector_current;
  43      =1          unsigned sector_direntry;
  44      =1          unsigned offset_direntry;
  45      =1          BYTE attrib;
  46      =1          DWORD pos;
  47      =1          DWORD size;
  48      =1          BYTE isopen;
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 44  

  49      =1  } FILE;
  50      =1  
  51      =1  typedef WORD UNI; // Unicode character type
  52      =1  
  53      =1  typedef union {
  54      =1  
  55      =1  struct {
  56      =1          BYTE seq_nr; // Bit 0..4 = seqnr, ascending, start with 1. Bit 6:
             - final part of name
  57      =1          UNI unicode1_5[5]; // Little endian
  58      =1          BYTE attrib; // 0x0F
  59      =1          BYTE type; // 0x00
  60      =1          BYTE checksum; // int i;BYTE sum=0;for(i=0;i<11;i++) { sum=(sum>>
             -1)+((sum&1)<<7);sum+=name[i]; }
  61      =1          UNI unicode6_11[6];
  62      =1          unsigned starting_cluster; // 0x0000
  63      =1          UNI unicode12_13[2];
  64      =1  } lfn;
  65      =1  
  66      =1  struct {
  67      =1          char name[11];
  68      =1          BYTE attrib;
  69      =1          BYTE reserved[10];
  70      =1          WORD time; // 5/6/5 bits for h/m/2*sec
  71      =1          WORD date; // 7/4/5 bits for y-1980/m/d
  72      =1          unsigned starting_cluster; // 0 for empty file
  73      =1          DWORD filesize;
  74      =1  } sfn;
  75      =1  
  76      =1  } dir_entry;
  77      =1  
  78      =1  typedef struct {
  79      =1          unsigned long block;
  80      =1          unsigned offset;
  81      =1          BYTE findempty;
  82      =1          dir_entry* direntry;
  83      =1  } find_info;
  84      =1  
  85      =1  
  86      =1  
  87      =1  #define ATTRIB_READ_ONLY        0x01
  88      =1  #define ATTRIB_HIDDEN           0x02
  89      =1  #define ATTRIB_SYSTEM           0x04
  90      =1  #define ATTRIB_LABEL            0x08
  91      =1  #define ATTRIB_SUBDIR           0x10
  92      =1  #define ATTRIB_ARCHIVE          0x20
  93      =1  
  94      =1  #define SEEK_CUR 0
  95      =1  #define SEEK_END 1
  96      =1  #define SEEK_SET 2
  97      =1  
  98      =1  //----------------------------------------------------------------
             --------------
  99      =1  // Function Prototypes
 100      =1  //----------------------------------------------------------------
             --------------
 101      =1  
 102      =1  int fopen(FILE* f,char* filename,char* mode);
 103      =1  int fseek(FILE* f,long offset,int origin);
 104      =1  DWORD ftell(FILE* f);
 105      =1  int feof(FILE* f);
 106      =1  unsigned fread(FILE* f,BYTE* buffer,unsigned count);
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 45  

 107      =1  unsigned fwrite(FILE* f,BYTE* buffer,unsigned count);
 108      =1  void fclose(FILE* f);
 109      =1  int fexists(char* filename);
 110      =1  int fdelete(char* filename);
 111      =1  BYTE findfirst(find_info* findinfo,BYTE empty);
 112      =1  BYTE findnext(find_info* findinfo);
 113      =1  
 114      =1  
 115      =1  //----------------------------------------------------------------
             ----------------
 116      =1  // Functions only for F340 device
 117      =1  //----------------------------------------------------------------
             ----------------
 118      =1  
 119      =1  #ifdef __F340_VER__
 120      =1  
 121      =1  #define DIRECTORY_EXISTS                1
 122      =1  #define NO_PLACE_FOR_DIRECTORY  2
 123      =1  #define DIRNAME_LENGTH_ERROR    3
 124      =1  
 125      =1  //----------------------------------------------------------------
             --------------
 126      =1  // Function Prototypes
 127      =1  //----------------------------------------------------------------
             --------------
 128      =1  
 129      =1  void FileSys_Init();
 130      =1  BYTE chngdir(char* dirname);
 131      =1  BYTE mkdir(char* dir_name);
 132      =1  BYTE rmdir(char* dir_name) ;
 133      =1  void write_current_dir();
 134      =1  
 135      =1  //----------------------------------------------------------------
             --------------
 136      =1  // Structure Prototypes
 137      =1  //----------------------------------------------------------------
             --------------
 138      =1  
 139      =1  typedef struct 
 140      =1  { 
 141      =1          unsigned long block;
 142      =1          unsigned offset;
 143      =1  }
 144      =1  PREV_SEARCH;
 145      =1  
 146      =1  
 147      =1  #endif
 148      =1  #endif
  44          #include <string.h>
   1      =1  /*----------------------------------------------------------------
             -----------
   2      =1  STRING.H
   3      =1  
   4      =1  String functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, In
             -c.
   6      =1  All rights reserved.
   7      =1  ------------------------------------------------------------------
             ---------*/
   8      =1  
   9      =1  #ifndef __STRING_H__
  10      =1  #define __STRING_H__
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 46  

  11      =1  
  12      =1  #ifndef _SIZE_T
  13      =1   #define _SIZE_T
  14      =1   typedef unsigned int size_t;
  15      =1  #endif
  16      =1  
  17      =1  #ifndef NULL
  18      =1   #define NULL ((void *) 0L)
  19      =1  #endif
  20      =1  
  21      =1  #pragma SAVE
  22      =1  #pragma REGPARMS
  23      =1  extern char *strcat (char *s1, char *s2);
  24      =1  extern char *strncat (char *s1, char *s2, int n);
  25      =1  
  26      =1  extern char strcmp (char *s1, char *s2);
  27      =1  extern char strncmp (char *s1, char *s2, int n);
  28      =1  
  29      =1  extern char *strcpy (char *s1, char *s2);
  30      =1  extern char *strncpy (char *s1, char *s2, int n);
  31      =1  
  32      =1  extern int strlen (char *);
  33      =1  
  34      =1  extern char *strchr (const char *s, char c);
  35      =1  extern int strpos (const char *s, char c);
  36      =1  extern char *strrchr (const char *s, char c);
  37      =1  extern int strrpos (const char *s, char c);
  38      =1  
  39      =1  extern int strspn (char *s, char *set);
  40      =1  extern int strcspn (char *s, char *set);
  41      =1  extern char *strpbrk (char *s, char *set);
  42      =1  extern char *strrpbrk (char *s, char *set);
  43      =1  extern char *strstr  (char *s, char *sub);
  44      =1  extern char *strtok  (char *str, const char *set);
  45      =1  
  46      =1  extern char memcmp (void *s1, void *s2, int n);
  47      =1  extern void *memcpy (void *s1, void *s2, int n);
  48      =1  extern void *memchr (void *s, char val, int n);
  49      =1  extern void *memccpy (void *s1, void *s2, char val, int n);
  50      =1  extern void *memmove (void *s1, void *s2, int n);
  51      =1  extern void *memset  (void *s, char val, int n);
  52      =1  #pragma RESTORE
  53      =1  
  54      =1  #endif
  45          #include <stdio.h>
   1      =1  /*----------------------------------------------------------------
             -----------
   2      =1  STDIO.H
   3      =1  
   4      =1  Prototypes for standard I/O functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, In
             -c.
   6      =1  All rights reserved.
   7      =1  ------------------------------------------------------------------
             ---------*/
   8      =1  
   9      =1  #ifndef __STDIO_H__
  10      =1  #define __STDIO_H__
  11      =1  
  12      =1  #ifndef EOF
  13      =1   #define EOF -1
  14      =1  #endif
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 47  

  15      =1  
  16      =1  #ifndef NULL
           =1  #define NULL ((void *) 0)
           =1 #endif
  19      =1  
  20      =1  #ifndef _SIZE_T
           =1  #define _SIZE_T
           =1  typedef unsigned int size_t;
           =1 #endif
  24      =1  
  25      =1  #pragma SAVE
  26      =1  #pragma REGPARMS
  27      =1  extern char _getkey (void);
  28      =1  extern char getchar (void);
  29      =1  extern char ungetchar (char);
  30      =1  extern char putchar (char);
  31      =1  extern int printf   (const char *, ...);
  32      =1  extern int sprintf  (char *, const char *, ...);
  33      =1  extern int vprintf  (const char *, char *);
  34      =1  extern int vsprintf (char *, const char *, char *);
  35      =1  extern char *gets (char *, int n);
  36      =1  extern int scanf (const char *, ...);
  37      =1  extern int sscanf (char *, const char *, ...);
  38      =1  extern int puts (const char *);
  39      =1  
  40      =1  #pragma RESTORE
  41      =1  
  42      =1  #endif
  43      =1  
  46          #include <ctype.h>
   1      =1  /*----------------------------------------------------------------
             -----------
   2      =1  CTYPE.H
   3      =1  
   4      =1  Prototypes for character functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, In
             -c.
   6      =1  All rights reserved.
   7      =1  ------------------------------------------------------------------
             ---------*/
   8      =1  
   9      =1  #ifndef __CTYPE_H__
  10      =1  #define __CTYPE_H__
  11      =1  
  12      =1  #pragma SAVE
  13      =1  #pragma REGPARMS
  14      =1  extern bit isalpha (unsigned char);
  15      =1  extern bit isalnum (unsigned char);
  16      =1  extern bit iscntrl (unsigned char);
  17      =1  extern bit isdigit (unsigned char);
  18      =1  extern bit isgraph (unsigned char);
  19      =1  extern bit isprint (unsigned char);
  20      =1  extern bit ispunct (unsigned char);
  21      =1  extern bit islower (unsigned char);
  22      =1  extern bit isupper (unsigned char);
  23      =1  extern bit isspace (unsigned char);
  24      =1  extern bit isxdigit (unsigned char);
  25      =1  extern unsigned char tolower (unsigned char);
  26      =1  extern unsigned char toupper (unsigned char);
  27      =1  extern unsigned char toint (unsigned char);
  28      =1  
  29      =1  #define _tolower(c) ( (c)-'A'+'a' )
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 48  

  30      =1  #define _toupper(c) ( (c)-'a'+'A' )
  31      =1  #define toascii(c)  ( (c) & 0x7F )
  32      =1  #pragma RESTORE
  33      =1  
  34      =1  #endif
  47          #include <stdlib.h>
   1      =1  /*----------------------------------------------------------------
             -----------
   2      =1  STDLIB.H
   3      =1  
   4      =1  Standard functions.
   5      =1  Copyright (c) 1988-2005 Keil Elektronik GmbH and Keil Software, In
             -c.
   6      =1  All rights reserved.
   7      =1  ------------------------------------------------------------------
             ---------*/
   8      =1  
   9      =1  #ifndef __STDLIB_H__
  10      =1  #define __STDLIB_H__
  11      =1  
  12      =1  #ifndef _SIZE_T
           =1  #define _SIZE_T
           =1  typedef unsigned int size_t;
           =1 #endif
  16      =1  
  17      =1  #ifndef NULL
           =1  #define NULL ((void *) 0L)
           =1 #endif
  20      =1  
  21      =1  #ifndef _WCHAR_T_DEFINED_
  22      =1  #define _WCHAR_T_DEFINED_
  23      =1  typedef char wchar_t;
  24      =1  #endif
  25      =1  
  26      =1  
  27      =1  #pragma SAVE
  28      =1  #pragma REGPARMS
  29      =1  
  30      =1  extern int    abs  (int   val);
  31      =1  extern long  labs  (long  val);
  32      =1  
  33      =1  extern float atof (char *s1);
  34      =1  extern long  atol (char *s1);
  35      =1  extern int   atoi (char *s1);
  36      =1  extern int   rand ();
  37      =1  extern void  srand (int);
  38      =1  
  39      =1  extern float         strtod  (char *, char **);
  40      =1  extern long          strtol  (char *, char **, unsigned char);
  41      =1  extern unsigned long strtoul (char *, char **, unsigned char);
  42      =1  
  43      =1  #define _MALLOC_MEM_    xdata
  44      =1  
  45      =1  extern void init_mempool          (void _MALLOC_MEM_ *p, unsigned 
             -int size);
  46      =1  extern void _MALLOC_MEM_ *malloc  (unsigned int size);
  47      =1  extern void free                  (void _MALLOC_MEM_ *p);
  48      =1  extern void _MALLOC_MEM_ *realloc (void _MALLOC_MEM_ *p, unsigned 
             -int size);
  49      =1  extern void _MALLOC_MEM_ *calloc  (unsigned int size, unsigned int
             - len);
  50      =1  
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 49  

  51      =1  #pragma RESTORE
  52      =1  
  53      =1  #endif
  48          #include "F34x_MSD_Log.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Log.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_Log.c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000042
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef _LOG_H_
  32      =1  #define _LOG_H_
  33      =1  
  34      =1  //----------------------------------------------------------------
             --------------
  35      =1  // Function Prototypes
  36      =1  //----------------------------------------------------------------
             --------------
  37      =1  
  38      =1  void Log(char* filename);
  39      =1  void Log_Step(void);
  40      =1  void Stop_Logging();
  41      =1  
  42      =1  #endif
  49          #include "F34x_MSD_Temp_Sensor.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Temp_Sensor.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 50  

   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_Temp_Sens
             -or.c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000056
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef __TEMP_SENSOR_H__
  32      =1  #define __TEMP_SENSOR_H__
  33      =1  
  34      =1  
  35      =1  //----------------------------------------------------------------
             --------------
  36      =1  // Function Prototypes
  37      =1  //----------------------------------------------------------------
             --------------
  38      =1  
  39      =1  void Init_Temp_Sensor();
  40      =1  void Calibrate(int temp_value);
  41      =1  int GetTemp();
  42      =1  void Temp_Log_Step(void);
  43      =1  void Temp_Log(char* filename);
  44      =1  void Temp_Sensor_Stop_Logging();
  45      =1  #endif
  50          #include "F34x_MSD_Dir_Commands.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Dir_Commands.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_Dir_Comma
             -nds.c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000034
  13      =1  // Target:         C8051F34x
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 51  

  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  
  32      =1  #ifndef __DIRECTORIES_COMMANDS_H__
  33      =1  #define __DIRECTORIES_COMMANDS_H__
  34      =1  
  35      =1  //----------------------------------------------------------------
             --------------
  36      =1  // Function Prototypes
  37      =1  //----------------------------------------------------------------
             --------------
  38      =1  
  39      =1  // See F34x_Dir_Commands.c for prototypes of functions with file s
             -cope
  40      =1  
  41      =1  
  42      =1  void Remove_Direcory(char* dir_name);
  43      =1  void Make_Directory(char* dir_name);
  44      =1  int Change_Directory(char* dir_name);
  45      =1  
  46      =1  //----------------------------------------------------------------
             --------------
  47      =1  // Header File Preprocessor Directive
  48      =1  //----------------------------------------------------------------
             --------------
  49      =1  
  50      =1  #endif                                 // #define __DIRECTORIES_CO
             -MMANDS_H__
  51      =1  
  52      =1  //----------------------------------------------------------------
             --------------
  53      =1  // End Of File
  54      =1  //----------------------------------------------------------------
             --------------
  51          #include "F34x_MSD_Format_Disk.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Format_Disk.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 52  

   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_Format_Di
             -sk.c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000038
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef __FORMAT_DISK_H__
  32      =1  #define __FORMAT_DISK_H__
  33      =1  
  34      =1  
  35      =1  //----------------------------------------------------------------
             --------------
  36      =1  // Includes
  37      =1  //----------------------------------------------------------------
             --------------
  38      =1  
  39      =1  #include "F34x_MSD_USB_Main.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_USB_Main.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Main header file for USB firmware. Includes function prototypes
             -,
  10      =2  // standard constants, and configuration constants.//
  11      =2  //
  12      =2  // FID:            34X000063
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -No changes; incremented revision number to match project re
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 53  

             -vision
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  // 11/22/02 - DM: 1. Updated function prototypes and added constan
             -ts
  27      =2  //                to F34x_USB_Main.h with sample interrupt firmwar
             -e.
  28      =2  
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  // Header File Preprocessor Directive
  31      =2  //----------------------------------------------------------------
             --------------
  32      =2  
  33      =2  #ifndef _USB_MAIN_H_
           =2 #define _USB_MAIN_H_
           =2 
           =2 #include "F34x_MSD_Definitions.h"
           =2 //#define _USB_LOW_SPEED_                      // Change this comm
             -ent to make Full/Low speed
           =2 
           =2 #define SYSCLK                   12000000    // SYSCLK frequency i
             -n Hz
           =2 
           =2 // USB clock selections (SFR CLKSEL)
           =2 #define USB_4X_CLOCK             0x00        // Select 4x clock mu
             -ltiplier, for USB Full Speed
           =2 #define USB_INT_OSC_DIV_2        0x10        // See Data Sheet sec
             -tion 13. Oscillators
           =2 #define USB_EXT_OSC              0x20
           =2 #define USB_EXT_OSC_DIV_2        0x30
           =2 #define USB_EXT_OSC_DIV_3        0x40
           =2 #define USB_EXT_OSC_DIV_4        0x50
           =2 
           =2 // System clock selections (SFR CLKSEL)
           =2 #define SYS_INT_OSC              0x00        // Select to use inte
             -rnal oscillator
           =2 #define SYS_4X_MUL               0x03        // Select to use inte
             -rnal oscillator
           =2 #define SYS_EXT_OSC              0x01        // Select to use an e
             -xternal oscillator
           =2 #define SYS_4X_DIV_2             0x02
           =2 
           =2 // BYTE type definition
           =2 #ifndef _BYTE_DEF_
           =2 #define _BYTE_DEF_
           =2 typedef unsigned char BYTE;
           =2 #endif   /* _BYTE_DEF_ */
           =2 
           =2 // WORD type definition, for KEIL Compiler
           =2 #ifndef _WORD_DEF_                           // Compiler Specific,
             - written for Little Endian
           =2 #define _WORD_DEF_
           =2 typedef union {unsigned int i; unsigned char c[2];} WORD;
           =2 #define LSB 1                                // All words sent to 
             -and received from the host are
           =2 #define MSB 0                                // little endian, thi
             -s is switched by software when
           =2                                              // neccessary.  These
             - sections of code have been marked
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 54  

           =2                                                                                          // with "Compiler Specific" as above for easier modifi
             -cation
           =2 #endif   /* _WORD_DEF_ */
           =2 
           =2 // DWORD type definition
           =2 #ifndef _DWORD_DEF_
           =2 #define _DWORD_DEF_
           =2 typedef unsigned long DWORD;
           =2 #endif /* _DWORD_DEF_ */
           =2 
           =2 extern volatile DWORD xdata tickcount;
           =2 
           =2 // Define Endpoint Packet Sizes
           =2 #ifdef _USB_LOW_SPEED_
           =2 #define  EP0_PACKET_SIZE         0x40        // This value can be 
             -8,16,32,64 depending on device speed, see USB spec
           =2 #else
           =2 #define  EP0_PACKET_SIZE         0x40
           =2 #endif /* _USB_LOW_SPEED_ */ 
           =2 
           =2 #define  EP1_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type  
           =2 #define  EP1_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP1_PACKET_SIZE
           =2 #define  EP2_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type
           =2 #define  EP2_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP2_PACKET_SIZE
           =2 
           =2 // Standard Descriptor Types
           =2 #define  DSC_DEVICE              0x01        // Device Descriptor
           =2 #define  DSC_CONFIG              0x02        // Configuration Desc
             -riptor
           =2 #define  DSC_STRING              0x03        // String Descriptor
           =2 #define  DSC_INTERFACE           0x04        // Interface Descript
             -or
           =2 #define  DSC_ENDPOINT            0x05        // Endpoint Descripto
             -r
           =2 
           =2 // HID Descriptor Types
           =2 #define DSC_HID                                 0x21            // HID Class Descriptor
           =2 #define DSC_HID_REPORT                  0x22            // HID Report Descriptor
           =2 
           =2 // Standard Request Codes
           =2 #define  GET_STATUS             0x00        // Code for Get Status
           =2 #define  CLEAR_FEATURE          0x01        // Code for Clear Feat
             -ure
           =2 #define  SET_FEATURE            0x03        // Code for Set Featur
             -e
           =2 #define  SET_ADDRESS            0x05        // Code for Set Addres
             -s
           =2 #define  GET_DESCRIPTOR         0x06        // Code for Get Descri
             -ptor
           =2 #define  SET_DESCRIPTOR         0x07        // Code for Set Descri
             -ptor(not used)
           =2 #define  GET_CONFIGURATION      0x08        // Code for Get Config
             -uration
           =2 #define  SET_CONFIGURATION      0x09        // Code for Set Config
             -uration
           =2 #define  GET_INTERFACE          0x0A        // Code for Get Interf
             -ace
           =2 #define  SET_INTERFACE          0x0B        // Code for Set Interf
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 55  

             -ace
           =2 #define  SYNCH_FRAME            0x0C        // Code for Synch Fram
             -e(not used)
           =2 #define  MSD_RESET                              0xFF            // Mass-storage device Reset
           =2 #define  MSD_GET_MAX_LUN                0xFE            // Mass-storage device Get Max LU
             -N
           =2 
           =2 // HID Request Codes
           =2 #define GET_REPORT                              0x01            // Code for Get Report
           =2 #define GET_IDLE                                0x02            // Code for Get Idle
           =2 #define GET_PROTOCOL                    0x03            // Code for Get Protocol
           =2 #define SET_REPORT                              0x09            // Code for Set Report
           =2 #define SET_IDLE                                0x0A            // Code for Set Idle
           =2 #define SET_PROTOCOL                    0x0B            // Code for Set Protocol
           =2 
           =2 // Define device states
           =2 #define  DEV_ATTACHED            0x00        // Device is in Attac
             -hed State
           =2 #define  DEV_POWERED             0x01        // Device is in Power
             -ed State
           =2 #define  DEV_DEFAULT             0x02        // Device is in Defau
             -lt State
           =2 #define  DEV_ADDRESS             0x03        // Device is in Addre
             -ssed State
           =2 #define  DEV_CONFIGURED          0x04        // Device is in Confi
             -gured State
           =2 #define  DEV_SUSPENDED           0x05        // Device is in Suspe
             -nded State
           =2 
           =2 // Define bmRequestType bitmaps
           =2 #define  IN_DEVICE               0x00        // Request made to de
             -vice, direction is IN 
           =2 #define  OUT_DEVICE              0x80        // Request made to de
             -vice, direction is OUT
           =2 #define  IN_INTERFACE            0x01        // Request made to in
             -terface, direction is IN
           =2 #define  OUT_INTERFACE           0x81        // Request made to in
             -terface, direction is OUT
           =2 #define  IN_ENDPOINT             0x02        // Request made to en
             -dpoint, direction is IN
           =2 #define  OUT_ENDPOINT            0x82        // Request made to en
             -dpoint, direction is OUT
           =2 
           =2 // Define wIndex bitmaps
           =2 #define  IN_EP1                  0x81        // Index values used 
             -by Set and Clear feature
           =2 #define  OUT_EP1                 0x01        // commands for Endpo
             -int_Halt
           =2 #define  IN_EP2                  0x82
           =2 #ifdef __F326_VER__
           =2 #define  OUT_EP2                                 0x01           
           =2 #else
           =2 #define  OUT_EP2                                 0x01           
           =2 #endif
           =2 
           =2 // Define wValue bitmaps for Standard Feature Selectors
           =2 #define  DEVICE_REMOTE_WAKEUP    0x01        // Remote wakeup feat
             -ure(not used)
           =2 #define  ENDPOINT_HALT           0x00        // Endpoint_Halt feat
             -ure selector
           =2 
           =2 // Define Endpoint States
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 56  

           =2 #define  EP_IDLE                 0x00        // This signifies End
             -point Idle State
           =2 #define  EP_TX                   0x01        // Endpoint Transmit 
             -State
           =2 #define  EP_RX                   0x02        // Endpoint Receive S
             -tate
           =2 #define  EP_HALT                 0x03        // Endpoint Halt Stat
             -e (return stalls)
           =2 #define  EP_STALL                0x04        // Endpoint Stall (se
             -nd procedural stall next status phase)
           =2 #define  EP_ADDRESS              0x05        // Endpoint Address (
             -change FADDR during next status phase)
           =2 
           =2 // Function prototypes
           =2 // USB Routines
           =2 void USB_Resume(void);                       // This routine resum
             -es USB operation
           =2 void USB_Reset(void);                        // Called after USB b
             -us reset
           =2 void Handle_Setup(void);                     // Handle setup packe
             -t on Endpoint 0
           =2 void Handle_In1(BYTE* ptr_buf);                       // Handle in
             - packet on Endpoint 1
           =2 void Handle_Out2(void);                      // Handle out packet 
             -on Endpoint 2
           =2 void USB_Suspend(void);                      // This routine calle
             -d when suspend signalling on bus
           =2 void Out2_Get_Data(BYTE* ptr_buf);                               // Copies from FIFO to ptr_
             -buf, clears FIFO-full flag.
           =2 void Out2_Done(void);                                            // Call this when finished with the d
             -ata
           =2 
           =2 // Standard Requests
           =2 void Get_Status(void);                       // These are called f
             -or each specific standard request
           =2 void Clear_Feature(void);
           =2 void Set_Feature(void);
           =2 void Set_Address(void);
           =2 void Get_Descriptor(void);
           =2 void Get_Configuration(void);
           =2 void Set_Configuration(void);
           =2 void Get_Interface(void);
           =2 void Set_Interface(void);
           =2 
           =2 // MSD Specific Requests
           =2 // void Reset_Msd(void);
           =2 // void Get_MaxLUN(void);
           =2 
           =2 // Initialization Routines
           =2 void Sys_Clk_Init(void);                      // Initialize the sy
             -stem clock(depends on Full/Low speed)
           =2 void Port_Init(void);                        // Configure ports fo
             -r this specific application
           =2 void USB0_Init(void);                        // Configure USB core
             - for either Full/Low speed
           =2 void Timer_Init(void);                       // Start timer 2 for 
             -use by ADC and to check switches
           =2 void Adc_Init(void);                         // Configure ADC for 
             -continuous conversion, low-power mode
           =2 
           =2 // Other Routines
           =2 void Timer2_ISR(void);                       // Called when Timer 
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 57  

             -2 overflows, see if switches are pressed
           =2 void Adc_ConvComple_ISR(void);               // When a conversion 
             -completes, switch ADC multiplexor
           =2 void USB_ISR(void);                          // Called to determin
             -e type of USB interrupt
           =2 void Fifo_ReadC(BYTE, unsigned int, BYTE *) ;
           =2 extern void Fifo_Read (BYTE, unsigned int, BYTE *) ; // Used for m
             -ultiple byte reads of Endpoint fifos
           =2 extern void Fifo_Write (BYTE, unsigned int, BYTE *) reentrant;// U
             -sed for multiple byte writes of Endpoint fifos
           =2 void Force_Stall(void);                      // Forces a procedura
             -l stall on Endpoint 0
           =2 void Delay(void);                            // Approximately 80 u
             -s/1 ms on Full/Low Speed
           =2 
           =2 void USB_In(BYTE* ptr_buf,unsigned count);
           =2 
           =2 void USB_Bulk_Init(void);
           =2 
           =2 extern unsigned xdata Out_Count;
           =2 extern BYTE xdata Out_Packet[EP2_PACKET_SIZE];
           =2 extern BYTE xdata In_count;
           =2 extern BYTE xdata In_Packet[EP1_PACKET_SIZE];
           =2 //extern BYTE xdata In_Overrun;
           =2 
           =2 #endif      /* _USB_MAIN_H_ */
 217      =2  
  40      =1  
  41      =1  //----------------------------------------------------------------
             --------------
  42      =1  // Function Prototypes
  43      =1  //----------------------------------------------------------------
             --------------
  44      =1  
  45      =1  // See F34x_Format_Disk.c for prototypes of functions with file sc
             -ope
  46      =1  
  47      =1  void Format_Disk(); // #define __FORMAT_DISK_H__
  48      =1  
  49      =1  //----------------------------------------------------------------
             --------------
  50      =1  // End Of File
  51      =1  //----------------------------------------------------------------
             --------------
  52      =1  
  53      =1  #endif
  52          
  53          #define MAX_LEN 32
  54          static char xdata Cmd[MAX_LEN];
  55          static char* xdata Token;
  56          static BYTE xdata Cmd_Ptr;
  57          
  58          unsigned char format_flag = 0;
  59          bootrecord_large* xdata bootrecord=Scratch;
  60          long xdata n_of_sect = 0;
  61          
  62          #ifdef __F340_VER__
  63          extern void Get_Status_MMC();
  64          extern bdata bit Is_Initialized;
  65          #endif
  66          
  67          //----------------------------------------------------------------
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 58  

             -------------
  68          // Cmd_Init
  69          //----------------------------------------------------------------
             -------------
  70          //
  71          // Initialization of communication via UART interface. This functi
             -on ends on 
  72          // prompt sign. 
  73          //
  74          // Parameters   :
  75          // Return Value :
  76          //----------------------------------------------------------------
             -------------
  77          
  78          void Cmd_Init() 
  79          {
  80   1        putchar(CLS);
  81   1        Cmd_Ptr=0;
  82   1        Cmd[0]=Cmd[1]='\0';
  83   1        Token=0;
  84   1        Sect_Print();
  85   1        printf("MMC Shell version 1.0" ENDLINE);
  86   1        write_current_dir();
  87   1        putchar(PROMPT);
  88   1      }
  89          
  90          //----------------------------------------------------------------
             -------------
  91          // Cmd_Match
  92          //----------------------------------------------------------------
             -------------
  93          //
  94          // This function checks the syntax of command and converts all let
             -ers to 
  95          // lowercase if it's uppercase.  
  96          //
  97          // Parameters   : str - command string
  98          // Return Value : TRUE if command string and received string are s
             -imilar 
  99          //----------------------------------------------------------------
             -------------
 100          
 101          BYTE Cmd_Match(char* str) 
 102          {
 103   1        xdata char* xdata s=Token;
 104   1        for(;*s;s++) *s=tolower(*s);
 105   1        return !strncmp(Token,str,MAX_LEN);
 106   1      }
 107          
 108          //----------------------------------------------------------------
             -------------
 109          // Cmd_Dir
 110          //----------------------------------------------------------------
             -------------
 111          //
 112          // Function sends list of all directories and files in actual dire
             -ctory.
 113          //
 114          // Parameters   :
 115          // Return Value :
 116          //----------------------------------------------------------------
             -------------
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 59  

 117          
 118          void Cmd_Dir(void) 
 119          {
 120   1        xdata BYTE i;
 121   1        find_info xdata findinfo;
 122   1        if(!findfirst(&findinfo,0)) {
 123   2          printf("."ENDLINE); 
 124   2          return;
 125   2        }
 126   1        do {
 127   2          for(i=0;i<8;i++) { 
 128   3            putchar(tolower(findinfo.direntry->sfn.name[i]));
 129   3          }
 130   2          if(findinfo.direntry->sfn.name[i]>' ') 
 131   2            putchar('.');
 132   2          for(i=8;i<11;i++) { 
 133   3            putchar(tolower(findinfo.direntry->sfn.name[i])); 
 134   3          }
 135   2      
 136   2          if(!(findinfo.direntry->sfn.attrib & (ATTRIB_LABEL|ATTRIB_SUBD
             -IR))) {
 137   3            printf("\t%lu bytes",ntohl(findinfo.direntry->sfn.filesize))
             -;
 138   3          }
 139   2      
 140   2          if(findinfo.direntry->sfn.attrib & ATTRIB_LABEL) 
 141   2            printf("\t<LABEL>");
 142   2          if(findinfo.direntry->sfn.attrib & ATTRIB_SUBDIR) 
 143   2            printf("\t<DIR>");
 144   2              printf(ENDLINE);
 145   2      
 146   2        } while(findnext(&findinfo));
 147   1      }
 148          
 149          //----------------------------------------------------------------
             -------------
 150          // Cmd_Type
 151          //----------------------------------------------------------------
             -------------
 152          //
 153          // This function sends via UART the content of file which is defie
             -ned with 
 154          // "type" command.
 155          //
 156          // Parameters   : filename - pointer to file name
 157          // Return Value :
 158          //----------------------------------------------------------------
             -------------
 159          
 160          void Cmd_Type(char* filename) 
 161          {
 162   1        FILE xdata f;unsigned xdata bytesread,i;
 163   1      
 164   1        if(!fopen(&f,filename,"r")) { 
 165   2          printf("File not found"ENDLINE);
 166   2          return; 
 167   2        }  
 168   1      
 169   1        while(bytesread=fread(&f,Scratch,Sect_Block_Size())) {
 170   2          if(key_available()) { 
 171   3            break; 
 172   3          }
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 60  

 173   2          for(i=0;i<bytesread;i++) {
 174   3            putchar(Scratch[i]);
 175   3          }
 176   2        }
 177   1      
 178   1        fclose(&f);
 179   1      
 180   1      
 181   1        printf(ENDLINE);
 182   1      }
 183          
 184          //----------------------------------------------------------------
             -------------
 185          // Cmd_Help
 186          //----------------------------------------------------------------
             -------------
 187          //
 188          // Function sends via UART the list of known commands. This list c
             -ontains all
 189          // commands allowed for normal user. List is printing when system 
             -doesn't 
 190          // recognize the last sent command.
 191          //
 192          // Parameters   :
 193          // Return Value :
 194          //----------------------------------------------------------------
             -------------
 195          
 196          void Cmd_Help(void) 
 197          {
 198   1        printf("calibrate VALUE"ENDLINE"cd"ENDLINE"chkdsk"ENDLINE"cls"EN
             -DLINE"del FILE"ENDLINE"dir"
 199   1                      ENDLINE"format"ENDLINE"log FILE"ENDLINE"md"ENDLINE"rd"
 200   1                      ENDLINE"s NNNNN"ENDLINE"templog FILE"ENDLINE"type FILE"ENDLINE
             -);
 201   1      }
 202          
 203          //----------------------------------------------------------------
             -------------
 204          // Cmd_Exec
 205          //----------------------------------------------------------------
             -------------
 206          //
 207          // This function is used to executing commands. It recognizes the 
             -command and 
 208          // prepares reaction, answer. 
 209          //
 210          // Parameters   :
 211          // Return Value :
 212          //----------------------------------------------------------------
             -------------
 213          
 214          void Cmd_Exec() 
 215          {
 216   1        int xdata i;BYTE xdata j;char xdata ch;DWORD xdata dw;
 217   1      
 218   1        Token = Str_Token(Cmd);
 219   1      
 220   1        if(!Token) 
 221   1          return;
 222   1      
 223   1        printf(ENDLINE);
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 61  

 224   1      
 225   1        
 226   1        if(n_of_sect == 0)
 227   1              n_of_sect = ntohl(bootrecord->total_sectors);
 228   1      
 229   1        if(format_flag == 1)
 230   1        {
 231   2              if(Cmd_Match("y"))
 232   2              {
 233   3                      format_flag = 0;
 234   3                      Format_Disk();
 235   3                      return;
 236   3              }
 237   2              if(Cmd_Match("n"))
 238   2                      format_flag = 0;
 239   2              else
 240   2                      printf("Are you sure (y/n)?"ENDLINE);   
 241   2              return;
 242   2        }
 243   1        if(Cmd_Match("cls")) {
 244   2          putchar(CLS);
 245   2          return;
 246   2        } 
 247   1      
 248   1        if(Cmd_Match("del")) {
 249   2          Token = Str_Token(0);
 250   2          if(Token) {
 251   3            if(!fdelete(Token))
 252   3              printf("File not found"ENDLINE);
 253   3          } else {
 254   3            Cmd_Help();
 255   3          }
 256   2          return;
 257   2        }
 258   1      
 259   1        if(Cmd_Match("dir")) {
 260   2          Cmd_Dir();
 261   2          return;
 262   2        }
 263   1      
 264   1        if(Cmd_Match("s")) {
 265   2          Token=Str_Token(0);
 266   2      
 267   2          if((*Token > 0x29) && (*Token < 0x40))
 268   2          {
 269   3                      dw=atol(Token);
 270   3                      printf("Sector 0x%08lX:"ENDLINE,dw);
 271   3                  Sect_Read(dw);
 272   3                  for(i=0;i<Sect_Block_Size()/16;i++) {
 273   4                    printf("%04X: ",i*16);
 274   4                    for(j=0;j<16;j++) {
 275   5                      ch=Scratch[i*16+j];
 276   5                      printf("%02X ",0x00FF&(int)ch); 
 277   5                    }
 278   4                    for(j=0;j<16;j++) { 
 279   5                      ch=Scratch[i*16+j];
 280   5                      putchar((ch>' ' && ch<0x7F)?ch:'.'); 
 281   5                    }
 282   4                        printf(ENDLINE);
 283   4                  }
 284   3                      printf(ENDLINE);
 285   3              }
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 62  

 286   2              else
 287   2                      printf("Sectors' range 0x00000 - 0x%lX\r\n",n_of_sect);         
 288   2      
 289   2              return;
 290   2        }
 291   1      
 292   1        if(Cmd_Match("log")) {
 293   2          Token=Str_Token(0);
 294   2          Log(Token);
 295   2          return;
 296   2        }
 297   1      
 298   1        if(Cmd_Match("type")) {
 299   2          Token = Str_Token(0);
 300   2          if(Token) {
 301   3            Cmd_Type(Token);
 302   3          } else {
 303   3            Cmd_Help();
 304   3          }
 305   2          return;
 306   2        }
 307   1      
 308   1        if(Cmd_Match("chkdsk")) {
 309   2          Sect_Print();
 310   2          return;
 311   2        }
 312   1      
 313   1      #ifdef __F340_VER__
 314   1        if(Cmd_Match("calibrate")) {
 315   2          Token=Str_Token(0);
 316   2          if((*Token > 0x29) && (*Token < 0x40))
 317   2              {
 318   3                      dw=atol(Token);
 319   3                      Calibrate((int)dw);
 320   3                      printf("Calibrated to %d deg C\r\n", (int) dw);
 321   3              }
 322   2              else
 323   2                      printf("Missing parameter\r\n");
 324   2      
 325   2          return;
 326   2        }
 327   1        if(Cmd_Match("cd")) {
 328   2            Token=Str_Token(0);
 329   2                Change_Directory(Token);
 330   2                return;
 331   2        }
 332   1        if(Cmd_Match("md")) {
 333   2          Token=Str_Token(0);
 334   2              Make_Directory(Token);
 335   2              return;
 336   2        }
 337   1        if(Cmd_Match("templog")) {
 338   2          Token=Str_Token(0);
 339   2          Temp_Log(Token);
 340   2          return;
 341   2        }
 342   1        if(Cmd_Match("format")) {
 343   2              printf("Are you sure (y/n)?"ENDLINE);
 344   2              format_flag = 1;
 345   2              //Format_Disk();
 346   2              return;
 347   2        }
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 63  

 348   1        if(Cmd_Match("rd"))
 349   1        {
 350   2              Token=Str_Token(0);
 351   2              Remove_Direcory(Token);
 352   2              return;
 353   2        }
 354   1        if(Cmd_Match("mmc"))
 355   1        {
 356   2          Token=Str_Token(0);
 357   2          Get_Status_MMC();
 358   2          return;
 359   2        }
 360   1        if(Cmd_Match("time_out"))
 361   1        {
 362   2          Is_Initialized = 1;
 363   2          return;
 364   2        }
 365   1        if(Cmd_Match("loop"))
 366   1        {
 367   2          for(i=0;i<1000;i++)
 368   2            Sect_Read(i);
 369   2          return;
 370   2        }
 371   1        if(Cmd_Match("write_test"))
 372   1        {
 373   2          for(i=0;i<512;i++)
 374   2            Scratch[i] = (BYTE)0xBB;
 375   2          for(i=0;i<100;i++) {
 376   3            Sect_Write(1000+i);
 377   3          }
 378   2          for(i=0;i<100;i++) {
 379   3            Sect_Read(1000+i);
 380   3            for(dw=0;dw<512;dw++) {
 381   4              if(Scratch[dw] != (BYTE)0xBB) {
 382   5                printf("error sector %d\r\n",1000 + i);
 383   5                return;
 384   5              }
 385   4            }
 386   3          }
 387   2          return;
 388   2        }
 389   1       /* if(Cmd_Match("y"))
 390   1        {
 391   1              if(format_flag == 1)
 392   1              {
 393   1                      Format_Disk();          
 394   1                      format_flag = 0;
 395   1                      return;
 396   1              }
 397   1        }
 398   1        if(Cmd_Match("n"))
 399   1        {
 400   1              if(format_flag == 1)
 401   1              {
 402   1                      format_flag = 0;
 403   1                      return;
 404   1              }
 405   1        }*/
 406   1      
 407   1      #endif
 408   1      /*
 409   1      /* If MMC is so fubar that Windows cannot even recognize it for fo
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 64  

             -rmatting,
 410   1      /* then activate & execute this 'fdisk' command.
 411   1      /*
 412   1              if(Cmd_Match("fdisk")) {
 413   1                      Sect_Read(0);
 414   1                      Scratch[ 0]=0xEB;Scratch[ 1]=0x3C;Scratch[ 2]=0x90;Scratch[ 3]='
             -M';
 415   1                      Scratch[ 4]= 'S';Scratch[ 5]= 'D';Scratch[ 6]= 'O';Scratch[ 7]='
             -S';
 416   1                      Scratch[ 8]= '5';Scratch[ 9]= '.';Scratch[10]= '0';Scratch[11]=0
             -x00;
 417   1                      Scratch[12]=0x02;Scratch[13]=0x01;Scratch[14]=0x01;Scratch[15]=0
             -x00;
 418   1      
 419   1                      Scratch[16]=0x02;Scratch[17]=0x00;Scratch[18]=0x02;Scratch[19]=0
             -x60;
 420   1                      Scratch[20]=0xF4;Scratch[21]=0xF8;Scratch[22]=0xF3;Scratch[23]=0
             -x00;
 421   1                      Scratch[24]=0x3F;Scratch[25]=0x00;Scratch[26]=0xFF;Scratch[27]=0
             -x00;
 422   1                      Scratch[28]=0x20;Scratch[29]=0x00;Scratch[30]=0x00;Scratch[31]=0
             -x00;
 423   1      
 424   1                      Scratch[32]=0x00;Scratch[33]=0x00;Scratch[34]=0x00;Scratch[35]=0
             -x00;
 425   1                      Scratch[36]=0x00;Scratch[37]=0x00;Scratch[38]=0x29;Scratch[39]=0
             -x42;
 426   1                      Scratch[40]=0xE9;Scratch[41]=0x1D;Scratch[42]=0xC8;
 427   1      
 428   1                                                Scratch[54]=0x46;Scratch
             -[55]=0x41;
 429   1                      Scratch[56]=0x54;Scratch[57]=0x31;Scratch[58]=0x36;Scratch[59]=0
             -x20;
 430   1                      Scratch[60]=0x20;Scratch[61]=0x20;
 431   1      
 432   1                      Scratch[510]=0x55;Scratch[511]=0xAA;
 433   1      
 434   1                      Sect_Write(0);
 435   1                      return;
 436   1              }
 437   1      */
 438   1      
 439   1        if(Cmd_Ptr)   { 
 440   2          printf("Bad command or file name."ENDLINE);
 441   2          Cmd_Help();
 442   2        }
 443   1      }
 444          
 445          //----------------------------------------------------------------
             -------------
 446          // Cmd_Step
 447          //----------------------------------------------------------------
             -------------
 448          //
 449          // This is a crank function. In every cycle it checks the interrup
             -t receive
 450          // flag and starts first action on event. 
 451          //
 452          // Parameters   :
 453          // Return Value :
 454          //----------------------------------------------------------------
             -------------
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 65  

 455          
 456          void Cmd_Step() 
 457          {
 458   1        xdata char ch;
 459   1      
 460   1        if(!key_available()) 
 461   1          return;
 462   1      
 463   1        ch=getchar();
 464   1      
 465   1        if(ch==BACKSPACE) {
 466   2          if(Cmd_Ptr) { 
 467   3            Cmd_Ptr--;
 468   3            putchar(SPACE);putchar(BACKSPACE);
 469   3          }
 470   2          return;
 471   2        }
 472   1      
 473   1        if(ch==CRLF) { // Execute command
 474   2          Cmd[Cmd_Ptr]='\0';
 475   2          Cmd_Exec();
 476   2          memset(Cmd,'\0',MAX_LEN);
 477   2              write_current_dir();
 478   2          putchar(PROMPT);
 479   2          Cmd_Ptr=0;
 480   2          return;
 481   2        }
 482   1              
 483   1        if(Cmd_Ptr<MAX_LEN-1) {
 484   2          Cmd[Cmd_Ptr++]=ch;
 485   2        }
 486   1      }
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 66  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0070 (BEGIN)
0000         L?0113:
0000 900000      R     MOV     DPTR,#i+01H
0003 E0                MOVX    A,@DPTR
0004 C4                SWAP    A
0005 F8                MOV     R0,A
0006 540F              ANL     A,#0FH
0008 C8                XCH     A,R0
0009 68                XRL     A,R0
000A FF                MOV     R7,A
000B 900000      R     MOV     DPTR,#i
000E E0                MOVX    A,@DPTR
000F C4                SWAP    A
0010 54F0              ANL     A,#0F0H
0012 48                ORL     A,R0
0013 FE                MOV     R6,A
0014 7C00              MOV     R4,#00H
0016 EF                MOV     A,R7
0017 2D                ADD     A,R5
0018 FF                MOV     R7,A
0019 EC                MOV     A,R4
001A 3E                ADDC    A,R6
001B FE                MOV     R6,A
001C         L?0114:
001C 7400        E     MOV     A,#LOW Scratch
001E 2F                ADD     A,R7
001F F582              MOV     DPL,A
0021 7400        E     MOV     A,#HIGH Scratch
0023 3E                ADDC    A,R6
0024 F583              MOV     DPH,A
0026 22                RET     
0027         L?0118:
0027         L?0119:
0027 900000      R     MOV     DPTR,#i
002A         L?0120:
002A E4                CLR     A
002B 75F001            MOV     B,#01H
002E 020000      E     LJMP    ?C?IILDX
0031         L?0123:
0031         L?0124:
0031 900000      R     MOV     DPTR,#i
0034 E0                MOVX    A,@DPTR
0035 FE                MOV     R6,A
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 C3                CLR     C
003A 22                RET     
003B         L?0127:
003B         L?0128:
003B 900000      R     MOV     DPTR,#findinfo+07H
003E 120000      E     LCALL   ?C?PLDXDATA
0041 90000B            MOV     DPTR,#0BH
0044 020000      E     LJMP    ?C?CLDOPTR
0047         L?0131:
0047 7BFF              MOV     R3,#0FFH
0049         L?0132:
0049 900000      R     MOV     DPTR,#dw
004C 020000      E     LJMP    ?C?LLDXDATA
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 67  

004F         L?0133:
004F         L?0134:
004F E4                CLR     A
0050 900000      R     MOV     DPTR,#i
0053 F0                MOVX    @DPTR,A
0054 A3                INC     DPTR
0055 F0                MOVX    @DPTR,A
0056 22                RET     
0057         L?0135:
0057         L?0136:
0057 900000      R     MOV     DPTR,#Token
005A 020000      E     LJMP    ?C?PLDXDATA
005D         L?0137:
005D         L?0138:
005D 7BFF              MOV     R3,#0FFH
005F 7A00        R     MOV     R2,#HIGH ?SC_55
0061 7900        R     MOV     R1,#LOW ?SC_55
0063 22                RET     
0064         L?0140:
0064 EF                MOV     A,R7
0065 24E8              ADD     A,#0E8H
0067 FF                MOV     R7,A
0068 EE                MOV     A,R6
0069 3403              ADDC    A,#03H
006B FE                MOV     R6,A
006C 33                RLC     A
006D 95E0              SUBB    A,ACC
006F FD                MOV     R5,A
0070 FC                MOV     R4,A
0071 22                RET     
0072         L?0142:
0072         L?0143:
0072 900000      E     MOV     DPTR,#?_printf?BYTE+03H
0075 020000      E     LJMP    ?C?LSTXDATA
             ; FUNCTION Com0070 (END)

             ; FUNCTION Cmd_Init (BEGIN)
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 80
0000 7F0C              MOV     R7,#0CH
0002 120000      E     LCALL   _putchar
                                           ; SOURCE LINE # 81
0005 E4                CLR     A
0006 900000      R     MOV     DPTR,#Cmd_Ptr
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 82
000A 900000      R     MOV     DPTR,#Cmd+01H
000D F0                MOVX    @DPTR,A
000E 900000      R     MOV     DPTR,#Cmd
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 83
0012 FB                MOV     R3,A
0013 FA                MOV     R2,A
0014 F9                MOV     R1,A
0015 900000      R     MOV     DPTR,#Token
0018 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 84
001B 120000      E     LCALL   Sect_Print
                                           ; SOURCE LINE # 85
001E 7BFF              MOV     R3,#0FFH
0020 7A00        R     MOV     R2,#HIGH ?SC_0
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 68  

0022 7900        R     MOV     R1,#LOW ?SC_0
0024 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 86
0027 120000      E     LCALL   write_current_dir
                                           ; SOURCE LINE # 87
002A 7F3E              MOV     R7,#03EH
002C 020000      E     LJMP    _putchar
             ; FUNCTION Cmd_Init (END)

             ; FUNCTION _Cmd_Match (BEGIN)
                                           ; SOURCE LINE # 101
0000 900000      R     MOV     DPTR,#str
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 103
0006 120000      R     LCALL   L?0135
0009 900000      R     MOV     DPTR,#s
000C 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 104
000F         ?C0002:
000F 900000      R     MOV     DPTR,#s
0012 120000      E     LCALL   ?C?PLDXDATA
0015 120000      E     LCALL   ?C?CLDPTR
0018 FF                MOV     R7,A
0019 6015              JZ      ?C0003
001B 120000      E     LCALL   _tolower
001E 900000      R     MOV     DPTR,#s
0021 120000      E     LCALL   ?C?PLDXDATA
0024 EF                MOV     A,R7
0025 120000      E     LCALL   ?C?CSTPTR
0028 900000      R     MOV     DPTR,#s+01H
002B 120000      R     LCALL   L?0120
002E 80DF              SJMP    ?C0002
0030         ?C0003:
                                           ; SOURCE LINE # 105
0030 900000      R     MOV     DPTR,#str
0033 120000      E     LCALL   ?C?PLDXDATA
0036 900000      E     MOV     DPTR,#?_strncmp?BYTE+03H
0039 120000      E     LCALL   ?C?PSTXDATA
003C 900000      E     MOV     DPTR,#?_strncmp?BYTE+06H
003F E4                CLR     A
0040 F0                MOVX    @DPTR,A
0041 A3                INC     DPTR
0042 7420              MOV     A,#020H
0044 F0                MOVX    @DPTR,A
0045 120000      R     LCALL   L?0135
0048 120000      E     LCALL   _strncmp
004B EF                MOV     A,R7
004C 7004              JNZ     ?C0005
004E 7F01              MOV     R7,#01H
0050 8002              SJMP    ?C0006
0052         ?C0005:
0052 7F00              MOV     R7,#00H
0054         ?C0006:
                                           ; SOURCE LINE # 106
0054         ?C0007:
0054 22                RET     
             ; FUNCTION _Cmd_Match (END)

             ; FUNCTION Cmd_Dir (BEGIN)
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 69  

                                           ; SOURCE LINE # 122
0000 7B01              MOV     R3,#01H
0002 7A00        R     MOV     R2,#HIGH findinfo
0004 7900        R     MOV     R1,#LOW findinfo
0006 E4                CLR     A
0007 FD                MOV     R5,A
0008 120000      E     LCALL   _findfirst
000B EF                MOV     A,R7
000C 7009              JNZ     ?C0012
                                           ; SOURCE LINE # 123
000E 7BFF              MOV     R3,#0FFH
0010 7A00        R     MOV     R2,#HIGH ?SC_24
0012 7900        R     MOV     R1,#LOW ?SC_24
0014 020000      E     LJMP    _printf
                                           ; SOURCE LINE # 125
0017         ?C0012:
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 127
0017 E4                CLR     A
0018 900000      R     MOV     DPTR,#i
001B F0                MOVX    @DPTR,A
001C         ?C0013:
001C 900000      R     MOV     DPTR,#i
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 C3                CLR     C
0022 9408              SUBB    A,#08H
0024 5005              JNC     ?C0014
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
0026 120000      R     LCALL   L?0125
0029 80F1              SJMP    ?C0013
002B         ?C0014:
                                           ; SOURCE LINE # 130
002B 900000      R     MOV     DPTR,#findinfo+07H
002E 120000      E     LCALL   ?C?PLDXDATA
0031 900000      R     MOV     DPTR,#i
0034 E0                MOVX    A,@DPTR
0035 F582              MOV     DPL,A
0037 758300            MOV     DPH,#00H
003A 120000      E     LCALL   ?C?CLDOPTR
003D D3                SETB    C
003E 6480              XRL     A,#080H
0040 94A0              SUBB    A,#0A0H
0042 4005              JC      ?C0016
                                           ; SOURCE LINE # 131
0044 7F2E              MOV     R7,#02EH
0046 120000      E     LCALL   _putchar
0049         ?C0016:
                                           ; SOURCE LINE # 132
0049 900000      R     MOV     DPTR,#i
004C 7408              MOV     A,#08H
004E F0                MOVX    @DPTR,A
004F         ?C0017:
004F 900000      R     MOV     DPTR,#i
0052 E0                MOVX    A,@DPTR
0053 FF                MOV     R7,A
0054 C3                CLR     C
0055 940B              SUBB    A,#0BH
0057 5005              JNC     ?C0018
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 70  

0059 120000      R     LCALL   L?0125
005C 80F1              SJMP    ?C0017
005E         ?C0018:
                                           ; SOURCE LINE # 136
005E 120000      R     LCALL   L?0127
0061 5418              ANL     A,#018H
0063 7015              JNZ     ?C0020
                                           ; SOURCE LINE # 137
0065 90001C            MOV     DPTR,#01CH
0068 120000      E     LCALL   ?C?LLDOPTR
006B 120000      E     LCALL   _htonl
006E 120000      R     LCALL   L?0142
0071 7BFF              MOV     R3,#0FFH
0073 7A00        R     MOV     R2,#HIGH ?SC_28
0075 7900        R     MOV     R1,#LOW ?SC_28
0077 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 138
007A         ?C0020:
                                           ; SOURCE LINE # 140
007A 120000      R     LCALL   L?0127
007D 30E309            JNB     ACC.3,?C0021
                                           ; SOURCE LINE # 141
0080 7BFF              MOV     R3,#0FFH
0082 7A00        R     MOV     R2,#HIGH ?SC_39
0084 7900        R     MOV     R1,#LOW ?SC_39
0086 120000      E     LCALL   _printf
0089         ?C0021:
                                           ; SOURCE LINE # 142
0089 120000      R     LCALL   L?0128
008C 30E409            JNB     ACC.4,?C0022
                                           ; SOURCE LINE # 143
008F 7BFF              MOV     R3,#0FFH
0091 7A00        R     MOV     R2,#HIGH ?SC_48
0093 7900        R     MOV     R1,#LOW ?SC_48
0095 120000      E     LCALL   _printf
0098         ?C0022:
                                           ; SOURCE LINE # 144
0098 120000      R     LCALL   L?0137
009B 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 146
009E 7B01              MOV     R3,#01H
00A0 7A00        R     MOV     R2,#HIGH findinfo
00A2 7900        R     MOV     R1,#LOW findinfo
00A4 120000      E     LCALL   _findnext
00A7 EF                MOV     A,R7
00A8 6003              JZ      $ + 5H
00AA 020000      R     LJMP    ?C0012
                                           ; SOURCE LINE # 147
00AD         ?C0009:
00AD 22                RET     
00AE         L?0125:
00AE 900000      R     MOV     DPTR,#findinfo+07H
00B1 120000      E     LCALL   ?C?PLDXDATA
00B4 8F82              MOV     DPL,R7
00B6 758300            MOV     DPH,#00H
00B9 120000      E     LCALL   ?C?CLDOPTR
00BC FF                MOV     R7,A
00BD 120000      E     LCALL   _tolower
00C0 120000      E     LCALL   _putchar
00C3 900000      R     MOV     DPTR,#i
00C6 E0                MOVX    A,@DPTR
00C7 04                INC     A
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 71  

00C8 F0                MOVX    @DPTR,A
00C9 22                RET     
             ; FUNCTION Cmd_Dir (END)

             ; FUNCTION _Cmd_Type (BEGIN)
                                           ; SOURCE LINE # 160
0000 900000      R     MOV     DPTR,#filename
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 164
0006 900000      R     MOV     DPTR,#filename
0009 120000      E     LCALL   ?C?PLDXDATA
000C 900000      E     MOV     DPTR,#?_fopen?BYTE+03H
000F 120000      E     LCALL   ?C?PSTXDATA
0012 7BFF              MOV     R3,#0FFH
0014 7A00        R     MOV     R2,#HIGH ?SC_58
0016 7900        R     MOV     R1,#LOW ?SC_58
0018 900000      E     MOV     DPTR,#?_fopen?BYTE+06H
001B 120000      E     LCALL   ?C?PSTXDATA
001E 7B01              MOV     R3,#01H
0020 7A00        R     MOV     R2,#HIGH f
0022 7900        R     MOV     R1,#LOW f
0024 120000      E     LCALL   _fopen
0027 EF                MOV     A,R7
0028 4E                ORL     A,R6
0029 7008              JNZ     ?C0025
                                           ; SOURCE LINE # 165
002B 7BFF              MOV     R3,#0FFH
002D 7A00        R     MOV     R2,#HIGH ?SC_60
002F 7900        R     MOV     R1,#LOW ?SC_60
0031 806B              SJMP    ?C0099
                                           ; SOURCE LINE # 167
0033         ?C0025:
                                           ; SOURCE LINE # 169
0033 7B01              MOV     R3,#01H
0035 7A00        E     MOV     R2,#HIGH Scratch
0037 7900        E     MOV     R1,#LOW Scratch
0039 900000      E     MOV     DPTR,#?_fread?BYTE+03H
003C 120000      E     LCALL   ?C?PSTXDATA
003F 900000      E     MOV     DPTR,#?_fread?BYTE+06H
0042 7402              MOV     A,#02H
0044 F0                MOVX    @DPTR,A
0045 A3                INC     DPTR
0046 E4                CLR     A
0047 F0                MOVX    @DPTR,A
0048 7A00        R     MOV     R2,#HIGH f
004A 7900        R     MOV     R1,#LOW f
004C 120000      E     LCALL   _fread
004F 900000      R     MOV     DPTR,#bytesread
0052 EE                MOV     A,R6
0053 F0                MOVX    @DPTR,A
0054 A3                INC     DPTR
0055 EF                MOV     A,R7
0056 F0                MOVX    @DPTR,A
0057 4E                ORL     A,R6
0058 6038              JZ      ?C0026
                                           ; SOURCE LINE # 170
005A 120000      E     LCALL   key_available
005D EF                MOV     A,R7
005E 7032              JNZ     ?C0026
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 72  

0060         ?C0027:
                                           ; SOURCE LINE # 173
0060 E4                CLR     A
0061 900000      R     MOV     DPTR,#i
0064 F0                MOVX    @DPTR,A
0065 A3                INC     DPTR
0066 F0                MOVX    @DPTR,A
0067         ?C0028:
0067 900000      R     MOV     DPTR,#bytesread
006A E0                MOVX    A,@DPTR
006B FE                MOV     R6,A
006C A3                INC     DPTR
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F A3                INC     DPTR
0070 E0                MOVX    A,@DPTR
0071 FC                MOV     R4,A
0072 A3                INC     DPTR
0073 E0                MOVX    A,@DPTR
0074 FD                MOV     R5,A
0075 C3                CLR     C
0076 9F                SUBB    A,R7
0077 EC                MOV     A,R4
0078 9E                SUBB    A,R6
0079 50B8              JNC     ?C0025
                                           ; SOURCE LINE # 174
007B 7400        E     MOV     A,#LOW Scratch
007D 2D                ADD     A,R5
007E F582              MOV     DPL,A
0080 7400        E     MOV     A,#HIGH Scratch
0082 3C                ADDC    A,R4
0083 F583              MOV     DPH,A
0085 E0                MOVX    A,@DPTR
0086 FF                MOV     R7,A
0087 120000      E     LCALL   _putchar
                                           ; SOURCE LINE # 175
008A 900000      R     MOV     DPTR,#i
008D 120000      R     LCALL   L?0120
0090 80D5              SJMP    ?C0028
                                           ; SOURCE LINE # 176
0092         ?C0026:
                                           ; SOURCE LINE # 178
0092 7B01              MOV     R3,#01H
0094 7A00        R     MOV     R2,#HIGH f
0096 7900        R     MOV     R1,#LOW f
0098 120000      E     LCALL   _fclose
                                           ; SOURCE LINE # 181
009B 120000      R     LCALL   L?0137
009E         ?C0099:
009E 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 182
00A1         ?C0024:
00A1 22                RET     
             ; FUNCTION _Cmd_Type (END)

             ; FUNCTION Cmd_Help (BEGIN)
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_77
0004 7900        R     MOV     R1,#LOW ?SC_77
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 73  

0006 020000      E     LJMP    _printf
             ; FUNCTION Cmd_Help (END)

             ; FUNCTION Cmd_Exec (BEGIN)
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 218
0000 7B01              MOV     R3,#01H
0002 7A00        R     MOV     R2,#HIGH Cmd
0004 7900        R     MOV     R1,#LOW Cmd
0006 120000      E     LCALL   _Str_Token
0009 900000      R     MOV     DPTR,#Token
000C 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 220
000F EA                MOV     A,R2
0010 49                ORL     A,R1
0011 4B                ORL     A,R3
0012 7003              JNZ     $ + 5H
0014 020000      R     LJMP    ?C0033
0017         ?C0032:
                                           ; SOURCE LINE # 223
0017 120000      R     LCALL   L?0138
001A 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 226
001D 900000      R     MOV     DPTR,#n_of_sect
0020 120000      E     LCALL   ?C?LLDXDATA
0023 EC                MOV     A,R4
0024 4D                ORL     A,R5
0025 4E                ORL     A,R6
0026 4F                ORL     A,R7
0027 7015              JNZ     ?C0034
                                           ; SOURCE LINE # 227
0029 900000      R     MOV     DPTR,#bootrecord
002C 120000      E     LCALL   ?C?PLDXDATA
002F 900020            MOV     DPTR,#020H
0032 120000      E     LCALL   ?C?LLDOPTR
0035 120000      E     LCALL   _htonl
0038 900000      R     MOV     DPTR,#n_of_sect
003B 120000      E     LCALL   ?C?LSTXDATA
003E         ?C0034:
                                           ; SOURCE LINE # 229
003E 900000      R     MOV     DPTR,#format_flag
0041 E0                MOVX    A,@DPTR
0042 6401              XRL     A,#01H
0044 7029              JNZ     ?C0035
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 231
0046 7A00        R     MOV     R2,#HIGH ?SC_187
0048 7900        R     MOV     R1,#LOW ?SC_187
004A 120000      R     LCALL   L?0111
004D 6008              JZ      ?C0036
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 233
004F E4                CLR     A
0050 900000      R     MOV     DPTR,#format_flag
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 234
0054 020000      E     LJMP    Format_Disk
                                           ; SOURCE LINE # 236
0057         ?C0036:
                                           ; SOURCE LINE # 237
0057 7A00        R     MOV     R2,#HIGH ?SC_189
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 74  

0059 7900        R     MOV     R1,#LOW ?SC_189
005B 120000      R     LCALL   L?0111
005E 6006              JZ      ?C0037
                                           ; SOURCE LINE # 238
0060 E4                CLR     A
0061 900000      R     MOV     DPTR,#format_flag
0064 F0                MOVX    @DPTR,A
0065 22                RET     
0066         ?C0037:
                                           ; SOURCE LINE # 240
0066 7BFF              MOV     R3,#0FFH
0068 7A00        R     MOV     R2,#HIGH ?SC_191
006A 7900        R     MOV     R1,#LOW ?SC_191
006C 020000      R     LJMP    ?C0107
                                           ; SOURCE LINE # 242
006F         ?C0035:
                                           ; SOURCE LINE # 243
006F 7A00        R     MOV     R2,#HIGH ?SC_213
0071 7900        R     MOV     R1,#LOW ?SC_213
0073 120000      R     LCALL   L?0115
0076 6005              JZ      ?C0039
                                           ; SOURCE LINE # 244
0078 7F0C              MOV     R7,#0CH
007A 020000      E     LJMP    _putchar
                                           ; SOURCE LINE # 246
007D         ?C0039:
                                           ; SOURCE LINE # 248
007D 7A00        R     MOV     R2,#HIGH ?SC_217
007F 7900        R     MOV     R1,#LOW ?SC_217
0081 120000      R     LCALL   L?0115
0084 6021              JZ      ?C0040
                                           ; SOURCE LINE # 249
0086 120000      R     LCALL   L?0108
                                           ; SOURCE LINE # 250
0089 EA                MOV     A,R2
008A 49                ORL     A,R1
008B 4B                ORL     A,R3
008C 6016              JZ      ?C0041
                                           ; SOURCE LINE # 251
008E 120000      R     LCALL   L?0136
0091 120000      E     LCALL   _fdelete
0094 EF                MOV     A,R7
0095 4E                ORL     A,R6
0096 6003              JZ      $ + 5H
0098 020000      R     LJMP    ?C0033
                                           ; SOURCE LINE # 252
009B 7BFF              MOV     R3,#0FFH
009D 7A00        R     MOV     R2,#HIGH ?SC_60
009F 7900        R     MOV     R1,#LOW ?SC_60
00A1         ?C0100:
                                           ; SOURCE LINE # 253
00A1 020000      R     LJMP    ?C0107
00A4         ?C0041:
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
00A4 020000      R     LJMP    ?C0105
                                           ; SOURCE LINE # 257
00A7         ?C0040:
                                           ; SOURCE LINE # 259
00A7 7A00        R     MOV     R2,#HIGH ?SC_221
00A9 7900        R     MOV     R1,#LOW ?SC_221
00AB 120000      R     LCALL   L?0116
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 75  

00AE 6003              JZ      ?C0044
                                           ; SOURCE LINE # 260
00B0 020000      R     LJMP    Cmd_Dir
                                           ; SOURCE LINE # 262
00B3         ?C0044:
                                           ; SOURCE LINE # 264
00B3 7A00        R     MOV     R2,#HIGH ?SC_225
00B5 7900        R     MOV     R1,#LOW ?SC_225
00B7 120000      R     LCALL   L?0116
00BA 7003              JNZ     $ + 5H
00BC 020000      R     LJMP    ?C0045
                                           ; SOURCE LINE # 265
00BF 120000      R     LCALL   L?0108
                                           ; SOURCE LINE # 267
00C2 120000      E     LCALL   ?C?CLDPTR
00C5 D3                SETB    C
00C6 6480              XRL     A,#080H
00C8 94A9              SUBB    A,#0A9H
00CA 5003              JNC     $ + 5H
00CC 020000      R     LJMP    ?C0046
00CF 120000      R     LCALL   L?0136
00D2 120000      E     LCALL   ?C?CLDPTR
00D5 C3                CLR     C
00D6 6480              XRL     A,#080H
00D8 94C0              SUBB    A,#0C0H
00DA 4003              JC      $ + 5H
00DC 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
00DF 120000      R     LCALL   L?0141
                                           ; SOURCE LINE # 270
00E2 7A00        R     MOV     R2,#HIGH ?SC_227
00E4 7900        R     MOV     R1,#LOW ?SC_227
00E6 120000      R     LCALL   L?0131
00E9 120000      R     LCALL   L?0142
00EC 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 271
00EF 120000      R     LCALL   L?0132
00F2 120000      E     LCALL   _Sect_Read
                                           ; SOURCE LINE # 272
00F5 120000      R     LCALL   L?0133
00F8         ?C0047:
00F8 120000      R     LCALL   L?0123
00FB 9420              SUBB    A,#020H
00FD EE                MOV     A,R6
00FE 6480              XRL     A,#080H
0100 9480              SUBB    A,#080H
0102 4003              JC      $ + 5H
0104 020000      R     LJMP    ?C0048
                                           ; SOURCE LINE # 273
0107 7BFF              MOV     R3,#0FFH
0109 7A00        R     MOV     R2,#HIGH ?SC_245
010B 7900        R     MOV     R1,#LOW ?SC_245
010D EF                MOV     A,R7
010E C4                SWAP    A
010F F8                MOV     R0,A
0110 540F              ANL     A,#0FH
0112 C8                XCH     A,R0
0113 68                XRL     A,R0
0114 FF                MOV     R7,A
0115 EE                MOV     A,R6
0116 C4                SWAP    A
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 76  

0117 54F0              ANL     A,#0F0H
0119 48                ORL     A,R0
011A 900000      E     MOV     DPTR,#?_printf?BYTE+03H
011D F0                MOVX    @DPTR,A
011E A3                INC     DPTR
011F EF                MOV     A,R7
0120 F0                MOVX    @DPTR,A
0121 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 274
0124 E4                CLR     A
0125 900000      R     MOV     DPTR,#j
0128 F0                MOVX    @DPTR,A
0129         ?C0050:
0129 900000      R     MOV     DPTR,#j
012C E0                MOVX    A,@DPTR
012D FD                MOV     R5,A
012E C3                CLR     C
012F 9410              SUBB    A,#010H
0131 5025              JNC     ?C0051
                                           ; SOURCE LINE # 275
0133 120000      R     LCALL   L?0113
0136 E0                MOVX    A,@DPTR
0137 FF                MOV     R7,A
0138 900000      R     MOV     DPTR,#ch
013B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 276
013C 7BFF              MOV     R3,#0FFH
013E 7A00        R     MOV     R2,#HIGH ?SC_252
0140 7900        R     MOV     R1,#LOW ?SC_252
0142 33                RLC     A
0143 95E0              SUBB    A,ACC
0145 900000      E     MOV     DPTR,#?_printf?BYTE+03H
0148 E4                CLR     A
0149 F0                MOVX    @DPTR,A
014A A3                INC     DPTR
014B EF                MOV     A,R7
014C F0                MOVX    @DPTR,A
014D 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 277
0150 900000      R     MOV     DPTR,#j
0153 E0                MOVX    A,@DPTR
0154 04                INC     A
0155 F0                MOVX    @DPTR,A
0156 80D1              SJMP    ?C0050
0158         ?C0051:
                                           ; SOURCE LINE # 278
0158 E4                CLR     A
0159 900000      R     MOV     DPTR,#j
015C F0                MOVX    @DPTR,A
015D         ?C0053:
015D 900000      R     MOV     DPTR,#j
0160 E0                MOVX    A,@DPTR
0161 FD                MOV     R5,A
0162 C3                CLR     C
0163 9410              SUBB    A,#010H
0165 5026              JNC     ?C0054
                                           ; SOURCE LINE # 279
0167 120000      R     LCALL   L?0113
016A E0                MOVX    A,@DPTR
016B 900000      R     MOV     DPTR,#ch
016E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 280
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 77  

016F D3                SETB    C
0170 6480              XRL     A,#080H
0172 94A0              SUBB    A,#0A0H
0174 400A              JC      ?C0056
0176 E0                MOVX    A,@DPTR
0177 FF                MOV     R7,A
0178 6480              XRL     A,#080H
017A 94FF              SUBB    A,#0FFH
017C 5002              JNC     ?C0056
017E 8002              SJMP    ?C0057
0180         ?C0056:
0180 7F2E              MOV     R7,#02EH
0182         ?C0057:
0182 120000      E     LCALL   _putchar
                                           ; SOURCE LINE # 281
0185 900000      R     MOV     DPTR,#j
0188 E0                MOVX    A,@DPTR
0189 04                INC     A
018A F0                MOVX    @DPTR,A
018B 80D0              SJMP    ?C0053
018D         ?C0054:
                                           ; SOURCE LINE # 282
018D 120000      R     LCALL   L?0138
0190 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 283
0193 120000      R     LCALL   L?0118
0196 020000      R     LJMP    ?C0047
0199         ?C0048:
                                           ; SOURCE LINE # 284
0199 120000      R     LCALL   L?0138
019C         ?C0101:
                                           ; SOURCE LINE # 285
019C 020000      R     LJMP    ?C0107
019F         ?C0046:
                                           ; SOURCE LINE # 287
019F 7BFF              MOV     R3,#0FFH
01A1 7A00        R     MOV     R2,#HIGH ?SC_258
01A3 7900        R     MOV     R1,#LOW ?SC_258
01A5 900000      R     MOV     DPTR,#n_of_sect
01A8 120000      E     LCALL   ?C?LLDXDATA
01AB 120000      R     LCALL   L?0143
01AE         ?C0103:
01AE 020000      R     LJMP    ?C0107
                                           ; SOURCE LINE # 290
01B1         ?C0045:
                                           ; SOURCE LINE # 292
01B1 7A00        R     MOV     R2,#HIGH ?SC_291
01B3 7900        R     MOV     R1,#LOW ?SC_291
01B5 120000      R     LCALL   L?0121
01B8 6006              JZ      ?C0059
                                           ; SOURCE LINE # 293
01BA 120000      R     LCALL   L?0109
                                           ; SOURCE LINE # 294
01BD 020000      E     LJMP    _Log
                                           ; SOURCE LINE # 296
01C0         ?C0059:
                                           ; SOURCE LINE # 298
01C0 7A00        R     MOV     R2,#HIGH ?SC_295
01C2 7900        R     MOV     R1,#LOW ?SC_295
01C4 120000      R     LCALL   L?0121
01C7 6011              JZ      ?C0060
                                           ; SOURCE LINE # 299
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 78  

01C9 120000      R     LCALL   L?0109
                                           ; SOURCE LINE # 300
01CC EA                MOV     A,R2
01CD 49                ORL     A,R1
01CE 4B                ORL     A,R3
01CF 6006              JZ      ?C0061
                                           ; SOURCE LINE # 301
01D1 120000      R     LCALL   L?0136
01D4 020000      R     LJMP    _Cmd_Type
                                           ; SOURCE LINE # 302
01D7         ?C0061:
                                           ; SOURCE LINE # 303
01D7         ?C0102:
                                           ; SOURCE LINE # 304
01D7 020000      R     LJMP    ?C0105
                                           ; SOURCE LINE # 306
01DA         ?C0060:
                                           ; SOURCE LINE # 308
01DA 7A00        R     MOV     R2,#HIGH ?SC_300
01DC 7900        R     MOV     R1,#LOW ?SC_300
01DE 120000      R     LCALL   L?0122
01E1 6003              JZ      ?C0063
                                           ; SOURCE LINE # 309
01E3 020000      E     LJMP    Sect_Print
                                           ; SOURCE LINE # 311
01E6         ?C0063:
                                           ; SOURCE LINE # 314
01E6 7A00        R     MOV     R2,#HIGH ?SC_307
01E8 7900        R     MOV     R1,#LOW ?SC_307
01EA 120000      R     LCALL   L?0122
01ED 603E              JZ      ?C0064
                                           ; SOURCE LINE # 315
01EF 120000      R     LCALL   L?0110
                                           ; SOURCE LINE # 316
01F2 120000      E     LCALL   ?C?CLDPTR
01F5 D3                SETB    C
01F6 6480              XRL     A,#080H
01F8 94A9              SUBB    A,#0A9H
01FA 4028              JC      ?C0065
01FC 120000      R     LCALL   L?0136
01FF 120000      E     LCALL   ?C?CLDPTR
0202 C3                CLR     C
0203 6480              XRL     A,#080H
0205 94C0              SUBB    A,#0C0H
0207 501B              JNC     ?C0065
                                           ; SOURCE LINE # 317
                                           ; SOURCE LINE # 318
0209 120000      R     LCALL   L?0141
                                           ; SOURCE LINE # 319
020C 120000      R     LCALL   L?0132
020F 120000      E     LCALL   _Calibrate
                                           ; SOURCE LINE # 320
0212 7A00        R     MOV     R2,#HIGH ?SC_317
0214 7900        R     MOV     R1,#LOW ?SC_317
0216 120000      R     LCALL   L?0131
0219 900000      E     MOV     DPTR,#?_printf?BYTE+03H
021C EE                MOV     A,R6
021D F0                MOVX    @DPTR,A
021E A3                INC     DPTR
021F EF                MOV     A,R7
0220 F0                MOVX    @DPTR,A
0221         ?C0104:
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 79  

                                           ; SOURCE LINE # 321
0221 020000      R     LJMP    ?C0107
0224         ?C0065:
                                           ; SOURCE LINE # 323
0224 7BFF              MOV     R3,#0FFH
0226 7A00        R     MOV     R2,#HIGH ?SC_342
0228 7900        R     MOV     R1,#LOW ?SC_342
022A         ?C0106:
022A 020000      R     LJMP    ?C0107
                                           ; SOURCE LINE # 326
022D         ?C0064:
                                           ; SOURCE LINE # 327
022D 7A00        R     MOV     R2,#HIGH ?SC_362
022F 7900        R     MOV     R1,#LOW ?SC_362
0231 120000      R     LCALL   L?0126
0234 6006              JZ      ?C0067
                                           ; SOURCE LINE # 328
0236 120000      R     LCALL   L?0110
                                           ; SOURCE LINE # 329
0239 020000      E     LJMP    _Change_Directory
                                           ; SOURCE LINE # 331
023C         ?C0067:
                                           ; SOURCE LINE # 332
023C 7A00        R     MOV     R2,#HIGH ?SC_365
023E 7900        R     MOV     R1,#LOW ?SC_365
0240 120000      R     LCALL   L?0126
0243 6006              JZ      ?C0068
                                           ; SOURCE LINE # 333
0245 120000      R     LCALL   L?0117
                                           ; SOURCE LINE # 334
0248 020000      E     LJMP    _Make_Directory
                                           ; SOURCE LINE # 336
024B         ?C0068:
                                           ; SOURCE LINE # 337
024B 7A00        R     MOV     R2,#HIGH ?SC_368
024D 7900        R     MOV     R1,#LOW ?SC_368
024F 120000      R     LCALL   L?0129
0252 6006              JZ      ?C0069
                                           ; SOURCE LINE # 338
0254 120000      R     LCALL   L?0117
                                           ; SOURCE LINE # 339
0257 020000      E     LJMP    _Temp_Log
                                           ; SOURCE LINE # 341
025A         ?C0069:
                                           ; SOURCE LINE # 342
025A 7A00        R     MOV     R2,#HIGH ?SC_376
025C 7900        R     MOV     R1,#LOW ?SC_376
025E 120000      R     LCALL   L?0129
0261 6010              JZ      ?C0070
                                           ; SOURCE LINE # 343
0263 7BFF              MOV     R3,#0FFH
0265 7A00        R     MOV     R2,#HIGH ?SC_191
0267 7900        R     MOV     R1,#LOW ?SC_191
0269 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 344
026C 900000      R     MOV     DPTR,#format_flag
026F 7401              MOV     A,#01H
0271 F0                MOVX    @DPTR,A
0272 22                RET     
                                           ; SOURCE LINE # 347
0273         ?C0070:
                                           ; SOURCE LINE # 348
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 80  

0273 7A00        R     MOV     R2,#HIGH ?SC_383
0275 7900        R     MOV     R1,#LOW ?SC_383
0277 120000      R     LCALL   L?0139
027A 6006              JZ      ?C0071
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 350
027C 120000      R     LCALL   L?0130
                                           ; SOURCE LINE # 351
027F 020000      E     LJMP    _Remove_Direcory
                                           ; SOURCE LINE # 353
0282         ?C0071:
                                           ; SOURCE LINE # 354
0282 7A00        R     MOV     R2,#HIGH ?SC_386
0284 7900        R     MOV     R1,#LOW ?SC_386
0286 120000      R     LCALL   L?0139
0289 6006              JZ      ?C0072
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 356
028B 120000      R     LCALL   L?0130
                                           ; SOURCE LINE # 357
028E 020000      E     LJMP    Get_Status_MMC
                                           ; SOURCE LINE # 359
0291         ?C0072:
                                           ; SOURCE LINE # 360
0291 7A00        R     MOV     R2,#HIGH ?SC_390
0293 7900        R     MOV     R1,#LOW ?SC_390
0295 120000      R     LCALL   L?0144
0298 6003              JZ      ?C0073
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 362
029A D200        E     SETB    Is_Initialized
029C 22                RET     
                                           ; SOURCE LINE # 364
029D         ?C0073:
                                           ; SOURCE LINE # 365
029D 7A00        R     MOV     R2,#HIGH ?SC_399
029F 7900        R     MOV     R1,#LOW ?SC_399
02A1 120000      R     LCALL   L?0144
02A4 6020              JZ      ?C0074
                                           ; SOURCE LINE # 366
                                           ; SOURCE LINE # 367
02A6 120000      R     LCALL   L?0133
02A9         ?C0075:
02A9 120000      R     LCALL   L?0123
02AC 94E8              SUBB    A,#0E8H
02AE EE                MOV     A,R6
02AF 6480              XRL     A,#080H
02B1 9483              SUBB    A,#083H
02B3 4003              JC      $ + 5H
02B5 020000      R     LJMP    ?C0033
                                           ; SOURCE LINE # 368
02B8 EE                MOV     A,R6
02B9 33                RLC     A
02BA 95E0              SUBB    A,ACC
02BC FD                MOV     R5,A
02BD FC                MOV     R4,A
02BE 120000      E     LCALL   _Sect_Read
02C1 120000      R     LCALL   L?0118
02C4 80E3              SJMP    ?C0075
                                           ; SOURCE LINE # 370
02C6         ?C0074:
                                           ; SOURCE LINE # 371
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 81  

02C6 7BFF              MOV     R3,#0FFH
02C8 7A00        R     MOV     R2,#HIGH ?SC_404
02CA 7900        R     MOV     R1,#LOW ?SC_404
02CC 120000      R     LCALL   _Cmd_Match
02CF EF                MOV     A,R7
02D0 7003              JNZ     $ + 5H
02D2 020000      R     LJMP    ?C0078
                                           ; SOURCE LINE # 372
                                           ; SOURCE LINE # 373
02D5 120000      R     LCALL   L?0134
02D8         ?C0079:
02D8 120000      R     LCALL   L?0124
02DB EE                MOV     A,R6
02DC 6480              XRL     A,#080H
02DE 9482              SUBB    A,#082H
02E0 500B              JNC     ?C0080
                                           ; SOURCE LINE # 374
02E2 120000      R     LCALL   L?0114
02E5 74BB              MOV     A,#0BBH
02E7 F0                MOVX    @DPTR,A
02E8 120000      R     LCALL   L?0119
02EB 80EB              SJMP    ?C0079
02ED         ?C0080:
                                           ; SOURCE LINE # 375
02ED 120000      R     LCALL   L?0134
02F0         ?C0082:
02F0 120000      R     LCALL   L?0124
02F3 9464              SUBB    A,#064H
02F5 EE                MOV     A,R6
02F6 6480              XRL     A,#080H
02F8 9480              SUBB    A,#080H
02FA 500B              JNC     ?C0083
                                           ; SOURCE LINE # 376
02FC 120000      R     LCALL   L?0140
02FF 120000      E     LCALL   _Sect_Write
                                           ; SOURCE LINE # 377
0302 120000      R     LCALL   L?0119
0305 80E9              SJMP    ?C0082
0307         ?C0083:
                                           ; SOURCE LINE # 378
0307 120000      R     LCALL   L?0134
030A         ?C0085:
030A 120000      R     LCALL   L?0124
030D 9464              SUBB    A,#064H
030F EE                MOV     A,R6
0310 6480              XRL     A,#080H
0312 9480              SUBB    A,#080H
0314 507A              JNC     ?C0033
                                           ; SOURCE LINE # 379
0316 120000      R     LCALL   L?0140
0319 120000      E     LCALL   _Sect_Read
                                           ; SOURCE LINE # 380
031C 900000      R     MOV     DPTR,#dw
031F 120000      E     LCALL   ?C?LSTKXDATA
0322 00                DB      00H
0323 00                DB      00H
0324 00                DB      00H
0325 00                DB      00H
0326         ?C0088:
0326 E4                CLR     A
0327 FF                MOV     R7,A
0328 7E02              MOV     R6,#02H
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 82  

032A FD                MOV     R5,A
032B FC                MOV     R4,A
032C 900000      R     MOV     DPTR,#dw
032F 120000      E     LCALL   ?C?LLDXDATA0
0332 C3                CLR     C
0333 120000      E     LCALL   ?C?ULCMP
0336 5040              JNC     ?C0087
                                           ; SOURCE LINE # 381
0338 120000      R     LCALL   L?0132
033B 120000      R     LCALL   L?0114
033E E0                MOVX    A,@DPTR
033F 64BB              XRL     A,#0BBH
0341 601D              JZ      ?C0090
                                           ; SOURCE LINE # 382
0343 7BFF              MOV     R3,#0FFH
0345 7A00        R     MOV     R2,#HIGH ?SC_415
0347 7900        R     MOV     R1,#LOW ?SC_415
0349 900000      R     MOV     DPTR,#i+01H
034C E0                MOVX    A,@DPTR
034D 24E8              ADD     A,#0E8H
034F FE                MOV     R6,A
0350 900000      R     MOV     DPTR,#i
0353 E0                MOVX    A,@DPTR
0354 3403              ADDC    A,#03H
0356 900000      E     MOV     DPTR,#?_printf?BYTE+03H
0359 F0                MOVX    @DPTR,A
035A A3                INC     DPTR
035B CE                XCH     A,R6
035C F0                MOVX    @DPTR,A
035D         ?C0107:
035D 020000      E     LJMP    _printf
                                           ; SOURCE LINE # 384
                                           ; SOURCE LINE # 385
0360         ?C0090:
0360 120000      R     LCALL   L?0132
0363 EF                MOV     A,R7
0364 2401              ADD     A,#01H
0366 FF                MOV     R7,A
0367 E4                CLR     A
0368 3E                ADDC    A,R6
0369 FE                MOV     R6,A
036A E4                CLR     A
036B 3D                ADDC    A,R5
036C FD                MOV     R5,A
036D E4                CLR     A
036E 3C                ADDC    A,R4
036F FC                MOV     R4,A
0370 900000      R     MOV     DPTR,#dw
0373 120000      E     LCALL   ?C?LSTXDATA
0376 80AE              SJMP    ?C0088
                                           ; SOURCE LINE # 386
0378         ?C0087:
0378 120000      R     LCALL   L?0119
037B 020000      R     LJMP    ?C0085
                                           ; SOURCE LINE # 388
037E         ?C0078:
                                           ; SOURCE LINE # 439
037E 900000      R     MOV     DPTR,#Cmd_Ptr
0381 E0                MOVX    A,@DPTR
0382 600C              JZ      ?C0033
                                           ; SOURCE LINE # 440
0384 7BFF              MOV     R3,#0FFH
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 83  

0386 7A00        R     MOV     R2,#HIGH ?SC_433
0388 7900        R     MOV     R1,#LOW ?SC_433
038A 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 441
038D         ?C0105:
038D 120000      R     LCALL   Cmd_Help
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 443
0390         ?C0033:
0390 22                RET     
0391         L?0108:
0391 7B00              MOV     R3,#00H
0393 7A00              MOV     R2,#00H
0395 7900              MOV     R1,#00H
0397 120000      E     LCALL   _Str_Token
039A 900000      R     MOV     DPTR,#Token
039D 120000      E     LCALL   ?C?PSTXDATA
03A0 22                RET     
03A1         L?0109:
03A1 7B00              MOV     R3,#00H
03A3 7A00              MOV     R2,#00H
03A5 7900              MOV     R1,#00H
03A7 120000      E     LCALL   _Str_Token
03AA 900000      R     MOV     DPTR,#Token
03AD 120000      E     LCALL   ?C?PSTXDATA
03B0 22                RET     
03B1         L?0110:
03B1 7B00              MOV     R3,#00H
03B3 7A00              MOV     R2,#00H
03B5 7900              MOV     R1,#00H
03B7 120000      E     LCALL   _Str_Token
03BA 900000      R     MOV     DPTR,#Token
03BD 120000      E     LCALL   ?C?PSTXDATA
03C0 22                RET     
03C1         L?0111:
03C1 7BFF              MOV     R3,#0FFH
03C3 120000      R     LCALL   _Cmd_Match
03C6 EF                MOV     A,R7
03C7 22                RET     
03C8         L?0115:
03C8 7BFF              MOV     R3,#0FFH
03CA 120000      R     LCALL   _Cmd_Match
03CD EF                MOV     A,R7
03CE 22                RET     
03CF         L?0116:
03CF 7BFF              MOV     R3,#0FFH
03D1 120000      R     LCALL   _Cmd_Match
03D4 EF                MOV     A,R7
03D5 22                RET     
03D6         L?0117:
03D6 7B00              MOV     R3,#00H
03D8 7A00              MOV     R2,#00H
03DA 7900              MOV     R1,#00H
03DC 120000      E     LCALL   _Str_Token
03DF 900000      R     MOV     DPTR,#Token
03E2 120000      E     LCALL   ?C?PSTXDATA
03E5 22                RET     
03E6         L?0121:
03E6 7BFF              MOV     R3,#0FFH
03E8 120000      R     LCALL   _Cmd_Match
03EB EF                MOV     A,R7
03EC 22                RET     
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 84  

03ED         L?0122:
03ED 7BFF              MOV     R3,#0FFH
03EF 120000      R     LCALL   _Cmd_Match
03F2 EF                MOV     A,R7
03F3 22                RET     
03F4         L?0126:
03F4 7BFF              MOV     R3,#0FFH
03F6 120000      R     LCALL   _Cmd_Match
03F9 EF                MOV     A,R7
03FA 22                RET     
03FB         L?0129:
03FB 7BFF              MOV     R3,#0FFH
03FD 120000      R     LCALL   _Cmd_Match
0400 EF                MOV     A,R7
0401 22                RET     
0402         L?0130:
0402 7B00              MOV     R3,#00H
0404 7A00              MOV     R2,#00H
0406 7900              MOV     R1,#00H
0408 120000      E     LCALL   _Str_Token
040B 900000      R     MOV     DPTR,#Token
040E 120000      E     LCALL   ?C?PSTXDATA
0411 22                RET     
0412         L?0139:
0412 7BFF              MOV     R3,#0FFH
0414 120000      R     LCALL   _Cmd_Match
0417 EF                MOV     A,R7
0418 22                RET     
0419         L?0141:
0419 120000      E     LCALL   _atol
041C 900000      R     MOV     DPTR,#dw
041F 120000      E     LCALL   ?C?LSTXDATA
0422 22                RET     
0423         L?0144:
0423 7BFF              MOV     R3,#0FFH
0425 120000      R     LCALL   _Cmd_Match
0428 EF                MOV     A,R7
0429 22                RET     
             ; FUNCTION Cmd_Exec (END)

             ; FUNCTION Cmd_Step (BEGIN)
                                           ; SOURCE LINE # 456
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 460
0000 120000      E     LCALL   key_available
0003 EF                MOV     A,R7
0004 6075              JZ      ?C0094
0006         ?C0093:
                                           ; SOURCE LINE # 463
0006 120000      E     LCALL   getchar
0009 900000      R     MOV     DPTR,#ch
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 465
000E BF0812            CJNE    R7,#08H,?C0095
                                           ; SOURCE LINE # 466
0011 900000      R     MOV     DPTR,#Cmd_Ptr
0014 E0                MOVX    A,@DPTR
0015 6064              JZ      ?C0094
                                           ; SOURCE LINE # 467
0017 14                DEC     A
0018 F0                MOVX    @DPTR,A
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 85  

                                           ; SOURCE LINE # 468
0019 7F20              MOV     R7,#020H
001B 120000      E     LCALL   _putchar
001E 7F08              MOV     R7,#08H
0020 020000      E     LJMP    _putchar
                                           ; SOURCE LINE # 469
                                           ; SOURCE LINE # 471
0023         ?C0095:
                                           ; SOURCE LINE # 473
0023 900000      R     MOV     DPTR,#ch
0026 E0                MOVX    A,@DPTR
0027 640A              XRL     A,#0AH
0029 702F              JNZ     ?C0097
                                           ; SOURCE LINE # 474
002B 900000      R     MOV     DPTR,#Cmd_Ptr
002E E0                MOVX    A,@DPTR
002F 2400        R     ADD     A,#LOW Cmd
0031 F582              MOV     DPL,A
0033 E4                CLR     A
0034 3400        R     ADDC    A,#HIGH Cmd
0036 F583              MOV     DPH,A
0038 E4                CLR     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 475
003A 120000      R     LCALL   Cmd_Exec
                                           ; SOURCE LINE # 476
003D 7E00              MOV     R6,#00H
003F 7F20              MOV     R7,#020H
0041 7D00              MOV     R5,#00H
0043 7B01              MOV     R3,#01H
0045 7A00        R     MOV     R2,#HIGH Cmd
0047 7900        R     MOV     R1,#LOW Cmd
0049 120000      E     LCALL   ?C?MEMSET
                                           ; SOURCE LINE # 477
004C 120000      E     LCALL   write_current_dir
                                           ; SOURCE LINE # 478
004F 7F3E              MOV     R7,#03EH
0051 120000      E     LCALL   _putchar
                                           ; SOURCE LINE # 479
0054 E4                CLR     A
0055 900000      R     MOV     DPTR,#Cmd_Ptr
0058 F0                MOVX    @DPTR,A
0059 22                RET     
                                           ; SOURCE LINE # 481
005A         ?C0097:
                                           ; SOURCE LINE # 483
005A 900000      R     MOV     DPTR,#Cmd_Ptr
005D E0                MOVX    A,@DPTR
005E C3                CLR     C
005F 941F              SUBB    A,#01FH
0061 5018              JNC     ?C0094
                                           ; SOURCE LINE # 484
0063 900000      R     MOV     DPTR,#ch
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 900000      R     MOV     DPTR,#Cmd_Ptr
006B E0                MOVX    A,@DPTR
006C FE                MOV     R6,A
006D 04                INC     A
006E F0                MOVX    @DPTR,A
006F 7400        R     MOV     A,#LOW Cmd
0071 2E                ADD     A,R6
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 86  

0072 F582              MOV     DPL,A
0074 E4                CLR     A
0075 3400        R     ADDC    A,#HIGH Cmd
0077 F583              MOV     DPH,A
0079 EF                MOV     A,R7
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 485
                                           ; SOURCE LINE # 486
007B         ?C0094:
007B 22                RET     
             ; FUNCTION Cmd_Step (END)

C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 87  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_Str_Token . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
Cmd_Help . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
Sect_Print . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
_Log . . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
Token. . . . . . . . . . . . . . . . .  STATIC   XDATA  PTR      0000H  3
_htonl . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
format_flag. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0003H  1
Cmd_Init . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_atol. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
Cmd_Step . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch . . . . . . . . . . . . . . . . .  AUTO     XDATA  CHAR     0000H  1
Cmd. . . . . . . . . . . . . . . . . .  STATIC   XDATA  ARRAY    0004H  32
Cmd_Dir. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  findinfo . . . . . . . . . . . . . .  AUTO     XDATA  STRUCT   0001H  10
Is_Initialized . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
FILE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  20
  cluster_start. . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  sector_current . . . . . . . . . . .  MEMBER   -----  U_LONG   0002H  4
  sector_direntry. . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  offset_direntry. . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  attrib . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  pos. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   000BH  4
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   000FH  4
  isopen . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0013H  1
bootrecord_large . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  512
  jmp. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  oem_name . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0003H  8
  bytes_per_sector . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  sectors_per_cluster. . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  reserved_sectors . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  fat_copies . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  root_directory_entries . . . . . . .  MEMBER   -----  U_INT    0011H  2
  number_of_sectors. . . . . . . . . .  MEMBER   -----  U_INT    0013H  2
  media_descriptor . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  sectors_per_fat. . . . . . . . . . .  MEMBER   -----  U_INT    0016H  2
  sectors_per_track. . . . . . . . . .  MEMBER   -----  U_INT    0018H  2
  heads. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    001AH  2
  hidden_sectors . . . . . . . . . . .  MEMBER   -----  U_LONG   001CH  4
  total_sectors. . . . . . . . . . . .  MEMBER   -----  U_LONG   0020H  4
  drive_number . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0024H  1
  reserved . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0025H  1
  extended_signature . . . . . . . . .  MEMBER   -----  U_CHAR   0026H  1
  serial_number. . . . . . . . . . . .  MEMBER   -----  ARRAY    0027H  4
  volume_label . . . . . . . . . . . .  MEMBER   -----  ARRAY    002BH  11
  filesystem . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0036H  8
  bootstrap. . . . . . . . . . . . . .  MEMBER   -----  ARRAY    003EH  448
  signature. . . . . . . . . . . . . .  MEMBER   -----  ARRAY    01FEH  2
Cmd_Ptr. . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0024H  1
_findfirst . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
find_info. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  10
  block. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  offset . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 88  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  findempty. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  direntry . . . . . . . . . . . . . .  MEMBER   -----  PTR      0007H  3
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
n_of_sect. . . . . . . . . . . . . . .  PUBLIC   XDATA  LONG     0025H  4
bootrecord_small . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  17
  valid. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  fat_copies . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  root_directory_entries . . . . . . .  MEMBER   -----  U_INT    0002H  2
  number_of_sectors. . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  sectors_per_fat. . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  total_sectors. . . . . . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  reserved_sectors . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  hidden_sectors . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  sectors_per_cluster. . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
write_current_dir. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
bootrecord . . . . . . . . . . . . . .  PUBLIC   XDATA  PTR      0029H  3
_fdelete . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  i. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  c. . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
_Cmd_Match . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  s. . . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
_Change_Directory. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_findnext. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Get_Status_MMC . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Scratch. . . . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  -----
_Sect_Read . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
key_available. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
dir_entry. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  32
  lfn. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  32
  sfn. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  32
PREV_SEARCH. . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  block. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  offset . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
Format_Disk. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_putchar . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_fclose. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Sect_Write. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
getchar. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_fread . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_strncmp . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Calibrate . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
wchar_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
UNI. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  i. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  c. . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
_tolower . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Remove_Direcory . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Cmd_Type. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  filename . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  f. . . . . . . . . . . . . . . . . .  AUTO     XDATA  STRUCT   0003H  20
  bytesread. . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0017H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0019H  2
_fopen . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Make_Directory. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V8.02   F34X_MSD_CMD                  07/24/2007 22:07:36 PAGE 89  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_Temp_Log. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Cmd_Exec . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0000H  2
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  ch . . . . . . . . . . . . . . . . .  AUTO     XDATA  CHAR     0003H  1
  dw . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0004H  4


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1815    ----
   CONSTANT SIZE    =    461    ----
   XDATA SIZE       =     44      53
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
