C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE F34X_MSD_FILE_SYSTEM
OBJECT MODULE PLACED IN F34x_MSD_File_System.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe F34x_MSD_File_System.c PW(80) SB LC
                    - OT(9,SIZE) CD DB OE DF(__F340_VER__) LARGE

line level    source

   1          //----------------------------------------------------------------
             --------------
   2          // F34x_MSD_File_System.c
   3          //----------------------------------------------------------------
             --------------
   4          // Copyright 2006 Silicon Laboratories, Inc.
   5          // http://www.silabs.com
   6          //
   7          // Program Description:
   8          //
   9          // File contains the basic functions for file system commands.
  10          //
  11          //
  12          //
  13          // How To Test:    See Readme.txt
  14          //
  15          //
  16          // FID:            34X000035
  17          // Target:         C8051F34x
  18          // Tool chain:     Keil
  19          // Command Line:   See Readme.txt
  20          // Project Name:   F34x_USB_MSD
  21          //
  22          // Release 1.1
  23          //    -All changes by PKC
  24          //    -09 JUN 2006
  25          //    -No changes; incremented revision number to match project re
             -vision
  26          //
  27          // Release 1.0
  28          //    -Initial Release
  29          //
  30          
  31          //----------------------------------------------------------------
             --------------
  32          // Includes
  33          //----------------------------------------------------------------
             --------------
  34          
  35          #include "F34x_MSD_Definitions.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Definitions.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with all definitions.
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000032
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 2   

  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef __DEFINITIONS_H__
  32      =1  #define __DEFINITIONS_H__
  33      =1  
  34      =1  #define DEBUG_TIMEOUTS
  35      =1  #include "c8051f340.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // C8051F340.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2005 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Register/bit definitions for the C8051F34x family.
  10      =2  //
  11      =2  //
  12      =2  // FID:            34X000002
  13      =2  // Target:         C8051F340, 'F341, 'F342, 'F343, 'F344, 'F345, '
             -F346, 'F347
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   None
  16      =2  //
  17      =2  // Release 1.0
  18      =2  //    -Initial Release (GP\PKC)
  19      =2  //    -13 DEC 2005
  20      =2  
  21      =2  //----------------------------------------------------------------
             --------------
  22      =2  // Header File Preprocessor Directive
  23      =2  //----------------------------------------------------------------
             --------------
  24      =2  
  25      =2  #ifndef C8051F340_H
  26      =2  #define C8051F340_H
  27      =2  
  28      =2  //----------------------------------------------------------------
             --------------
  29      =2  // Byte Registers
  30      =2  //----------------------------------------------------------------
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 3   

             --------------
  31      =2  
  32      =2  sfr  P0           =  0x80;             // Port 0 Latch
  33      =2  sfr  SP           =  0x81;             // Stack Pointer
  34      =2  sfr  DPL          =  0x82;             // Data Pointer Low
  35      =2  sfr  DPH          =  0x83;             // Data Pointer High
  36      =2  sfr  EMI0TC       =  0x84;             // EMIF Timing
  37      =2  sfr  EMI0CF       =  0x85;             // EMIF Configuration
  38      =2  sfr  OSCLCN       =  0x86;             // Internal Low-Freq Oscill
             -ator Control
  39      =2  sfr  PCON         =  0x87;             // Power Control
  40      =2  sfr  TCON         =  0x88;             // Timer/Counter Control
  41      =2  sfr  TMOD         =  0x89;             // Timer/Counter Mode
  42      =2  sfr  TL0          =  0x8A;             // Timer/Counter 0 Low
  43      =2  sfr  TL1          =  0x8B;             // Timer/Counter 1 Low
  44      =2  sfr  TH0          =  0x8C;             // Timer/Counter 0 High
  45      =2  sfr  TH1          =  0x8D;             // Timer/Counter 1 High
  46      =2  sfr  CKCON        =  0x8E;             // Clock Control
  47      =2  sfr  PSCTL        =  0x8F;             // Program Store R/W Contro
             -l
  48      =2  sfr  P1           =  0x90;             // Port 1 Latch
  49      =2  sfr  TMR3CN       =  0x91;             // Timer/Counter 3Control
  50      =2  sfr  TMR3RLL      =  0x92;             // Timer/Counter 3 Reload L
             -ow
  51      =2  sfr  TMR3RLH      =  0x93;             // Timer/Counter 3 Reload H
             -igh
  52      =2  sfr  TMR3L        =  0x94;             // Timer/Counter 3Low
  53      =2  sfr  TMR3H        =  0x95;             // Timer/Counter 3 High
  54      =2  sfr  USB0ADR      =  0x96;             // USB0 Indirect Address Re
             -gister
  55      =2  sfr  USB0DAT      =  0x97;             // USB0 Data Register
  56      =2  sfr  SCON0        =  0x98;             // UART0 Control
  57      =2  sfr  SBUF0        =  0x99;             // UART0 Data Buffer
  58      =2  sfr  CPT1CN       =  0x9A;             // Comparator1 Control
  59      =2  sfr  CPT0CN       =  0x9B;             // Comparator0 Control
  60      =2  sfr  CPT1MD       =  0x9C;             // Comparator1 Mode Selecti
             -on
  61      =2  sfr  CPT0MD       =  0x9D;             // Comparator0 Mode Selecti
             -on
  62      =2  sfr  CPT1MX       =  0x9E;             // Comparator1 MUX Selectio
             -n
  63      =2  sfr  CPT0MX       =  0x9F;             // Comparator0 MUX Selectio
             -n
  64      =2  sfr  P2           =  0xA0;             // Port 2 Latch
  65      =2  sfr  SPI0CFG      =  0xA1;             // SPI Configuration
  66      =2  sfr  SPI0CKR      =  0xA2;             // SPI Clock Rate Control
  67      =2  sfr  SPI0DAT      =  0xA3;             // SPI Data
  68      =2  sfr  P0MDOUT      =  0xA4;             // Port 0 Output Mode Confi
             -guration
  69      =2  sfr  P1MDOUT      =  0xA5;             // Port 1 Output Mode Confi
             -guration
  70      =2  sfr  P2MDOUT      =  0xA6;             // Port 2 Output Mode Confi
             -guration
  71      =2  sfr  P3MDOUT      =  0xA7;             // Port 3 Output Mode Confi
             -guration
  72      =2  sfr  IE           =  0xA8;             // Interrupt Enable
  73      =2  sfr  CLKSEL       =  0xA9;             // Clock Select
  74      =2  sfr  EMI0CN       =  0xAA;             // External Memory Interfac
             -e Control
  75      =2  sfr  SBCON1       =  0xAC;             // UART1 Baud Rate Generato
             -r Control
  76      =2  sfr  P4MDOUT      =  0xAE;             // Port 4 Output Mode Confi
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 4   

             -guration
  77      =2  sfr  PFE0CN       =  0xAF;             // Prefetch Engine Control
  78      =2  sfr  P3           =  0xB0;             // Port 3 Latch
  79      =2  sfr  OSCXCN       =  0xB1;             // External Oscillator Cont
             -rol
  80      =2  sfr  OSCICN       =  0xB2;             // Internal Oscillator Cont
             -rol
  81      =2  sfr  OSCICL       =  0xB3;             // Internal Oscillator Cali
             -bration
  82      =2  sfr  SBRLL1       =  0xB4;             // UART1 Baud Rate Generato
             -r Low
  83      =2  sfr  SBRLH1       =  0xB5;             // UART1 Baud Rate Generato
             -r High
  84      =2  sfr  FLSCL        =  0xB6;             // Flash Scale
  85      =2  sfr  FLKEY        =  0xB7;             // Flash Lock and Key
  86      =2  sfr  IP           =  0xB8;             // Interrupt Priority
  87      =2  sfr  CLKMUL       =  0xB9;             // Clock Multiplier
  88      =2  sfr  AMX0N        =  0xBA;             // AMUX0 Negative Channel S
             -elect
  89      =2  sfr  AMX0P        =  0xBB;             // AMUX0 Positive Channel S
             -elect
  90      =2  sfr  ADC0CF       =  0xBC;             // ADC0 Configuration
  91      =2  sfr  ADC0L        =  0xBD;             // ADC0 Low
  92      =2  sfr  ADC0H        =  0xBE;             // ADC0 High
  93      =2  sfr  SMB0CN       =  0xC0;             // SMBus Control
  94      =2  sfr  SMB0CF       =  0xC1;             // SMBus Configuration
  95      =2  sfr  SMB0DAT      =  0xC2;             // SMBus Data
  96      =2  sfr  ADC0GTL      =  0xC3;             // ADC0 Greater-Than Compar
             -e Low
  97      =2  sfr  ADC0GTH      =  0xC4;             // ADC0 Greater-Than Compar
             -e High
  98      =2  sfr  ADC0LTL      =  0xC5;             // ADC0 Less-Than Compare W
             -ord Low
  99      =2  sfr  ADC0LTH      =  0xC6;             // ADC0 Less-Than Compare W
             -ord High
 100      =2  sfr  P4           =  0xC7;             // Port 4 Latch
 101      =2  sfr  TMR2CN       =  0xC8;             // Timer/Counter 2 Control
 102      =2  sfr  REG0CN       =  0xC9;             // Voltage Regulator Contro
             -l
 103      =2  sfr  TMR2RLL      =  0xCA;             // Timer/Counter 2 Reload L
             -ow
 104      =2  sfr  TMR2RLH      =  0xCB;             // Timer/Counter 2 Reload H
             -igh
 105      =2  sfr  TMR2L        =  0xCC;             // Timer/Counter 2 Low
 106      =2  sfr  TMR2H        =  0xCD;             // Timer/Counter 2 High
 107      =2  sfr  PSW          =  0xD0;             // Program Status Word
 108      =2  sfr  REF0CN       =  0xD1;             // Voltage Reference Contro
             -l
 109      =2  sfr  SCON1        =  0xD2;             // UART1 Control
 110      =2  sfr  SBUF1        =  0xD3;             // UART1 Data Buffer
 111      =2  sfr  P0SKIP       =  0xD4;             // Port 0 Skip
 112      =2  sfr  P1SKIP       =  0xD5;             // Port 1 Skip
 113      =2  sfr  P2SKIP       =  0xD6;             // Port 2 Skip
 114      =2  sfr  USB0XCN      =  0xD7;             // USB0 Transceiver Control
 115      =2  sfr  PCA0CN       =  0xD8;             // PCA0 Control
 116      =2  sfr  PCA0MD       =  0xD9;             // PCA0 Mode
 117      =2  sfr  PCA0CPM0     =  0xDA;             // PCA0 Module 0 Mode Regis
             -ter
 118      =2  sfr  PCA0CPM1     =  0xDB;             // PCA0 Module 1 Mode Regis
             -ter
 119      =2  sfr  PCA0CPM2     =  0xDC;             // PCA0 Module 2 Mode Regis
             -ter
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 5   

 120      =2  sfr  PCA0CPM3     =  0xDD;             // PCA0 Module 3 Mode Regis
             -ter
 121      =2  sfr  PCA0CPM4     =  0xDE;             // PCA0 Module 4 Mode Regis
             -ter
 122      =2  sfr  P3SKIP       =  0xDF;             // Port 3 Skip
 123      =2  sfr  ACC          =  0xE0;             // Accumulator
 124      =2  sfr  XBR0         =  0xE1;             // Port I/O Crossbar Contro
             -l 0
 125      =2  sfr  XBR1         =  0xE2;             // Port I/O Crossbar Contro
             -l 1
 126      =2  sfr  XBR2         =  0xE3;             // Port I/O Crossbar Contro
             -l 2
 127      =2  sfr  IT01CF       =  0xE4;             // INT0/INT1 Configuration
 128      =2  sfr  SMOD1        =  0xE5;             // UART1 Mode
 129      =2  sfr  EIE1         =  0xE6;             // Extended Interrupt Enabl
             -e 1
 130      =2  sfr  EIE2         =  0xE7;             // Extended Interrupt Enabl
             -e 2
 131      =2  sfr  ADC0CN       =  0xE8;             // ADC0 Control
 132      =2  sfr  PCA0CPL1     =  0xE9;             // PCA0 Capture 1 Low
 133      =2  sfr  PCA0CPH1     =  0xEA;             // PCA0 Capture 1 High
 134      =2  sfr  PCA0CPL2     =  0xEB;             // PCA0 Capture 2 Low
 135      =2  sfr  PCA0CPH2     =  0xEC;             // PCA0 Capture 2 High
 136      =2  sfr  PCA0CPL3     =  0xED;             // PCA0 Capture 3 Low
 137      =2  sfr  PCA0CPH3     =  0xEE;             // PCA0 Capture 3 High
 138      =2  sfr  RSTSRC       =  0xEF;             // Reset Source Configurati
             -on/Status
 139      =2  sfr  B            =  0xF0;             // B Register
 140      =2  sfr  P0MDIN       =  0xF1;             // Port 0 Input Mode Config
             -uration
 141      =2  sfr  P1MDIN       =  0xF2;             // Port 1 Input Mode Config
             -uration
 142      =2  sfr  P2MDIN       =  0xF3;             // Port 2 Input Mode Config
             -uration
 143      =2  sfr  P3MDIN       =  0xF4;             // Port 3 Input Mode Config
             -uration
 144      =2  sfr  P4MDIN       =  0xF5;             // Port 4 Input Mode Config
             -uration
 145      =2  sfr  EIP1         =  0xF6;             // Extended Interrupt Prior
             -ity 1
 146      =2  sfr  EIP2         =  0xF7;             // Extended Interrupt Prior
             -ity 2
 147      =2  sfr  SPI0CN       =  0xF8;             // SPI0 Control
 148      =2  sfr  PCA0L        =  0xF9;             // PCA0 Counter Low
 149      =2  sfr  PCA0H        =  0xFA;             // PCA0 Counter High
 150      =2  sfr  PCA0CPL0     =  0xFB;             // PCA0 Capture 0 Low
 151      =2  sfr  PCA0CPH0     =  0xFC;             // PCA0 Capture 0 High
 152      =2  sfr  PCA0CPL4     =  0xFD;             // PCA0 Capture 4 Low
 153      =2  sfr  PCA0CPH4     =  0xFE;             // PCA0 Capture 4 High
 154      =2  sfr  VDM0CN       =  0xFF;             // VDD Monitor Control
 155      =2  
 156      =2  
 157      =2  //----------------------------------------------------------------
             --------------
 158      =2  // Bit Definitions
 159      =2  //----------------------------------------------------------------
             --------------
 160      =2  
 161      =2  // TCON 0x88
 162      =2  sbit TF1     = 0x8F;                   // Timer1 overflow flag
 163      =2  sbit TR1     = 0x8E;                   // Timer1 on/off control
 164      =2  sbit TF0     = 0x8D;                   // Timer0 overflow flag
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 6   

 165      =2  sbit TR0     = 0x8C;                   // Timer0 on/off control
 166      =2  sbit IE1     = 0x8B;                   // Ext interrupt 1 edge fla
             -g
 167      =2  sbit IT1     = 0x8A;                   // Ext interrupt 1 type
 168      =2  sbit IE0     = 0x89;                   // Ext interrupt 0 edge fla
             -g
 169      =2  sbit IT0     = 0x88;                   // Ext interrupt 0 type
 170      =2  
 171      =2  // SCON0 0x98
 172      =2  sbit S0MODE  = 0x9F;                   // Serial mode control bit 
             -0
 173      =2                                         // Bit6 UNUSED
 174      =2  sbit MCE0    = 0x9D;                   // Multiprocessor communica
             -tion enable
 175      =2  sbit REN0    = 0x9C;                   // Receive enable
 176      =2  sbit TB80    = 0x9B;                   // Transmit bit 8
 177      =2  sbit RB80    = 0x9A;                   // Receive bit 8
 178      =2  sbit TI0     = 0x99;                   // Transmit interrupt flag
 179      =2  sbit RI0     = 0x98;                   // Receive interrupt flag
 180      =2  
 181      =2  // IE 0xA8
 182      =2  sbit EA      = 0xAF;                   // Global interrupt enable
 183      =2  sbit ESPI0   = 0xAE;                   // SPI0 interrupt enable
 184      =2  sbit ET2     = 0xAD;                   // Timer2 interrupt enable
 185      =2  sbit ES0     = 0xAC;                   // UART0 interrupt enable
 186      =2  sbit ET1     = 0xAB;                   // Timer1 interrupt enable
 187      =2  sbit EX1     = 0xAA;                   // External interrupt 1 ena
             -ble
 188      =2  sbit ET0     = 0xA9;                   // Timer0 interrupt enable
 189      =2  sbit EX0     = 0xA8;                   // External interrupt 0 ena
             -ble
 190      =2  
 191      =2  // IP 0xB8
 192      =2                                         // Bit7 UNUSED
 193      =2  sbit PSPI0   = 0xBE;                   // SPI0 interrupt priority
 194      =2  sbit PT2     = 0xBD;                   // Timer2 priority
 195      =2  sbit PS0     = 0xBC;                   // UART0 priority
 196      =2  sbit PT1     = 0xBB;                   // Timer1 priority
 197      =2  sbit PX1     = 0xBA;                   // External interrupt 1 pri
             -ority
 198      =2  sbit PT0     = 0xB9;                   // Timer0 priority
 199      =2  sbit PX0     = 0xB8;                   // External interrupt 0 pri
             -ority
 200      =2  
 201      =2  // SMB0CN 0xC0
 202      =2  sbit MASTER  = 0xC7;                   // Master/slave indicator
 203      =2  sbit TXMODE  = 0xC6;                   // Transmit mode indicator
 204      =2  sbit STA     = 0xC5;                   // Start flag
 205      =2  sbit STO     = 0xC4;                   // Stop flag
 206      =2  sbit ACKRQ   = 0xC3;                   // Acknowledge request
 207      =2  sbit ARBLOST = 0xC2;                   // Arbitration lost indicat
             -or
 208      =2  sbit ACK     = 0xC1;                   // Acknowledge flag
 209      =2  sbit SI      = 0xC0;                   // SMBus interrupt flag
 210      =2  
 211      =2  // TMR2CN 0xC8
 212      =2  sbit TF2H    = 0xCF;                   // Timer2 high byte overflo
             -w flag
 213      =2  sbit TF2L    = 0xCE;                   // Timer2 low byte overflow
             - flag
 214      =2  sbit TF2LEN  = 0xCD;                   // Timer2 low byte interrup
             -t enable
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 7   

 215      =2  sbit T2CE    = 0xCC;                   // Timer2 capture enable
 216      =2  sbit T2SPLIT = 0xCB;                   // Timer2 split mode enable
 217      =2  sbit TR2     = 0xCA;                   // Timer2 on/off control
 218      =2  sbit T2CSS   = 0xC9;                   // Timer 2 Capture Source s
             -elect
 219      =2  sbit T2XCLK  = 0xC8;                   // Timer2 external clock se
             -lect
 220      =2  
 221      =2  // PSW 0xD0
 222      =2  sbit CY      = 0xD7;                   // Carry flag
 223      =2  sbit AC      = 0xD6;                   // Auxiliary carry flag
 224      =2  sbit F0      = 0xD5;                   // User flag 0
 225      =2  sbit RS1     = 0xD4;                   // Register bank select 1
 226      =2  sbit RS0     = 0xD3;                   // Register bank select 0
 227      =2  sbit OV      = 0xD2;                   // Overflow flag
 228      =2  sbit F1      = 0xD1;                   // User flag 1
 229      =2  sbit P       = 0xD0;                   // Accumulator parity flag
 230      =2  
 231      =2  // PCA0CN 0xD8
 232      =2  sbit CF      = 0xDF;                   // PCA0 counter overflow fl
             -ag
 233      =2  sbit CR      = 0xDE;                   // PCA0 counter run control
 234      =2                                         // Bit5 UNUSED
 235      =2  sbit CCF4    = 0xDC;                   // PCA0 module4 capture/com
             -pare flag
 236      =2  sbit CCF3    = 0xDB;                   // PCA0 module3 capture/com
             -pare flag
 237      =2  sbit CCF2    = 0xDA;                   // PCA0 module2 capture/com
             -pare flag
 238      =2  sbit CCF1    = 0xD9;                   // PCA0 module1 capture/com
             -pare flag
 239      =2  sbit CCF0    = 0xD8;                   // PCA0 module0 capture/com
             -pare flag
 240      =2  
 241      =2  // ADC0CN 0xE8
 242      =2  sbit AD0EN   = 0xEF;                   // ADC0 enable
 243      =2  sbit AD0TM   = 0xEE;                   // ADC0 track mode
 244      =2  sbit AD0INT  = 0xED;                   // ADC0 conversion complete
             - interrupt flag
 245      =2  sbit AD0BUSY = 0xEC;                   // ADC0 busy flag
 246      =2  sbit AD0WINT = 0xEB;                   // ADC0 window compare inte
             -rrupt flag
 247      =2  sbit AD0CM2  = 0xEA;                   // ADC0 conversion mode sel
             -ect 2
 248      =2  sbit AD0CM1  = 0xE9;                   // ADC0 conversion mode sel
             -ect 1
 249      =2  sbit AD0CM0  = 0xE8;                   // ADC0 conversion mode sel
             -ect 0
 250      =2  
 251      =2  // SPI0CN 0xF8
 252      =2  sbit SPIF    = 0xFF;                   // SPI0 interrupt flag
 253      =2  sbit WCOL    = 0xFE;                   // SPI0 write collision fla
             -g
 254      =2  sbit MODF    = 0xFD;                   // SPI0 mode fault flag
 255      =2  sbit RXOVRN  = 0xFC;                   // SPI0 rx overrun flag
 256      =2  sbit NSSMD1  = 0xFB;                   // SPI0 slave select mode 1
 257      =2  sbit NSSMD0  = 0xFA;                   // SPI0 slave select mode 0
 258      =2  sbit TXBMT   = 0xF9;                   // SPI0 transmit buffer emp
             -ty
 259      =2  sbit SPIEN   = 0xF8;                   // SPI0 SPI enable
 260      =2  
 261      =2  
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 8   

 262      =2  //----------------------------------------------------------------
             --------------
 263      =2  // Interrupt Priorities
 264      =2  //----------------------------------------------------------------
             --------------
 265      =2  
 266      =2  #define INTERRUPT_INT0             0   // External Interrupt 0
 267      =2  #define INTERRUPT_TIMER0           1   // Timer0 Overflow
 268      =2  #define INTERRUPT_INT1             2   // External Interrupt 1
 269      =2  #define INTERRUPT_TIMER1           3   // Timer1 Overflow
 270      =2  #define INTERRUPT_UART0            4   // Serial Port 0
 271      =2  #define INTERRUPT_TIMER2           5   // Timer2 Overflow
 272      =2  #define INTERRUPT_SPI0             6   // Serial Peripheral Interf
             -ace 0
 273      =2  #define INTERRUPT_SMBUS0           7   // SMBus0 Interface
 274      =2  #define INTERRUPT_USB0             8   // USB Interface
 275      =2  #define INTERRUPT_ADC0_WINDOW      9   // ADC0 Window Comparison
 276      =2  #define INTERRUPT_ADC0_EOC         10  // ADC0 End Of Conversion
 277      =2  #define INTERRUPT_PCA0             11  // PCA0 Peripheral
 278      =2  #define INTERRUPT_COMPARATOR0      12  // Comparator0
 279      =2  #define INTERRUPT_COMPARATOR1      13  // Comparator1
 280      =2  #define INTERRUPT_TIMER3           14  // Timer3 Overflow
 281      =2  #define INTERRUPT_VBUS_LEVEL       15  // VBUS level-triggered int
             -errupt
 282      =2  #define INTERRUPT_UART1            16  // Serial Port 1
 283      =2  
 284      =2  //----------------------------------------------------------------
             --------------
 285      =2  // Header File PreProcessor Directive
 286      =2  //----------------------------------------------------------------
             --------------
 287      =2  
 288      =2  #endif                                 // #define C8051F340_H
 289      =2  
 290      =2  //----------------------------------------------------------------
             --------------
 291      =2  // End Of File
 292      =2  //----------------------------------------------------------------
             --------------
  36      =1  #ifdef DEBUG_TIMEOUTS
  37      =1  sbit START_STOP_SPI = P3^0 ;
  38      =1  sbit START_STOP_READ_TO = P3^1;
  39      =1  sbit START_STOP_WRITE_TO = P3^2;
  40      =1  
  41      =1  #define START_SPI_TIMEOUT (START_STOP_SPI = 1)
  42      =1  #define STOP_SPI_TIME_OUT (START_STOP_SPI = 0)
  43      =1  #define START_READ_COPY (START_STOP_READ_TO = 1)
  44      =1  #define STOP_READ_COPY (START_STOP_READ_TO = 0)
  45      =1  #define START_WRITE_COPY (START_STOP_WRITE_TO = 1)
  46      =1  #define STOP_WRITE_COPY (START_STOP_WRITE_TO = 0)
  47      =1  #else
           =1 
           =1 #define START_SPI_TIMEOUT /\
           =1 /
           =1 #define STOP_SPI_TIME_OUT /\
           =1 /
           =1 #define START_READ_COPY /\
           =1 /
           =1 #define STOP_READ_COPY /\
           =1 /
           =1 #define START_WRITE_COPY /\
           =1 /
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 9   

           =1 #define STOP_WRITE_COPY /\
           =1 /
           =1 
           =1 #endif
  63      =1  
  64      =1  #define ENDLINE         "\r\n"
  65      =1  #define ENDLINE_SGN '\r'
  66      =1  
  67      =1  #endif
  36          #include "F34x_MSD_File_System.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_File_System.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_File_Syst
             -em..c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000036
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef _FILESYS_H_
  32      =1  #define _FILESYS_H_
  33      =1  
  34      =1  #include "F34x_MSD_USB_Main.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_USB_Main.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Main header file for USB firmware. Includes function prototypes
             -,
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 10  

  10      =2  // standard constants, and configuration constants.//
  11      =2  //
  12      =2  // FID:            34X000063
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -No changes; incremented revision number to match project re
             -vision
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  // 11/22/02 - DM: 1. Updated function prototypes and added constan
             -ts
  27      =2  //                to F34x_USB_Main.h with sample interrupt firmwar
             -e.
  28      =2  
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  // Header File Preprocessor Directive
  31      =2  //----------------------------------------------------------------
             --------------
  32      =2  
  33      =2  #ifndef _USB_MAIN_H_
  34      =2  #define _USB_MAIN_H_
  35      =2  
  36      =2  #include "F34x_MSD_Definitions.h"
   1      =3  //----------------------------------------------------------------
             --------------
   2      =3  // F34x_MSD_Definitions.h
   3      =3  //----------------------------------------------------------------
             --------------
   4      =3  // Copyright 2006 Silicon Laboratories, Inc.
   5      =3  // http://www.silabs.com
   6      =3  //
   7      =3  // Program Description:
   8      =3  //
   9      =3  // Header file with all definitions.
  10      =3  //
  11      =3  //
  12      =3  // FID:            34X000032
  13      =3  // Target:         C8051F34x
  14      =3  // Tool chain:     Keil
  15      =3  // Command Line:   See Readme.txt
  16      =3  // Project Name:   F34x_USB_MSD
  17      =3  //
  18      =3  // Release 1.1
  19      =3  //    -All changes by PKC
  20      =3  //    -09 JUN 2006
  21      =3  //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  22      =3  //
  23      =3  // Release 1.0
  24      =3  //    -Initial Release
  25      =3  //
  26      =3  
  27      =3  //----------------------------------------------------------------
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 11  

             --------------
  28      =3  // Header File Preprocessor Directive
  29      =3  //----------------------------------------------------------------
             --------------
  30      =3  
  31      =3  #ifndef __DEFINITIONS_H__
           =3 #define __DEFINITIONS_H__
           =3 
           =3 #define DEBUG_TIMEOUTS
           =3 #include "c8051f340.h"
           =3 #ifdef DEBUG_TIMEOUTS
           =3 sbit START_STOP_SPI = P3^0 ;
           =3 sbit START_STOP_READ_TO = P3^1;
           =3 sbit START_STOP_WRITE_TO = P3^2;
           =3 
           =3 #define START_SPI_TIMEOUT (START_STOP_SPI = 1)
           =3 #define STOP_SPI_TIME_OUT (START_STOP_SPI = 0)
           =3 #define START_READ_COPY (START_STOP_READ_TO = 1)
           =3 #define STOP_READ_COPY (START_STOP_READ_TO = 0)
           =3 #define START_WRITE_COPY (START_STOP_WRITE_TO = 1)
           =3 #define STOP_WRITE_COPY (START_STOP_WRITE_TO = 0)
           =3 #else
           =3 
           =3 #define START_SPI_TIMEOUT /\
           =3 /
           =3 #define STOP_SPI_TIME_OUT /\
           =3 /
           =3 #define START_READ_COPY /\
           =3 /
           =3 #define STOP_READ_COPY /\
           =3 /
           =3 #define START_WRITE_COPY /\
           =3 /
           =3 #define STOP_WRITE_COPY /\
           =3 /
           =3 
           =3 #endif
           =3 
           =3 #define ENDLINE         "\r\n"
           =3 #define ENDLINE_SGN '\r'
           =3 
           =3 #endif
  37      =2  //#define _USB_LOW_SPEED_                      // Change this comm
             -ent to make Full/Low speed
  38      =2  
  39      =2  #define SYSCLK                   12000000    // SYSCLK frequency i
             -n Hz
  40      =2  
  41      =2  // USB clock selections (SFR CLKSEL)
  42      =2  #define USB_4X_CLOCK             0x00        // Select 4x clock mu
             -ltiplier, for USB Full Speed
  43      =2  #define USB_INT_OSC_DIV_2        0x10        // See Data Sheet sec
             -tion 13. Oscillators
  44      =2  #define USB_EXT_OSC              0x20
  45      =2  #define USB_EXT_OSC_DIV_2        0x30
  46      =2  #define USB_EXT_OSC_DIV_3        0x40
  47      =2  #define USB_EXT_OSC_DIV_4        0x50
  48      =2  
  49      =2  // System clock selections (SFR CLKSEL)
  50      =2  #define SYS_INT_OSC              0x00        // Select to use inte
             -rnal oscillator
  51      =2  #define SYS_4X_MUL               0x03        // Select to use inte
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 12  

             -rnal oscillator
  52      =2  #define SYS_EXT_OSC              0x01        // Select to use an e
             -xternal oscillator
  53      =2  #define SYS_4X_DIV_2             0x02
  54      =2  
  55      =2  // BYTE type definition
  56      =2  #ifndef _BYTE_DEF_
  57      =2  #define _BYTE_DEF_
  58      =2  typedef unsigned char BYTE;
  59      =2  #endif   /* _BYTE_DEF_ */
  60      =2  
  61      =2  // WORD type definition, for KEIL Compiler
  62      =2  #ifndef _WORD_DEF_                           // Compiler Specific,
             - written for Little Endian
  63      =2  #define _WORD_DEF_
  64      =2  typedef union {unsigned int i; unsigned char c[2];} WORD;
  65      =2  #define LSB 1                                // All words sent to 
             -and received from the host are
  66      =2  #define MSB 0                                // little endian, thi
             -s is switched by software when
  67      =2                                               // neccessary.  These
             - sections of code have been marked
  68      =2                                                                                           // with "Compiler Specific" as above for easier modifi
             -cation
  69      =2  #endif   /* _WORD_DEF_ */
  70      =2  
  71      =2  // DWORD type definition
  72      =2  #ifndef _DWORD_DEF_
  73      =2  #define _DWORD_DEF_
  74      =2  typedef unsigned long DWORD;
  75      =2  #endif /* _DWORD_DEF_ */
  76      =2  
  77      =2  extern volatile DWORD xdata tickcount;
  78      =2  
  79      =2  // Define Endpoint Packet Sizes
  80      =2  #ifdef _USB_LOW_SPEED_
           =2 #define  EP0_PACKET_SIZE         0x40        // This value can be 
             -8,16,32,64 depending on device speed, see USB spec
           =2 #else
  83      =2  #define  EP0_PACKET_SIZE         0x40
  84      =2  #endif /* _USB_LOW_SPEED_ */ 
  85      =2  
  86      =2  #define  EP1_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type  
  87      =2  #define  EP1_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP1_PACKET_SIZE
  88      =2  #define  EP2_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type
  89      =2  #define  EP2_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP2_PACKET_SIZE
  90      =2  
  91      =2  // Standard Descriptor Types
  92      =2  #define  DSC_DEVICE              0x01        // Device Descriptor
  93      =2  #define  DSC_CONFIG              0x02        // Configuration Desc
             -riptor
  94      =2  #define  DSC_STRING              0x03        // String Descriptor
  95      =2  #define  DSC_INTERFACE           0x04        // Interface Descript
             -or
  96      =2  #define  DSC_ENDPOINT            0x05        // Endpoint Descripto
             -r
  97      =2  
  98      =2  // HID Descriptor Types
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 13  

  99      =2  #define DSC_HID                                 0x21            // HID Class Descriptor
 100      =2  #define DSC_HID_REPORT                  0x22            // HID Report Descriptor
 101      =2  
 102      =2  // Standard Request Codes
 103      =2  #define  GET_STATUS             0x00        // Code for Get Status
 104      =2  #define  CLEAR_FEATURE          0x01        // Code for Clear Feat
             -ure
 105      =2  #define  SET_FEATURE            0x03        // Code for Set Featur
             -e
 106      =2  #define  SET_ADDRESS            0x05        // Code for Set Addres
             -s
 107      =2  #define  GET_DESCRIPTOR         0x06        // Code for Get Descri
             -ptor
 108      =2  #define  SET_DESCRIPTOR         0x07        // Code for Set Descri
             -ptor(not used)
 109      =2  #define  GET_CONFIGURATION      0x08        // Code for Get Config
             -uration
 110      =2  #define  SET_CONFIGURATION      0x09        // Code for Set Config
             -uration
 111      =2  #define  GET_INTERFACE          0x0A        // Code for Get Interf
             -ace
 112      =2  #define  SET_INTERFACE          0x0B        // Code for Set Interf
             -ace
 113      =2  #define  SYNCH_FRAME            0x0C        // Code for Synch Fram
             -e(not used)
 114      =2  #define  MSD_RESET                              0xFF            // Mass-storage device Reset
 115      =2  #define  MSD_GET_MAX_LUN                0xFE            // Mass-storage device Get Max LU
             -N
 116      =2  
 117      =2  // HID Request Codes
 118      =2  #define GET_REPORT                              0x01            // Code for Get Report
 119      =2  #define GET_IDLE                                0x02            // Code for Get Idle
 120      =2  #define GET_PROTOCOL                    0x03            // Code for Get Protocol
 121      =2  #define SET_REPORT                              0x09            // Code for Set Report
 122      =2  #define SET_IDLE                                0x0A            // Code for Set Idle
 123      =2  #define SET_PROTOCOL                    0x0B            // Code for Set Protocol
 124      =2  
 125      =2  // Define device states
 126      =2  #define  DEV_ATTACHED            0x00        // Device is in Attac
             -hed State
 127      =2  #define  DEV_POWERED             0x01        // Device is in Power
             -ed State
 128      =2  #define  DEV_DEFAULT             0x02        // Device is in Defau
             -lt State
 129      =2  #define  DEV_ADDRESS             0x03        // Device is in Addre
             -ssed State
 130      =2  #define  DEV_CONFIGURED          0x04        // Device is in Confi
             -gured State
 131      =2  #define  DEV_SUSPENDED           0x05        // Device is in Suspe
             -nded State
 132      =2  
 133      =2  // Define bmRequestType bitmaps
 134      =2  #define  IN_DEVICE               0x00        // Request made to de
             -vice, direction is IN 
 135      =2  #define  OUT_DEVICE              0x80        // Request made to de
             -vice, direction is OUT
 136      =2  #define  IN_INTERFACE            0x01        // Request made to in
             -terface, direction is IN
 137      =2  #define  OUT_INTERFACE           0x81        // Request made to in
             -terface, direction is OUT
 138      =2  #define  IN_ENDPOINT             0x02        // Request made to en
             -dpoint, direction is IN
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 14  

 139      =2  #define  OUT_ENDPOINT            0x82        // Request made to en
             -dpoint, direction is OUT
 140      =2  
 141      =2  // Define wIndex bitmaps
 142      =2  #define  IN_EP1                  0x81        // Index values used 
             -by Set and Clear feature
 143      =2  #define  OUT_EP1                 0x01        // commands for Endpo
             -int_Halt
 144      =2  #define  IN_EP2                  0x82
 145      =2  #ifdef __F326_VER__
           =2 #define  OUT_EP2                                 0x01           
           =2 #else
 148      =2  #define  OUT_EP2                                 0x01           
 149      =2  #endif
 150      =2  
 151      =2  // Define wValue bitmaps for Standard Feature Selectors
 152      =2  #define  DEVICE_REMOTE_WAKEUP    0x01        // Remote wakeup feat
             -ure(not used)
 153      =2  #define  ENDPOINT_HALT           0x00        // Endpoint_Halt feat
             -ure selector
 154      =2  
 155      =2  // Define Endpoint States
 156      =2  #define  EP_IDLE                 0x00        // This signifies End
             -point Idle State
 157      =2  #define  EP_TX                   0x01        // Endpoint Transmit 
             -State
 158      =2  #define  EP_RX                   0x02        // Endpoint Receive S
             -tate
 159      =2  #define  EP_HALT                 0x03        // Endpoint Halt Stat
             -e (return stalls)
 160      =2  #define  EP_STALL                0x04        // Endpoint Stall (se
             -nd procedural stall next status phase)
 161      =2  #define  EP_ADDRESS              0x05        // Endpoint Address (
             -change FADDR during next status phase)
 162      =2  
 163      =2  // Function prototypes
 164      =2  // USB Routines
 165      =2  void USB_Resume(void);                       // This routine resum
             -es USB operation
 166      =2  void USB_Reset(void);                        // Called after USB b
             -us reset
 167      =2  void Handle_Setup(void);                     // Handle setup packe
             -t on Endpoint 0
 168      =2  void Handle_In1(BYTE* ptr_buf);                       // Handle in
             - packet on Endpoint 1
 169      =2  void Handle_Out2(void);                      // Handle out packet 
             -on Endpoint 2
 170      =2  void USB_Suspend(void);                      // This routine calle
             -d when suspend signalling on bus
 171      =2  void Out2_Get_Data(BYTE* ptr_buf);                               // Copies from FIFO to ptr_
             -buf, clears FIFO-full flag.
 172      =2  void Out2_Done(void);                                            // Call this when finished with the d
             -ata
 173      =2  
 174      =2  // Standard Requests
 175      =2  void Get_Status(void);                       // These are called f
             -or each specific standard request
 176      =2  void Clear_Feature(void);
 177      =2  void Set_Feature(void);
 178      =2  void Set_Address(void);
 179      =2  void Get_Descriptor(void);
 180      =2  void Get_Configuration(void);
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 15  

 181      =2  void Set_Configuration(void);
 182      =2  void Get_Interface(void);
 183      =2  void Set_Interface(void);
 184      =2  
 185      =2  // MSD Specific Requests
 186      =2  // void Reset_Msd(void);
 187      =2  // void Get_MaxLUN(void);
 188      =2  
 189      =2  // Initialization Routines
 190      =2  void Sys_Clk_Init(void);                      // Initialize the sy
             -stem clock(depends on Full/Low speed)
 191      =2  void Port_Init(void);                        // Configure ports fo
             -r this specific application
 192      =2  void USB0_Init(void);                        // Configure USB core
             - for either Full/Low speed
 193      =2  void Timer_Init(void);                       // Start timer 2 for 
             -use by ADC and to check switches
 194      =2  void Adc_Init(void);                         // Configure ADC for 
             -continuous conversion, low-power mode
 195      =2  
 196      =2  // Other Routines
 197      =2  void Timer2_ISR(void);                       // Called when Timer 
             -2 overflows, see if switches are pressed
 198      =2  void Adc_ConvComple_ISR(void);               // When a conversion 
             -completes, switch ADC multiplexor
 199      =2  void USB_ISR(void);                          // Called to determin
             -e type of USB interrupt
 200      =2  void Fifo_ReadC(BYTE, unsigned int, BYTE *) ;
 201      =2  extern void Fifo_Read (BYTE, unsigned int, BYTE *) ; // Used for m
             -ultiple byte reads of Endpoint fifos
 202      =2  extern void Fifo_Write (BYTE, unsigned int, BYTE *) reentrant;// U
             -sed for multiple byte writes of Endpoint fifos
 203      =2  void Force_Stall(void);                      // Forces a procedura
             -l stall on Endpoint 0
 204      =2  void Delay(void);                            // Approximately 80 u
             -s/1 ms on Full/Low Speed
 205      =2  
 206      =2  void USB_In(BYTE* ptr_buf,unsigned count);
 207      =2  
 208      =2  void USB_Bulk_Init(void);
 209      =2  
 210      =2  extern unsigned xdata Out_Count;
 211      =2  extern BYTE xdata Out_Packet[EP2_PACKET_SIZE];
 212      =2  extern BYTE xdata In_count;
 213      =2  extern BYTE xdata In_Packet[EP1_PACKET_SIZE];
 214      =2  //extern BYTE xdata In_Overrun;
 215      =2  
 216      =2  #endif      /* _USB_MAIN_H_ */
 217      =2  
  35      =1  
  36      =1  //----------------------------------------------------------------
             --------------
  37      =1  // Structure Prototypes
  38      =1  //----------------------------------------------------------------
             --------------
  39      =1  
  40      =1  typedef struct {
  41      =1          unsigned cluster_start;
  42      =1          unsigned long sector_current;
  43      =1          unsigned sector_direntry;
  44      =1          unsigned offset_direntry;
  45      =1          BYTE attrib;
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 16  

  46      =1          DWORD pos;
  47      =1          DWORD size;
  48      =1          BYTE isopen;
  49      =1  } FILE;
  50      =1  
  51      =1  typedef WORD UNI; // Unicode character type
  52      =1  
  53      =1  typedef union {
  54      =1  
  55      =1  struct {
  56      =1          BYTE seq_nr; // Bit 0..4 = seqnr, ascending, start with 1. Bit 6:
             - final part of name
  57      =1          UNI unicode1_5[5]; // Little endian
  58      =1          BYTE attrib; // 0x0F
  59      =1          BYTE type; // 0x00
  60      =1          BYTE checksum; // int i;BYTE sum=0;for(i=0;i<11;i++) { sum=(sum>>
             -1)+((sum&1)<<7);sum+=name[i]; }
  61      =1          UNI unicode6_11[6];
  62      =1          unsigned starting_cluster; // 0x0000
  63      =1          UNI unicode12_13[2];
  64      =1  } lfn;
  65      =1  
  66      =1  struct {
  67      =1          char name[11];
  68      =1          BYTE attrib;
  69      =1          BYTE reserved[10];
  70      =1          WORD time; // 5/6/5 bits for h/m/2*sec
  71      =1          WORD date; // 7/4/5 bits for y-1980/m/d
  72      =1          unsigned starting_cluster; // 0 for empty file
  73      =1          DWORD filesize;
  74      =1  } sfn;
  75      =1  
  76      =1  } dir_entry;
  77      =1  
  78      =1  typedef struct {
  79      =1          unsigned long block;
  80      =1          unsigned offset;
  81      =1          BYTE findempty;
  82      =1          dir_entry* direntry;
  83      =1  } find_info;
  84      =1  
  85      =1  
  86      =1  
  87      =1  #define ATTRIB_READ_ONLY        0x01
  88      =1  #define ATTRIB_HIDDEN           0x02
  89      =1  #define ATTRIB_SYSTEM           0x04
  90      =1  #define ATTRIB_LABEL            0x08
  91      =1  #define ATTRIB_SUBDIR           0x10
  92      =1  #define ATTRIB_ARCHIVE          0x20
  93      =1  
  94      =1  #define SEEK_CUR 0
  95      =1  #define SEEK_END 1
  96      =1  #define SEEK_SET 2
  97      =1  
  98      =1  //----------------------------------------------------------------
             --------------
  99      =1  // Function Prototypes
 100      =1  //----------------------------------------------------------------
             --------------
 101      =1  
 102      =1  int fopen(FILE* f,char* filename,char* mode);
 103      =1  int fseek(FILE* f,long offset,int origin);
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 17  

 104      =1  DWORD ftell(FILE* f);
 105      =1  int feof(FILE* f);
 106      =1  unsigned fread(FILE* f,BYTE* buffer,unsigned count);
 107      =1  unsigned fwrite(FILE* f,BYTE* buffer,unsigned count);
 108      =1  void fclose(FILE* f);
 109      =1  int fexists(char* filename);
 110      =1  int fdelete(char* filename);
 111      =1  BYTE findfirst(find_info* findinfo,BYTE empty);
 112      =1  BYTE findnext(find_info* findinfo);
 113      =1  
 114      =1  
 115      =1  //----------------------------------------------------------------
             ----------------
 116      =1  // Functions only for F340 device
 117      =1  //----------------------------------------------------------------
             ----------------
 118      =1  
 119      =1  #ifdef __F340_VER__
 120      =1  
 121      =1  #define DIRECTORY_EXISTS                1
 122      =1  #define NO_PLACE_FOR_DIRECTORY  2
 123      =1  #define DIRNAME_LENGTH_ERROR    3
 124      =1  
 125      =1  //----------------------------------------------------------------
             --------------
 126      =1  // Function Prototypes
 127      =1  //----------------------------------------------------------------
             --------------
 128      =1  
 129      =1  void FileSys_Init();
 130      =1  BYTE chngdir(char* dirname);
 131      =1  BYTE mkdir(char* dir_name);
 132      =1  BYTE rmdir(char* dir_name) ;
 133      =1  void write_current_dir();
 134      =1  
 135      =1  //----------------------------------------------------------------
             --------------
 136      =1  // Structure Prototypes
 137      =1  //----------------------------------------------------------------
             --------------
 138      =1  
 139      =1  typedef struct 
 140      =1  { 
 141      =1          unsigned long block;
 142      =1          unsigned offset;
 143      =1  }
 144      =1  PREV_SEARCH;
 145      =1  
 146      =1  
 147      =1  #endif
 148      =1  #endif
  37          #include "F34x_MSD_Sect_Serv.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Sect_Serv.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 18  

   9      =1  // Header file with function prototypes relevant to F34x_Sect_Serv
             -.c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000054
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef _SECT_SERV_H_
  32      =1  #define _SECT_SERV_H_
  33      =1  
  34      =1  #include "F34x_MSD_USB_Main.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_USB_Main.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Main header file for USB firmware. Includes function prototypes
             -,
  10      =2  // standard constants, and configuration constants.//
  11      =2  //
  12      =2  // FID:            34X000063
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -No changes; incremented revision number to match project re
             -vision
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  // 11/22/02 - DM: 1. Updated function prototypes and added constan
             -ts
  27      =2  //                to F34x_USB_Main.h with sample interrupt firmwar
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 19  

             -e.
  28      =2  
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  // Header File Preprocessor Directive
  31      =2  //----------------------------------------------------------------
             --------------
  32      =2  
  33      =2  #ifndef _USB_MAIN_H_
           =2 #define _USB_MAIN_H_
           =2 
           =2 #include "F34x_MSD_Definitions.h"
           =2 //#define _USB_LOW_SPEED_                      // Change this comm
             -ent to make Full/Low speed
           =2 
           =2 #define SYSCLK                   12000000    // SYSCLK frequency i
             -n Hz
           =2 
           =2 // USB clock selections (SFR CLKSEL)
           =2 #define USB_4X_CLOCK             0x00        // Select 4x clock mu
             -ltiplier, for USB Full Speed
           =2 #define USB_INT_OSC_DIV_2        0x10        // See Data Sheet sec
             -tion 13. Oscillators
           =2 #define USB_EXT_OSC              0x20
           =2 #define USB_EXT_OSC_DIV_2        0x30
           =2 #define USB_EXT_OSC_DIV_3        0x40
           =2 #define USB_EXT_OSC_DIV_4        0x50
           =2 
           =2 // System clock selections (SFR CLKSEL)
           =2 #define SYS_INT_OSC              0x00        // Select to use inte
             -rnal oscillator
           =2 #define SYS_4X_MUL               0x03        // Select to use inte
             -rnal oscillator
           =2 #define SYS_EXT_OSC              0x01        // Select to use an e
             -xternal oscillator
           =2 #define SYS_4X_DIV_2             0x02
           =2 
           =2 // BYTE type definition
           =2 #ifndef _BYTE_DEF_
           =2 #define _BYTE_DEF_
           =2 typedef unsigned char BYTE;
           =2 #endif   /* _BYTE_DEF_ */
           =2 
           =2 // WORD type definition, for KEIL Compiler
           =2 #ifndef _WORD_DEF_                           // Compiler Specific,
             - written for Little Endian
           =2 #define _WORD_DEF_
           =2 typedef union {unsigned int i; unsigned char c[2];} WORD;
           =2 #define LSB 1                                // All words sent to 
             -and received from the host are
           =2 #define MSB 0                                // little endian, thi
             -s is switched by software when
           =2                                              // neccessary.  These
             - sections of code have been marked
           =2                                                                                          // with "Compiler Specific" as above for easier modifi
             -cation
           =2 #endif   /* _WORD_DEF_ */
           =2 
           =2 // DWORD type definition
           =2 #ifndef _DWORD_DEF_
           =2 #define _DWORD_DEF_
           =2 typedef unsigned long DWORD;
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 20  

           =2 #endif /* _DWORD_DEF_ */
           =2 
           =2 extern volatile DWORD xdata tickcount;
           =2 
           =2 // Define Endpoint Packet Sizes
           =2 #ifdef _USB_LOW_SPEED_
           =2 #define  EP0_PACKET_SIZE         0x40        // This value can be 
             -8,16,32,64 depending on device speed, see USB spec
           =2 #else
           =2 #define  EP0_PACKET_SIZE         0x40
           =2 #endif /* _USB_LOW_SPEED_ */ 
           =2 
           =2 #define  EP1_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type  
           =2 #define  EP1_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP1_PACKET_SIZE
           =2 #define  EP2_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type
           =2 #define  EP2_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP2_PACKET_SIZE
           =2 
           =2 // Standard Descriptor Types
           =2 #define  DSC_DEVICE              0x01        // Device Descriptor
           =2 #define  DSC_CONFIG              0x02        // Configuration Desc
             -riptor
           =2 #define  DSC_STRING              0x03        // String Descriptor
           =2 #define  DSC_INTERFACE           0x04        // Interface Descript
             -or
           =2 #define  DSC_ENDPOINT            0x05        // Endpoint Descripto
             -r
           =2 
           =2 // HID Descriptor Types
           =2 #define DSC_HID                                 0x21            // HID Class Descriptor
           =2 #define DSC_HID_REPORT                  0x22            // HID Report Descriptor
           =2 
           =2 // Standard Request Codes
           =2 #define  GET_STATUS             0x00        // Code for Get Status
           =2 #define  CLEAR_FEATURE          0x01        // Code for Clear Feat
             -ure
           =2 #define  SET_FEATURE            0x03        // Code for Set Featur
             -e
           =2 #define  SET_ADDRESS            0x05        // Code for Set Addres
             -s
           =2 #define  GET_DESCRIPTOR         0x06        // Code for Get Descri
             -ptor
           =2 #define  SET_DESCRIPTOR         0x07        // Code for Set Descri
             -ptor(not used)
           =2 #define  GET_CONFIGURATION      0x08        // Code for Get Config
             -uration
           =2 #define  SET_CONFIGURATION      0x09        // Code for Set Config
             -uration
           =2 #define  GET_INTERFACE          0x0A        // Code for Get Interf
             -ace
           =2 #define  SET_INTERFACE          0x0B        // Code for Set Interf
             -ace
           =2 #define  SYNCH_FRAME            0x0C        // Code for Synch Fram
             -e(not used)
           =2 #define  MSD_RESET                              0xFF            // Mass-storage device Reset
           =2 #define  MSD_GET_MAX_LUN                0xFE            // Mass-storage device Get Max LU
             -N
           =2 
           =2 // HID Request Codes
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 21  

           =2 #define GET_REPORT                              0x01            // Code for Get Report
           =2 #define GET_IDLE                                0x02            // Code for Get Idle
           =2 #define GET_PROTOCOL                    0x03            // Code for Get Protocol
           =2 #define SET_REPORT                              0x09            // Code for Set Report
           =2 #define SET_IDLE                                0x0A            // Code for Set Idle
           =2 #define SET_PROTOCOL                    0x0B            // Code for Set Protocol
           =2 
           =2 // Define device states
           =2 #define  DEV_ATTACHED            0x00        // Device is in Attac
             -hed State
           =2 #define  DEV_POWERED             0x01        // Device is in Power
             -ed State
           =2 #define  DEV_DEFAULT             0x02        // Device is in Defau
             -lt State
           =2 #define  DEV_ADDRESS             0x03        // Device is in Addre
             -ssed State
           =2 #define  DEV_CONFIGURED          0x04        // Device is in Confi
             -gured State
           =2 #define  DEV_SUSPENDED           0x05        // Device is in Suspe
             -nded State
           =2 
           =2 // Define bmRequestType bitmaps
           =2 #define  IN_DEVICE               0x00        // Request made to de
             -vice, direction is IN 
           =2 #define  OUT_DEVICE              0x80        // Request made to de
             -vice, direction is OUT
           =2 #define  IN_INTERFACE            0x01        // Request made to in
             -terface, direction is IN
           =2 #define  OUT_INTERFACE           0x81        // Request made to in
             -terface, direction is OUT
           =2 #define  IN_ENDPOINT             0x02        // Request made to en
             -dpoint, direction is IN
           =2 #define  OUT_ENDPOINT            0x82        // Request made to en
             -dpoint, direction is OUT
           =2 
           =2 // Define wIndex bitmaps
           =2 #define  IN_EP1                  0x81        // Index values used 
             -by Set and Clear feature
           =2 #define  OUT_EP1                 0x01        // commands for Endpo
             -int_Halt
           =2 #define  IN_EP2                  0x82
           =2 #ifdef __F326_VER__
           =2 #define  OUT_EP2                                 0x01           
           =2 #else
           =2 #define  OUT_EP2                                 0x01           
           =2 #endif
           =2 
           =2 // Define wValue bitmaps for Standard Feature Selectors
           =2 #define  DEVICE_REMOTE_WAKEUP    0x01        // Remote wakeup feat
             -ure(not used)
           =2 #define  ENDPOINT_HALT           0x00        // Endpoint_Halt feat
             -ure selector
           =2 
           =2 // Define Endpoint States
           =2 #define  EP_IDLE                 0x00        // This signifies End
             -point Idle State
           =2 #define  EP_TX                   0x01        // Endpoint Transmit 
             -State
           =2 #define  EP_RX                   0x02        // Endpoint Receive S
             -tate
           =2 #define  EP_HALT                 0x03        // Endpoint Halt Stat
             -e (return stalls)
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 22  

           =2 #define  EP_STALL                0x04        // Endpoint Stall (se
             -nd procedural stall next status phase)
           =2 #define  EP_ADDRESS              0x05        // Endpoint Address (
             -change FADDR during next status phase)
           =2 
           =2 // Function prototypes
           =2 // USB Routines
           =2 void USB_Resume(void);                       // This routine resum
             -es USB operation
           =2 void USB_Reset(void);                        // Called after USB b
             -us reset
           =2 void Handle_Setup(void);                     // Handle setup packe
             -t on Endpoint 0
           =2 void Handle_In1(BYTE* ptr_buf);                       // Handle in
             - packet on Endpoint 1
           =2 void Handle_Out2(void);                      // Handle out packet 
             -on Endpoint 2
           =2 void USB_Suspend(void);                      // This routine calle
             -d when suspend signalling on bus
           =2 void Out2_Get_Data(BYTE* ptr_buf);                               // Copies from FIFO to ptr_
             -buf, clears FIFO-full flag.
           =2 void Out2_Done(void);                                            // Call this when finished with the d
             -ata
           =2 
           =2 // Standard Requests
           =2 void Get_Status(void);                       // These are called f
             -or each specific standard request
           =2 void Clear_Feature(void);
           =2 void Set_Feature(void);
           =2 void Set_Address(void);
           =2 void Get_Descriptor(void);
           =2 void Get_Configuration(void);
           =2 void Set_Configuration(void);
           =2 void Get_Interface(void);
           =2 void Set_Interface(void);
           =2 
           =2 // MSD Specific Requests
           =2 // void Reset_Msd(void);
           =2 // void Get_MaxLUN(void);
           =2 
           =2 // Initialization Routines
           =2 void Sys_Clk_Init(void);                      // Initialize the sy
             -stem clock(depends on Full/Low speed)
           =2 void Port_Init(void);                        // Configure ports fo
             -r this specific application
           =2 void USB0_Init(void);                        // Configure USB core
             - for either Full/Low speed
           =2 void Timer_Init(void);                       // Start timer 2 for 
             -use by ADC and to check switches
           =2 void Adc_Init(void);                         // Configure ADC for 
             -continuous conversion, low-power mode
           =2 
           =2 // Other Routines
           =2 void Timer2_ISR(void);                       // Called when Timer 
             -2 overflows, see if switches are pressed
           =2 void Adc_ConvComple_ISR(void);               // When a conversion 
             -completes, switch ADC multiplexor
           =2 void USB_ISR(void);                          // Called to determin
             -e type of USB interrupt
           =2 void Fifo_ReadC(BYTE, unsigned int, BYTE *) ;
           =2 extern void Fifo_Read (BYTE, unsigned int, BYTE *) ; // Used for m
             -ultiple byte reads of Endpoint fifos
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 23  

           =2 extern void Fifo_Write (BYTE, unsigned int, BYTE *) reentrant;// U
             -sed for multiple byte writes of Endpoint fifos
           =2 void Force_Stall(void);                      // Forces a procedura
             -l stall on Endpoint 0
           =2 void Delay(void);                            // Approximately 80 u
             -s/1 ms on Full/Low Speed
           =2 
           =2 void USB_In(BYTE* ptr_buf,unsigned count);
           =2 
           =2 void USB_Bulk_Init(void);
           =2 
           =2 extern unsigned xdata Out_Count;
           =2 extern BYTE xdata Out_Packet[EP2_PACKET_SIZE];
           =2 extern BYTE xdata In_count;
           =2 extern BYTE xdata In_Packet[EP1_PACKET_SIZE];
           =2 //extern BYTE xdata In_Overrun;
           =2 
           =2 #endif      /* _USB_MAIN_H_ */
 217      =2  
  35      =1  #include "F34x_MSD_Physical_Settings.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_Physical_Settings.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Header file with common definitions
  10      =2  //
  11      =2  //
  12      =2  // FID:            34X000048
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  
  27      =2  //----------------------------------------------------------------
             --------------
  28      =2  // Header File Preprocessor Directive
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  
  31      =2  #ifndef __PHYSICAL_SETTINGS_H__
  32      =2  #define __PHYSICAL_SETTINGS_H__
  33      =2  
  34      =2  #include "c8051f340.h"
   1      =3  //----------------------------------------------------------------
             --------------
   2      =3  // C8051F340.h
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 24  

   3      =3  //----------------------------------------------------------------
             --------------
   4      =3  // Copyright 2005 Silicon Laboratories, Inc.
   5      =3  // http://www.silabs.com
   6      =3  //
   7      =3  // Program Description:
   8      =3  //
   9      =3  // Register/bit definitions for the C8051F34x family.
  10      =3  //
  11      =3  //
  12      =3  // FID:            34X000002
  13      =3  // Target:         C8051F340, 'F341, 'F342, 'F343, 'F344, 'F345, '
             -F346, 'F347
  14      =3  // Tool chain:     Keil
  15      =3  // Command Line:   None
  16      =3  //
  17      =3  // Release 1.0
  18      =3  //    -Initial Release (GP\PKC)
  19      =3  //    -13 DEC 2005
  20      =3  
  21      =3  //----------------------------------------------------------------
             --------------
  22      =3  // Header File Preprocessor Directive
  23      =3  //----------------------------------------------------------------
             --------------
  24      =3  
  25      =3  #ifndef C8051F340_H
           =3 #define C8051F340_H
           =3 
           =3 //----------------------------------------------------------------
             --------------
           =3 // Byte Registers
           =3 //----------------------------------------------------------------
             --------------
           =3 
           =3 sfr  P0           =  0x80;             // Port 0 Latch
           =3 sfr  SP           =  0x81;             // Stack Pointer
           =3 sfr  DPL          =  0x82;             // Data Pointer Low
           =3 sfr  DPH          =  0x83;             // Data Pointer High
           =3 sfr  EMI0TC       =  0x84;             // EMIF Timing
           =3 sfr  EMI0CF       =  0x85;             // EMIF Configuration
           =3 sfr  OSCLCN       =  0x86;             // Internal Low-Freq Oscill
             -ator Control
           =3 sfr  PCON         =  0x87;             // Power Control
           =3 sfr  TCON         =  0x88;             // Timer/Counter Control
           =3 sfr  TMOD         =  0x89;             // Timer/Counter Mode
           =3 sfr  TL0          =  0x8A;             // Timer/Counter 0 Low
           =3 sfr  TL1          =  0x8B;             // Timer/Counter 1 Low
           =3 sfr  TH0          =  0x8C;             // Timer/Counter 0 High
           =3 sfr  TH1          =  0x8D;             // Timer/Counter 1 High
           =3 sfr  CKCON        =  0x8E;             // Clock Control
           =3 sfr  PSCTL        =  0x8F;             // Program Store R/W Contro
             -l
           =3 sfr  P1           =  0x90;             // Port 1 Latch
           =3 sfr  TMR3CN       =  0x91;             // Timer/Counter 3Control
           =3 sfr  TMR3RLL      =  0x92;             // Timer/Counter 3 Reload L
             -ow
           =3 sfr  TMR3RLH      =  0x93;             // Timer/Counter 3 Reload H
             -igh
           =3 sfr  TMR3L        =  0x94;             // Timer/Counter 3Low
           =3 sfr  TMR3H        =  0x95;             // Timer/Counter 3 High
           =3 sfr  USB0ADR      =  0x96;             // USB0 Indirect Address Re
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 25  

             -gister
           =3 sfr  USB0DAT      =  0x97;             // USB0 Data Register
           =3 sfr  SCON0        =  0x98;             // UART0 Control
           =3 sfr  SBUF0        =  0x99;             // UART0 Data Buffer
           =3 sfr  CPT1CN       =  0x9A;             // Comparator1 Control
           =3 sfr  CPT0CN       =  0x9B;             // Comparator0 Control
           =3 sfr  CPT1MD       =  0x9C;             // Comparator1 Mode Selecti
             -on
           =3 sfr  CPT0MD       =  0x9D;             // Comparator0 Mode Selecti
             -on
           =3 sfr  CPT1MX       =  0x9E;             // Comparator1 MUX Selectio
             -n
           =3 sfr  CPT0MX       =  0x9F;             // Comparator0 MUX Selectio
             -n
           =3 sfr  P2           =  0xA0;             // Port 2 Latch
           =3 sfr  SPI0CFG      =  0xA1;             // SPI Configuration
           =3 sfr  SPI0CKR      =  0xA2;             // SPI Clock Rate Control
           =3 sfr  SPI0DAT      =  0xA3;             // SPI Data
           =3 sfr  P0MDOUT      =  0xA4;             // Port 0 Output Mode Confi
             -guration
           =3 sfr  P1MDOUT      =  0xA5;             // Port 1 Output Mode Confi
             -guration
           =3 sfr  P2MDOUT      =  0xA6;             // Port 2 Output Mode Confi
             -guration
           =3 sfr  P3MDOUT      =  0xA7;             // Port 3 Output Mode Confi
             -guration
           =3 sfr  IE           =  0xA8;             // Interrupt Enable
           =3 sfr  CLKSEL       =  0xA9;             // Clock Select
           =3 sfr  EMI0CN       =  0xAA;             // External Memory Interfac
             -e Control
           =3 sfr  SBCON1       =  0xAC;             // UART1 Baud Rate Generato
             -r Control
           =3 sfr  P4MDOUT      =  0xAE;             // Port 4 Output Mode Confi
             -guration
           =3 sfr  PFE0CN       =  0xAF;             // Prefetch Engine Control
           =3 sfr  P3           =  0xB0;             // Port 3 Latch
           =3 sfr  OSCXCN       =  0xB1;             // External Oscillator Cont
             -rol
           =3 sfr  OSCICN       =  0xB2;             // Internal Oscillator Cont
             -rol
           =3 sfr  OSCICL       =  0xB3;             // Internal Oscillator Cali
             -bration
           =3 sfr  SBRLL1       =  0xB4;             // UART1 Baud Rate Generato
             -r Low
           =3 sfr  SBRLH1       =  0xB5;             // UART1 Baud Rate Generato
             -r High
           =3 sfr  FLSCL        =  0xB6;             // Flash Scale
           =3 sfr  FLKEY        =  0xB7;             // Flash Lock and Key
           =3 sfr  IP           =  0xB8;             // Interrupt Priority
           =3 sfr  CLKMUL       =  0xB9;             // Clock Multiplier
           =3 sfr  AMX0N        =  0xBA;             // AMUX0 Negative Channel S
             -elect
           =3 sfr  AMX0P        =  0xBB;             // AMUX0 Positive Channel S
             -elect
           =3 sfr  ADC0CF       =  0xBC;             // ADC0 Configuration
           =3 sfr  ADC0L        =  0xBD;             // ADC0 Low
           =3 sfr  ADC0H        =  0xBE;             // ADC0 High
           =3 sfr  SMB0CN       =  0xC0;             // SMBus Control
           =3 sfr  SMB0CF       =  0xC1;             // SMBus Configuration
           =3 sfr  SMB0DAT      =  0xC2;             // SMBus Data
           =3 sfr  ADC0GTL      =  0xC3;             // ADC0 Greater-Than Compar
             -e Low
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 26  

           =3 sfr  ADC0GTH      =  0xC4;             // ADC0 Greater-Than Compar
             -e High
           =3 sfr  ADC0LTL      =  0xC5;             // ADC0 Less-Than Compare W
             -ord Low
           =3 sfr  ADC0LTH      =  0xC6;             // ADC0 Less-Than Compare W
             -ord High
           =3 sfr  P4           =  0xC7;             // Port 4 Latch
           =3 sfr  TMR2CN       =  0xC8;             // Timer/Counter 2 Control
           =3 sfr  REG0CN       =  0xC9;             // Voltage Regulator Contro
             -l
           =3 sfr  TMR2RLL      =  0xCA;             // Timer/Counter 2 Reload L
             -ow
           =3 sfr  TMR2RLH      =  0xCB;             // Timer/Counter 2 Reload H
             -igh
           =3 sfr  TMR2L        =  0xCC;             // Timer/Counter 2 Low
           =3 sfr  TMR2H        =  0xCD;             // Timer/Counter 2 High
           =3 sfr  PSW          =  0xD0;             // Program Status Word
           =3 sfr  REF0CN       =  0xD1;             // Voltage Reference Contro
             -l
           =3 sfr  SCON1        =  0xD2;             // UART1 Control
           =3 sfr  SBUF1        =  0xD3;             // UART1 Data Buffer
           =3 sfr  P0SKIP       =  0xD4;             // Port 0 Skip
           =3 sfr  P1SKIP       =  0xD5;             // Port 1 Skip
           =3 sfr  P2SKIP       =  0xD6;             // Port 2 Skip
           =3 sfr  USB0XCN      =  0xD7;             // USB0 Transceiver Control
           =3 sfr  PCA0CN       =  0xD8;             // PCA0 Control
           =3 sfr  PCA0MD       =  0xD9;             // PCA0 Mode
           =3 sfr  PCA0CPM0     =  0xDA;             // PCA0 Module 0 Mode Regis
             -ter
           =3 sfr  PCA0CPM1     =  0xDB;             // PCA0 Module 1 Mode Regis
             -ter
           =3 sfr  PCA0CPM2     =  0xDC;             // PCA0 Module 2 Mode Regis
             -ter
           =3 sfr  PCA0CPM3     =  0xDD;             // PCA0 Module 3 Mode Regis
             -ter
           =3 sfr  PCA0CPM4     =  0xDE;             // PCA0 Module 4 Mode Regis
             -ter
           =3 sfr  P3SKIP       =  0xDF;             // Port 3 Skip
           =3 sfr  ACC          =  0xE0;             // Accumulator
           =3 sfr  XBR0         =  0xE1;             // Port I/O Crossbar Contro
             -l 0
           =3 sfr  XBR1         =  0xE2;             // Port I/O Crossbar Contro
             -l 1
           =3 sfr  XBR2         =  0xE3;             // Port I/O Crossbar Contro
             -l 2
           =3 sfr  IT01CF       =  0xE4;             // INT0/INT1 Configuration
           =3 sfr  SMOD1        =  0xE5;             // UART1 Mode
           =3 sfr  EIE1         =  0xE6;             // Extended Interrupt Enabl
             -e 1
           =3 sfr  EIE2         =  0xE7;             // Extended Interrupt Enabl
             -e 2
           =3 sfr  ADC0CN       =  0xE8;             // ADC0 Control
           =3 sfr  PCA0CPL1     =  0xE9;             // PCA0 Capture 1 Low
           =3 sfr  PCA0CPH1     =  0xEA;             // PCA0 Capture 1 High
           =3 sfr  PCA0CPL2     =  0xEB;             // PCA0 Capture 2 Low
           =3 sfr  PCA0CPH2     =  0xEC;             // PCA0 Capture 2 High
           =3 sfr  PCA0CPL3     =  0xED;             // PCA0 Capture 3 Low
           =3 sfr  PCA0CPH3     =  0xEE;             // PCA0 Capture 3 High
           =3 sfr  RSTSRC       =  0xEF;             // Reset Source Configurati
             -on/Status
           =3 sfr  B            =  0xF0;             // B Register
           =3 sfr  P0MDIN       =  0xF1;             // Port 0 Input Mode Config
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 27  

             -uration
           =3 sfr  P1MDIN       =  0xF2;             // Port 1 Input Mode Config
             -uration
           =3 sfr  P2MDIN       =  0xF3;             // Port 2 Input Mode Config
             -uration
           =3 sfr  P3MDIN       =  0xF4;             // Port 3 Input Mode Config
             -uration
           =3 sfr  P4MDIN       =  0xF5;             // Port 4 Input Mode Config
             -uration
           =3 sfr  EIP1         =  0xF6;             // Extended Interrupt Prior
             -ity 1
           =3 sfr  EIP2         =  0xF7;             // Extended Interrupt Prior
             -ity 2
           =3 sfr  SPI0CN       =  0xF8;             // SPI0 Control
           =3 sfr  PCA0L        =  0xF9;             // PCA0 Counter Low
           =3 sfr  PCA0H        =  0xFA;             // PCA0 Counter High
           =3 sfr  PCA0CPL0     =  0xFB;             // PCA0 Capture 0 Low
           =3 sfr  PCA0CPH0     =  0xFC;             // PCA0 Capture 0 High
           =3 sfr  PCA0CPL4     =  0xFD;             // PCA0 Capture 4 Low
           =3 sfr  PCA0CPH4     =  0xFE;             // PCA0 Capture 4 High
           =3 sfr  VDM0CN       =  0xFF;             // VDD Monitor Control
           =3 
           =3 
           =3 //----------------------------------------------------------------
             --------------
           =3 // Bit Definitions
           =3 //----------------------------------------------------------------
             --------------
           =3 
           =3 // TCON 0x88
           =3 sbit TF1     = 0x8F;                   // Timer1 overflow flag
           =3 sbit TR1     = 0x8E;                   // Timer1 on/off control
           =3 sbit TF0     = 0x8D;                   // Timer0 overflow flag
           =3 sbit TR0     = 0x8C;                   // Timer0 on/off control
           =3 sbit IE1     = 0x8B;                   // Ext interrupt 1 edge fla
             -g
           =3 sbit IT1     = 0x8A;                   // Ext interrupt 1 type
           =3 sbit IE0     = 0x89;                   // Ext interrupt 0 edge fla
             -g
           =3 sbit IT0     = 0x88;                   // Ext interrupt 0 type
           =3 
           =3 // SCON0 0x98
           =3 sbit S0MODE  = 0x9F;                   // Serial mode control bit 
             -0
           =3                                        // Bit6 UNUSED
           =3 sbit MCE0    = 0x9D;                   // Multiprocessor communica
             -tion enable
           =3 sbit REN0    = 0x9C;                   // Receive enable
           =3 sbit TB80    = 0x9B;                   // Transmit bit 8
           =3 sbit RB80    = 0x9A;                   // Receive bit 8
           =3 sbit TI0     = 0x99;                   // Transmit interrupt flag
           =3 sbit RI0     = 0x98;                   // Receive interrupt flag
           =3 
           =3 // IE 0xA8
           =3 sbit EA      = 0xAF;                   // Global interrupt enable
           =3 sbit ESPI0   = 0xAE;                   // SPI0 interrupt enable
           =3 sbit ET2     = 0xAD;                   // Timer2 interrupt enable
           =3 sbit ES0     = 0xAC;                   // UART0 interrupt enable
           =3 sbit ET1     = 0xAB;                   // Timer1 interrupt enable
           =3 sbit EX1     = 0xAA;                   // External interrupt 1 ena
             -ble
           =3 sbit ET0     = 0xA9;                   // Timer0 interrupt enable
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 28  

           =3 sbit EX0     = 0xA8;                   // External interrupt 0 ena
             -ble
           =3 
           =3 // IP 0xB8
           =3                                        // Bit7 UNUSED
           =3 sbit PSPI0   = 0xBE;                   // SPI0 interrupt priority
           =3 sbit PT2     = 0xBD;                   // Timer2 priority
           =3 sbit PS0     = 0xBC;                   // UART0 priority
           =3 sbit PT1     = 0xBB;                   // Timer1 priority
           =3 sbit PX1     = 0xBA;                   // External interrupt 1 pri
             -ority
           =3 sbit PT0     = 0xB9;                   // Timer0 priority
           =3 sbit PX0     = 0xB8;                   // External interrupt 0 pri
             -ority
           =3 
           =3 // SMB0CN 0xC0
           =3 sbit MASTER  = 0xC7;                   // Master/slave indicator
           =3 sbit TXMODE  = 0xC6;                   // Transmit mode indicator
           =3 sbit STA     = 0xC5;                   // Start flag
           =3 sbit STO     = 0xC4;                   // Stop flag
           =3 sbit ACKRQ   = 0xC3;                   // Acknowledge request
           =3 sbit ARBLOST = 0xC2;                   // Arbitration lost indicat
             -or
           =3 sbit ACK     = 0xC1;                   // Acknowledge flag
           =3 sbit SI      = 0xC0;                   // SMBus interrupt flag
           =3 
           =3 // TMR2CN 0xC8
           =3 sbit TF2H    = 0xCF;                   // Timer2 high byte overflo
             -w flag
           =3 sbit TF2L    = 0xCE;                   // Timer2 low byte overflow
             - flag
           =3 sbit TF2LEN  = 0xCD;                   // Timer2 low byte interrup
             -t enable
           =3 sbit T2CE    = 0xCC;                   // Timer2 capture enable
           =3 sbit T2SPLIT = 0xCB;                   // Timer2 split mode enable
           =3 sbit TR2     = 0xCA;                   // Timer2 on/off control
           =3 sbit T2CSS   = 0xC9;                   // Timer 2 Capture Source s
             -elect
           =3 sbit T2XCLK  = 0xC8;                   // Timer2 external clock se
             -lect
           =3 
           =3 // PSW 0xD0
           =3 sbit CY      = 0xD7;                   // Carry flag
           =3 sbit AC      = 0xD6;                   // Auxiliary carry flag
           =3 sbit F0      = 0xD5;                   // User flag 0
           =3 sbit RS1     = 0xD4;                   // Register bank select 1
           =3 sbit RS0     = 0xD3;                   // Register bank select 0
           =3 sbit OV      = 0xD2;                   // Overflow flag
           =3 sbit F1      = 0xD1;                   // User flag 1
           =3 sbit P       = 0xD0;                   // Accumulator parity flag
           =3 
           =3 // PCA0CN 0xD8
           =3 sbit CF      = 0xDF;                   // PCA0 counter overflow fl
             -ag
           =3 sbit CR      = 0xDE;                   // PCA0 counter run control
           =3                                        // Bit5 UNUSED
           =3 sbit CCF4    = 0xDC;                   // PCA0 module4 capture/com
             -pare flag
           =3 sbit CCF3    = 0xDB;                   // PCA0 module3 capture/com
             -pare flag
           =3 sbit CCF2    = 0xDA;                   // PCA0 module2 capture/com
             -pare flag
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 29  

           =3 sbit CCF1    = 0xD9;                   // PCA0 module1 capture/com
             -pare flag
           =3 sbit CCF0    = 0xD8;                   // PCA0 module0 capture/com
             -pare flag
           =3 
           =3 // ADC0CN 0xE8
           =3 sbit AD0EN   = 0xEF;                   // ADC0 enable
           =3 sbit AD0TM   = 0xEE;                   // ADC0 track mode
           =3 sbit AD0INT  = 0xED;                   // ADC0 conversion complete
             - interrupt flag
           =3 sbit AD0BUSY = 0xEC;                   // ADC0 busy flag
           =3 sbit AD0WINT = 0xEB;                   // ADC0 window compare inte
             -rrupt flag
           =3 sbit AD0CM2  = 0xEA;                   // ADC0 conversion mode sel
             -ect 2
           =3 sbit AD0CM1  = 0xE9;                   // ADC0 conversion mode sel
             -ect 1
           =3 sbit AD0CM0  = 0xE8;                   // ADC0 conversion mode sel
             -ect 0
           =3 
           =3 // SPI0CN 0xF8
           =3 sbit SPIF    = 0xFF;                   // SPI0 interrupt flag
           =3 sbit WCOL    = 0xFE;                   // SPI0 write collision fla
             -g
           =3 sbit MODF    = 0xFD;                   // SPI0 mode fault flag
           =3 sbit RXOVRN  = 0xFC;                   // SPI0 rx overrun flag
           =3 sbit NSSMD1  = 0xFB;                   // SPI0 slave select mode 1
           =3 sbit NSSMD0  = 0xFA;                   // SPI0 slave select mode 0
           =3 sbit TXBMT   = 0xF9;                   // SPI0 transmit buffer emp
             -ty
           =3 sbit SPIEN   = 0xF8;                   // SPI0 SPI enable
           =3 
           =3 
           =3 //----------------------------------------------------------------
             --------------
           =3 // Interrupt Priorities
           =3 //----------------------------------------------------------------
             --------------
           =3 
           =3 #define INTERRUPT_INT0             0   // External Interrupt 0
           =3 #define INTERRUPT_TIMER0           1   // Timer0 Overflow
           =3 #define INTERRUPT_INT1             2   // External Interrupt 1
           =3 #define INTERRUPT_TIMER1           3   // Timer1 Overflow
           =3 #define INTERRUPT_UART0            4   // Serial Port 0
           =3 #define INTERRUPT_TIMER2           5   // Timer2 Overflow
           =3 #define INTERRUPT_SPI0             6   // Serial Peripheral Interf
             -ace 0
           =3 #define INTERRUPT_SMBUS0           7   // SMBus0 Interface
           =3 #define INTERRUPT_USB0             8   // USB Interface
           =3 #define INTERRUPT_ADC0_WINDOW      9   // ADC0 Window Comparison
           =3 #define INTERRUPT_ADC0_EOC         10  // ADC0 End Of Conversion
           =3 #define INTERRUPT_PCA0             11  // PCA0 Peripheral
           =3 #define INTERRUPT_COMPARATOR0      12  // Comparator0
           =3 #define INTERRUPT_COMPARATOR1      13  // Comparator1
           =3 #define INTERRUPT_TIMER3           14  // Timer3 Overflow
           =3 #define INTERRUPT_VBUS_LEVEL       15  // VBUS level-triggered int
             -errupt
           =3 #define INTERRUPT_UART1            16  // Serial Port 1
           =3 
           =3 //----------------------------------------------------------------
             --------------
           =3 // Header File PreProcessor Directive
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 30  

           =3 //----------------------------------------------------------------
             --------------
           =3 
           =3 #endif                                 // #define C8051F340_H
 289      =3  
 290      =3  //----------------------------------------------------------------
             --------------
 291      =3  // End Of File
 292      =3  //----------------------------------------------------------------
             --------------
  35      =2  
  36      =2  // Physical size in bytes of one MMC FLASH sector
  37      =2  #define PHYSICAL_BLOCK_SIZE     512   
  38      =2  
  39      =2  sbit SCLK = P0^0;
  40      =2  sbit SCS  = P0^3;
  41      =2  sbit MISO = P0^1;
  42      =2  sbit MOSI = P0^2;
  43      =2  
  44      =2  #endif
  36      =1  //#include "F34x_MMC.h"
  37      =1  
  38      =1  //----------------------------------------------------------------
             --------------
  39      =1  // Structure Prototypes
  40      =1  //----------------------------------------------------------------
             --------------
  41      =1  
  42      =1  // This large bootrecord will be overlayed on the physical block t
             -hat was read.
  43      =1  typedef struct {
  44      =1    BYTE jmp[3];
  45      =1    char oem_name[8];
  46      =1    unsigned bytes_per_sector;
  47      =1    BYTE sectors_per_cluster;
  48      =1    unsigned reserved_sectors;
  49      =1    BYTE fat_copies;
  50      =1    unsigned root_directory_entries;
  51      =1    unsigned number_of_sectors;
  52      =1    BYTE media_descriptor;
  53      =1    unsigned sectors_per_fat;
  54      =1    unsigned sectors_per_track;
  55      =1    unsigned heads;
  56      =1    DWORD hidden_sectors;
  57      =1    DWORD total_sectors;
  58      =1    BYTE drive_number;
  59      =1    BYTE reserved;
  60      =1    BYTE extended_signature;              // 0x29
  61      =1    BYTE serial_number[4];
  62      =1    char volume_label[11];
  63      =1    char filesystem[8];                           // "FAT16   "
  64      =1    BYTE bootstrap[448];
  65      =1    BYTE signature[2];                            // 0x55 0xAA
  66      =1  } bootrecord_large;
  67      =1  
  68      =1  // This small bootrecord will be in memory as long as the program 
             -is running
  69      =1  typedef struct {
  70      =1          BYTE valid;
  71      =1          BYTE fat_copies;
  72      =1          unsigned root_directory_entries;
  73      =1          unsigned number_of_sectors;
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 31  

  74      =1          unsigned sectors_per_fat;
  75      =1          DWORD total_sectors;
  76      =1          unsigned reserved_sectors;
  77      =1          unsigned hidden_sectors;
  78      =1          BYTE sectors_per_cluster;
  79      =1  } bootrecord_small;
  80      =1  
  81      =1  // This is a global 512-byte buffer. 
  82      =1  // Sect_Read() puts data in this buffer.
  83      =1  // Sect_Write() gets data from this buffer.
  84      =1  extern BYTE xdata Scratch[];
  85      =1  
  86      =1  // Changed these functions into #define, to safe code memory.
  87      =1  #define Sect_Block_Size() ((unsigned)PHYSICAL_BLOCK_SIZE)
  88      =1  //#define Sect_Fat1() ((unsigned)1)
  89      =1  
  90      =1  //----------------------------------------------------------------
             --------------
  91      =1  // Function Prototypes
  92      =1  //----------------------------------------------------------------
             --------------
  93      =1  
  94      =1  void Sect_Init(void);                           // Must be called before calling any othe
             -r Sect_Function.
  95      =1  BYTE Sect_Formatted(void);                      // Returns TRUE is MMC card appears 
             -to be correctly formatted.
  96      =1  unsigned long Sect_Sectors(void);       // Returns number of sectors
  97      =1  DWORD Sect_Size(void);                          // Returns number of bytes available on
             - MMC card.
  98      =1  void Sect_Print(void);                          // Dumps some info (size, bootrecord, fi
             -lesystem, etc).
  99      =1  unsigned Sect_Read(unsigned long sector);       // Reads one sector into
             - Scratch buffer.
 100      =1  void Sect_Write(unsigned long sector);  // Write one sector from Sc
             -ratch buffer.
 101      =1  unsigned Sect_Root_Dir(void);           // Returns sector number of root d
             -irectory.
 102      =1  unsigned Sect_Root_Dir_Last(void);      // Last sector number of root d
             -irectory.
 103      =1  unsigned Sect_File_Data(void);          // First sector of file data.
 104      =1  unsigned Sect_Fat1(void);
 105      =1  unsigned Sect_Fat2(void);                       // First sector of 2nd FAT.
 106      =1  void Sect_Write_Multi_Fat(unsigned long sector); // Automatically 
             -handle multiple FAT copies.
 107      =1  void Sect_Validate(void) reentrant;
 108      =1  
 109      =1  #endif
  38          #include "F34x_MSD_Util.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Util.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file for F34x_Util.h. It contains functions and variable
             -s 
  10      =1  // prototypes.
  11      =1  //
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 32  

  12      =1  //
  13      =1  // FID:            34X000068
  14      =1  // Target:         C8051F34x
  15      =1  // Tool chain:     Keil
  16      =1  // Command Line:   See Readme.txt
  17      =1  // Project Name:   F34x_USB_MSD
  18      =1  //
  19      =1  // Release 1.1
  20      =1  //    -All changes by PKC
  21      =1  //    -09 JUN 2006
  22      =1  //    -No changes; incremented revision number to match project re
             -vision
  23      =1  //
  24      =1  // Release 1.0
  25      =1  //    -Initial Release
  26      =1  //
  27      =1  
  28      =1  //----------------------------------------------------------------
             --------------
  29      =1  // Header File Preprocessor Directive
  30      =1  //----------------------------------------------------------------
             --------------
  31      =1  
  32      =1  #ifndef _UTIL_H_
  33      =1  #define _UTIL_H_
  34      =1  
  35      =1  #include "F34x_MSD_USB_Main.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_USB_Main.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Main header file for USB firmware. Includes function prototypes
             -,
  10      =2  // standard constants, and configuration constants.//
  11      =2  //
  12      =2  // FID:            34X000063
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -No changes; incremented revision number to match project re
             -vision
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  // 11/22/02 - DM: 1. Updated function prototypes and added constan
             -ts
  27      =2  //                to F34x_USB_Main.h with sample interrupt firmwar
             -e.
  28      =2  
  29      =2  //----------------------------------------------------------------
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 33  

             --------------
  30      =2  // Header File Preprocessor Directive
  31      =2  //----------------------------------------------------------------
             --------------
  32      =2  
  33      =2  #ifndef _USB_MAIN_H_
           =2 #define _USB_MAIN_H_
           =2 
           =2 #include "F34x_MSD_Definitions.h"
           =2 //#define _USB_LOW_SPEED_                      // Change this comm
             -ent to make Full/Low speed
           =2 
           =2 #define SYSCLK                   12000000    // SYSCLK frequency i
             -n Hz
           =2 
           =2 // USB clock selections (SFR CLKSEL)
           =2 #define USB_4X_CLOCK             0x00        // Select 4x clock mu
             -ltiplier, for USB Full Speed
           =2 #define USB_INT_OSC_DIV_2        0x10        // See Data Sheet sec
             -tion 13. Oscillators
           =2 #define USB_EXT_OSC              0x20
           =2 #define USB_EXT_OSC_DIV_2        0x30
           =2 #define USB_EXT_OSC_DIV_3        0x40
           =2 #define USB_EXT_OSC_DIV_4        0x50
           =2 
           =2 // System clock selections (SFR CLKSEL)
           =2 #define SYS_INT_OSC              0x00        // Select to use inte
             -rnal oscillator
           =2 #define SYS_4X_MUL               0x03        // Select to use inte
             -rnal oscillator
           =2 #define SYS_EXT_OSC              0x01        // Select to use an e
             -xternal oscillator
           =2 #define SYS_4X_DIV_2             0x02
           =2 
           =2 // BYTE type definition
           =2 #ifndef _BYTE_DEF_
           =2 #define _BYTE_DEF_
           =2 typedef unsigned char BYTE;
           =2 #endif   /* _BYTE_DEF_ */
           =2 
           =2 // WORD type definition, for KEIL Compiler
           =2 #ifndef _WORD_DEF_                           // Compiler Specific,
             - written for Little Endian
           =2 #define _WORD_DEF_
           =2 typedef union {unsigned int i; unsigned char c[2];} WORD;
           =2 #define LSB 1                                // All words sent to 
             -and received from the host are
           =2 #define MSB 0                                // little endian, thi
             -s is switched by software when
           =2                                              // neccessary.  These
             - sections of code have been marked
           =2                                                                                          // with "Compiler Specific" as above for easier modifi
             -cation
           =2 #endif   /* _WORD_DEF_ */
           =2 
           =2 // DWORD type definition
           =2 #ifndef _DWORD_DEF_
           =2 #define _DWORD_DEF_
           =2 typedef unsigned long DWORD;
           =2 #endif /* _DWORD_DEF_ */
           =2 
           =2 extern volatile DWORD xdata tickcount;
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 34  

           =2 
           =2 // Define Endpoint Packet Sizes
           =2 #ifdef _USB_LOW_SPEED_
           =2 #define  EP0_PACKET_SIZE         0x40        // This value can be 
             -8,16,32,64 depending on device speed, see USB spec
           =2 #else
           =2 #define  EP0_PACKET_SIZE         0x40
           =2 #endif /* _USB_LOW_SPEED_ */ 
           =2 
           =2 #define  EP1_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type  
           =2 #define  EP1_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP1_PACKET_SIZE
           =2 #define  EP2_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type
           =2 #define  EP2_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP2_PACKET_SIZE
           =2 
           =2 // Standard Descriptor Types
           =2 #define  DSC_DEVICE              0x01        // Device Descriptor
           =2 #define  DSC_CONFIG              0x02        // Configuration Desc
             -riptor
           =2 #define  DSC_STRING              0x03        // String Descriptor
           =2 #define  DSC_INTERFACE           0x04        // Interface Descript
             -or
           =2 #define  DSC_ENDPOINT            0x05        // Endpoint Descripto
             -r
           =2 
           =2 // HID Descriptor Types
           =2 #define DSC_HID                                 0x21            // HID Class Descriptor
           =2 #define DSC_HID_REPORT                  0x22            // HID Report Descriptor
           =2 
           =2 // Standard Request Codes
           =2 #define  GET_STATUS             0x00        // Code for Get Status
           =2 #define  CLEAR_FEATURE          0x01        // Code for Clear Feat
             -ure
           =2 #define  SET_FEATURE            0x03        // Code for Set Featur
             -e
           =2 #define  SET_ADDRESS            0x05        // Code for Set Addres
             -s
           =2 #define  GET_DESCRIPTOR         0x06        // Code for Get Descri
             -ptor
           =2 #define  SET_DESCRIPTOR         0x07        // Code for Set Descri
             -ptor(not used)
           =2 #define  GET_CONFIGURATION      0x08        // Code for Get Config
             -uration
           =2 #define  SET_CONFIGURATION      0x09        // Code for Set Config
             -uration
           =2 #define  GET_INTERFACE          0x0A        // Code for Get Interf
             -ace
           =2 #define  SET_INTERFACE          0x0B        // Code for Set Interf
             -ace
           =2 #define  SYNCH_FRAME            0x0C        // Code for Synch Fram
             -e(not used)
           =2 #define  MSD_RESET                              0xFF            // Mass-storage device Reset
           =2 #define  MSD_GET_MAX_LUN                0xFE            // Mass-storage device Get Max LU
             -N
           =2 
           =2 // HID Request Codes
           =2 #define GET_REPORT                              0x01            // Code for Get Report
           =2 #define GET_IDLE                                0x02            // Code for Get Idle
           =2 #define GET_PROTOCOL                    0x03            // Code for Get Protocol
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 35  

           =2 #define SET_REPORT                              0x09            // Code for Set Report
           =2 #define SET_IDLE                                0x0A            // Code for Set Idle
           =2 #define SET_PROTOCOL                    0x0B            // Code for Set Protocol
           =2 
           =2 // Define device states
           =2 #define  DEV_ATTACHED            0x00        // Device is in Attac
             -hed State
           =2 #define  DEV_POWERED             0x01        // Device is in Power
             -ed State
           =2 #define  DEV_DEFAULT             0x02        // Device is in Defau
             -lt State
           =2 #define  DEV_ADDRESS             0x03        // Device is in Addre
             -ssed State
           =2 #define  DEV_CONFIGURED          0x04        // Device is in Confi
             -gured State
           =2 #define  DEV_SUSPENDED           0x05        // Device is in Suspe
             -nded State
           =2 
           =2 // Define bmRequestType bitmaps
           =2 #define  IN_DEVICE               0x00        // Request made to de
             -vice, direction is IN 
           =2 #define  OUT_DEVICE              0x80        // Request made to de
             -vice, direction is OUT
           =2 #define  IN_INTERFACE            0x01        // Request made to in
             -terface, direction is IN
           =2 #define  OUT_INTERFACE           0x81        // Request made to in
             -terface, direction is OUT
           =2 #define  IN_ENDPOINT             0x02        // Request made to en
             -dpoint, direction is IN
           =2 #define  OUT_ENDPOINT            0x82        // Request made to en
             -dpoint, direction is OUT
           =2 
           =2 // Define wIndex bitmaps
           =2 #define  IN_EP1                  0x81        // Index values used 
             -by Set and Clear feature
           =2 #define  OUT_EP1                 0x01        // commands for Endpo
             -int_Halt
           =2 #define  IN_EP2                  0x82
           =2 #ifdef __F326_VER__
           =2 #define  OUT_EP2                                 0x01           
           =2 #else
           =2 #define  OUT_EP2                                 0x01           
           =2 #endif
           =2 
           =2 // Define wValue bitmaps for Standard Feature Selectors
           =2 #define  DEVICE_REMOTE_WAKEUP    0x01        // Remote wakeup feat
             -ure(not used)
           =2 #define  ENDPOINT_HALT           0x00        // Endpoint_Halt feat
             -ure selector
           =2 
           =2 // Define Endpoint States
           =2 #define  EP_IDLE                 0x00        // This signifies End
             -point Idle State
           =2 #define  EP_TX                   0x01        // Endpoint Transmit 
             -State
           =2 #define  EP_RX                   0x02        // Endpoint Receive S
             -tate
           =2 #define  EP_HALT                 0x03        // Endpoint Halt Stat
             -e (return stalls)
           =2 #define  EP_STALL                0x04        // Endpoint Stall (se
             -nd procedural stall next status phase)
           =2 #define  EP_ADDRESS              0x05        // Endpoint Address (
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 36  

             -change FADDR during next status phase)
           =2 
           =2 // Function prototypes
           =2 // USB Routines
           =2 void USB_Resume(void);                       // This routine resum
             -es USB operation
           =2 void USB_Reset(void);                        // Called after USB b
             -us reset
           =2 void Handle_Setup(void);                     // Handle setup packe
             -t on Endpoint 0
           =2 void Handle_In1(BYTE* ptr_buf);                       // Handle in
             - packet on Endpoint 1
           =2 void Handle_Out2(void);                      // Handle out packet 
             -on Endpoint 2
           =2 void USB_Suspend(void);                      // This routine calle
             -d when suspend signalling on bus
           =2 void Out2_Get_Data(BYTE* ptr_buf);                               // Copies from FIFO to ptr_
             -buf, clears FIFO-full flag.
           =2 void Out2_Done(void);                                            // Call this when finished with the d
             -ata
           =2 
           =2 // Standard Requests
           =2 void Get_Status(void);                       // These are called f
             -or each specific standard request
           =2 void Clear_Feature(void);
           =2 void Set_Feature(void);
           =2 void Set_Address(void);
           =2 void Get_Descriptor(void);
           =2 void Get_Configuration(void);
           =2 void Set_Configuration(void);
           =2 void Get_Interface(void);
           =2 void Set_Interface(void);
           =2 
           =2 // MSD Specific Requests
           =2 // void Reset_Msd(void);
           =2 // void Get_MaxLUN(void);
           =2 
           =2 // Initialization Routines
           =2 void Sys_Clk_Init(void);                      // Initialize the sy
             -stem clock(depends on Full/Low speed)
           =2 void Port_Init(void);                        // Configure ports fo
             -r this specific application
           =2 void USB0_Init(void);                        // Configure USB core
             - for either Full/Low speed
           =2 void Timer_Init(void);                       // Start timer 2 for 
             -use by ADC and to check switches
           =2 void Adc_Init(void);                         // Configure ADC for 
             -continuous conversion, low-power mode
           =2 
           =2 // Other Routines
           =2 void Timer2_ISR(void);                       // Called when Timer 
             -2 overflows, see if switches are pressed
           =2 void Adc_ConvComple_ISR(void);               // When a conversion 
             -completes, switch ADC multiplexor
           =2 void USB_ISR(void);                          // Called to determin
             -e type of USB interrupt
           =2 void Fifo_ReadC(BYTE, unsigned int, BYTE *) ;
           =2 extern void Fifo_Read (BYTE, unsigned int, BYTE *) ; // Used for m
             -ultiple byte reads of Endpoint fifos
           =2 extern void Fifo_Write (BYTE, unsigned int, BYTE *) reentrant;// U
             -sed for multiple byte writes of Endpoint fifos
           =2 void Force_Stall(void);                      // Forces a procedura
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 37  

             -l stall on Endpoint 0
           =2 void Delay(void);                            // Approximately 80 u
             -s/1 ms on Full/Low Speed
           =2 
           =2 void USB_In(BYTE* ptr_buf,unsigned count);
           =2 
           =2 void USB_Bulk_Init(void);
           =2 
           =2 extern unsigned xdata Out_Count;
           =2 extern BYTE xdata Out_Packet[EP2_PACKET_SIZE];
           =2 extern BYTE xdata In_count;
           =2 extern BYTE xdata In_Packet[EP1_PACKET_SIZE];
           =2 //extern BYTE xdata In_Overrun;
           =2 
           =2 #endif      /* _USB_MAIN_H_ */
 217      =2  
  36      =1  
  37      =1  //----------------------------------------------------------------
             --------------
  38      =1  // Function Prototypes
  39      =1  //----------------------------------------------------------------
             --------------
  40      =1  
  41      =1  extern DWORD htonl(DWORD d);
  42      =1  extern unsigned htons(unsigned w);
  43      =1  #define ntohs htons
  44      =1  #define ntohl htonl
  45      =1  
  46      =1  //----------------------------------------------------------------
             --------------
  47      =1  // Variable Prototype
  48      =1  //----------------------------------------------------------------
             --------------
  49      =1  
  50      =1  char* Str_Token(char* str);
  51      =1  
  52      =1  //----------------------------------------------------------------
             --------------
  53      =1  // Macros Prototypes
  54      =1  //----------------------------------------------------------------
             --------------
  55      =1  
  56      =1  #define min(a,b) (((a)<(b))?(a):(b))
  57      =1  #define max(a,b) (((a)>(b))?(a):(b))
  58      =1  
  59      =1  #define msb(x) (((x)>>8)&0x000000FFul)
  60      =1  #define lsb(x) ((x)&0x000000FFul)
  61      =1  
  62      =1  #endif
  39          #include <string.h>
   1      =1  /*----------------------------------------------------------------
             -----------
   2      =1  STRING.H
   3      =1  
   4      =1  String functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, In
             -c.
   6      =1  All rights reserved.
   7      =1  ------------------------------------------------------------------
             ---------*/
   8      =1  
   9      =1  #ifndef __STRING_H__
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 38  

  10      =1  #define __STRING_H__
  11      =1  
  12      =1  #ifndef _SIZE_T
  13      =1   #define _SIZE_T
  14      =1   typedef unsigned int size_t;
  15      =1  #endif
  16      =1  
  17      =1  #ifndef NULL
  18      =1   #define NULL ((void *) 0L)
  19      =1  #endif
  20      =1  
  21      =1  #pragma SAVE
  22      =1  #pragma REGPARMS
  23      =1  extern char *strcat (char *s1, char *s2);
  24      =1  extern char *strncat (char *s1, char *s2, int n);
  25      =1  
  26      =1  extern char strcmp (char *s1, char *s2);
  27      =1  extern char strncmp (char *s1, char *s2, int n);
  28      =1  
  29      =1  extern char *strcpy (char *s1, char *s2);
  30      =1  extern char *strncpy (char *s1, char *s2, int n);
  31      =1  
  32      =1  extern int strlen (char *);
  33      =1  
  34      =1  extern char *strchr (const char *s, char c);
  35      =1  extern int strpos (const char *s, char c);
  36      =1  extern char *strrchr (const char *s, char c);
  37      =1  extern int strrpos (const char *s, char c);
  38      =1  
  39      =1  extern int strspn (char *s, char *set);
  40      =1  extern int strcspn (char *s, char *set);
  41      =1  extern char *strpbrk (char *s, char *set);
  42      =1  extern char *strrpbrk (char *s, char *set);
  43      =1  extern char *strstr  (char *s, char *sub);
  44      =1  extern char *strtok  (char *str, const char *set);
  45      =1  
  46      =1  extern char memcmp (void *s1, void *s2, int n);
  47      =1  extern void *memcpy (void *s1, void *s2, int n);
  48      =1  extern void *memchr (void *s, char val, int n);
  49      =1  extern void *memccpy (void *s1, void *s2, char val, int n);
  50      =1  extern void *memmove (void *s1, void *s2, int n);
  51      =1  extern void *memset  (void *s, char val, int n);
  52      =1  #pragma RESTORE
  53      =1  
  54      =1  #endif
  40          #include <stdio.h>
   1      =1  /*----------------------------------------------------------------
             -----------
   2      =1  STDIO.H
   3      =1  
   4      =1  Prototypes for standard I/O functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, In
             -c.
   6      =1  All rights reserved.
   7      =1  ------------------------------------------------------------------
             ---------*/
   8      =1  
   9      =1  #ifndef __STDIO_H__
  10      =1  #define __STDIO_H__
  11      =1  
  12      =1  #ifndef EOF
  13      =1   #define EOF -1
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 39  

  14      =1  #endif
  15      =1  
  16      =1  #ifndef NULL
           =1  #define NULL ((void *) 0)
           =1 #endif
  19      =1  
  20      =1  #ifndef _SIZE_T
           =1  #define _SIZE_T
           =1  typedef unsigned int size_t;
           =1 #endif
  24      =1  
  25      =1  #pragma SAVE
  26      =1  #pragma REGPARMS
  27      =1  extern char _getkey (void);
  28      =1  extern char getchar (void);
  29      =1  extern char ungetchar (char);
  30      =1  extern char putchar (char);
  31      =1  extern int printf   (const char *, ...);
  32      =1  extern int sprintf  (char *, const char *, ...);
  33      =1  extern int vprintf  (const char *, char *);
  34      =1  extern int vsprintf (char *, const char *, char *);
  35      =1  extern char *gets (char *, int n);
  36      =1  extern int scanf (const char *, ...);
  37      =1  extern int sscanf (char *, const char *, ...);
  38      =1  extern int puts (const char *);
  39      =1  
  40      =1  #pragma RESTORE
  41      =1  
  42      =1  #endif
  43      =1  
  41          #include <ctype.h>
   1      =1  /*----------------------------------------------------------------
             -----------
   2      =1  CTYPE.H
   3      =1  
   4      =1  Prototypes for character functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, In
             -c.
   6      =1  All rights reserved.
   7      =1  ------------------------------------------------------------------
             ---------*/
   8      =1  
   9      =1  #ifndef __CTYPE_H__
  10      =1  #define __CTYPE_H__
  11      =1  
  12      =1  #pragma SAVE
  13      =1  #pragma REGPARMS
  14      =1  extern bit isalpha (unsigned char);
  15      =1  extern bit isalnum (unsigned char);
  16      =1  extern bit iscntrl (unsigned char);
  17      =1  extern bit isdigit (unsigned char);
  18      =1  extern bit isgraph (unsigned char);
  19      =1  extern bit isprint (unsigned char);
  20      =1  extern bit ispunct (unsigned char);
  21      =1  extern bit islower (unsigned char);
  22      =1  extern bit isupper (unsigned char);
  23      =1  extern bit isspace (unsigned char);
  24      =1  extern bit isxdigit (unsigned char);
  25      =1  extern unsigned char tolower (unsigned char);
  26      =1  extern unsigned char toupper (unsigned char);
  27      =1  extern unsigned char toint (unsigned char);
  28      =1  
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 40  

  29      =1  #define _tolower(c) ( (c)-'A'+'a' )
  30      =1  #define _toupper(c) ( (c)-'a'+'A' )
  31      =1  #define toascii(c)  ( (c) & 0x7F )
  32      =1  #pragma RESTORE
  33      =1  
  34      =1  #endif
  42          
  43          extern bootrecord_small xdata MBR;
  44          void Print_File(FILE *file);
  45          
  46          //----------------------------------------------------------------
             --------------
  47          // file_name_match
  48          //----------------------------------------------------------------
             --------------
  49          //
  50          // Return Value : 1 if they match
  51          // Parameters   : filename - pointer to file name
  52          //                        direntryname - pointer to enterd directory name
  53          //
  54          // Compares the file name and directory name
  55          //----------------------------------------------------------------
             --------------
  56          
  57          static BYTE file_name_match(char* filename,char* direntryname)
  58          {
  59   1        xdata BYTE i,j = filename[0];
  60   1        for(i=0;i<8;i++) {
  61   2          if(direntryname[i] == ' ' && (filename[i] == '\0' || filename[
             -i] == '.')) 
  62   2              {
  63   3                if(!(j == '.' && filename[i] == '.')) 
  64   3                    break;
  65   3              }
  66   2          if(tolower(direntryname[i])!=filename[i]) 
  67   2            return 0;
  68   2        }
  69   1        j = i+1;
  70   1        for(i = 8; i < 11; i++) {
  71   2          if( filename[j] == '\0' && direntryname[i] != ' ') 
  72   2            return 0;
  73   2          if( direntryname[i] == ' ' && (filename[j] == '\0' || filename
             -[j] == '.' 
  74   2              || filename[j-1] == '\0'))
  75   2            break;
  76   2          if(tolower(direntryname[i]) != filename[j]) 
  77   2            return 0;
  78   2          j++;
  79   2        }
  80   1        return 1;
  81   1      }
  82          
  83          
  84          //----------------------------------------------------------------
             ----------------
  85          // Functions only for F340 device
  86          //----------------------------------------------------------------
             ----------------
  87          
  88          
  89          #ifdef __F340_VER__
  90          
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 41  

  91          xdata unsigned char Path_Name[200];
  92          xdata unsigned long Current_Dir_Block;
  93          //xdata char current_dir_name[40];
  94          static find_info xdata findinfo; // Shared find_info for fopen() a
             -nd fdelete() 
  95          static unsigned fat_chain_alloc(unsigned from,unsigned nr) ;
  96          static unsigned long fat_chain(unsigned long from,unsigned nr) ;
  97          static void fat_chain_free(unsigned from);
  98          
  99          //----------------------------------------------------------------
             --------------
 100          // write_current_dir
 101          //----------------------------------------------------------------
             --------------
 102          //
 103          // Return Value : None
 104          // Parameters   : None
 105          //
 106          // This function printout current directory name
 107          //----------------------------------------------------------------
             --------------
 108          void write_current_dir()
 109          {
 110   1              printf("%s",Path_Name);
 111   1      }
 112          
 113          
 114          //----------------------------------------------------------------
             --------------
 115          // GetClusterOfParentDirectory
 116          //----------------------------------------------------------------
             --------------
 117          //
 118          // Return Value : cluster number
 119          // Parameters   : None
 120          //
 121          // Function returns cluster number which begins current directory
 122          //----------------------------------------------------------------
             --------------
 123          static unsigned GetClusterOfParentDirectory()
 124          {
 125   1              if(Current_Dir_Block == Sect_Root_Dir())  return 0;
 126   1              return (Current_Dir_Block - Sect_File_Data()) / MBR.sectors_per_c
             -luster;
 127   1      }
 128          
 129          //----------------------------------------------------------------
             --------------
 130          // Get_Cluster_From_Sector
 131          //----------------------------------------------------------------
             --------------
 132          //
 133          // Return Value : cluster number
 134          // Parameters   : sector - sector which belongs to returned cluste
             -r
 135          //
 136          // Function returns cluster number which contains sector
 137          //----------------------------------------------------------------
             --------------
 138          static unsigned Get_Cluster_From_Sector(unsigned long sector)
 139          {
 140   1              if(sector < (Sect_File_Data() + 2*MBR.sectors_per_cluster)) retur
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 42  

             -n 0;
 141   1              return ((sector - Sect_File_Data()) / MBR.sectors_per_cluster);
 142   1      }
 143          
 144          //----------------------------------------------------------------
             --------------
 145          // Get_First_Sector
 146          //----------------------------------------------------------------
             --------------
 147          //
 148          // Return Value : sector address
 149          // Parameters   : cluster - cluster number
 150          //
 151          // Function returns first sector which belongs to the cluster
 152          //----------------------------------------------------------------
             --------------
 153          static unsigned long Get_First_Sector(unsigned cluster)
 154          {
 155   1              if(cluster >= 2) return Sect_File_Data() + cluster*MBR.sectors_pe
             -r_cluster;
 156   1              else return Sect_Root_Dir();
 157   1      }
 158          
 159          //----------------------------------------------------------------
             --------------
 160          // Get_First_Block_Of_Next_Cluster
 161          //----------------------------------------------------------------
             --------------
 162          //
 163          // Return Value : first block of next cluster in chain or 0xFFFFFF
             -FF if cluster 
 164          //                is last in chain
 165          //
 166          // Parameters   : cluster - searching cluster 
 167          //
 168          // Function returns number of first sector in next cluster in clus
             -ter chain
 169          //----------------------------------------------------------------
             --------------
 170          static unsigned long Get_First_Block_Of_Next_Cluster(unsigned clus
             -ter)
 171          {
 172   1              xdata unsigned long ret = fat_chain(cluster,MBR.sectors_per_clust
             -er);
 173   1              if(ret != 0xFFFFFFFF)
 174   1                      return ret + Sect_File_Data();
 175   1              return ret;
 176   1      }
 177          
 178          //----------------------------------------------------------------
             --------------
 179          // Get_Next_Cluster
 180          //----------------------------------------------------------------
             --------------
 181          //
 182          // Return Value : cluster number
 183          // Parameters   : next cluster in chain
 184          //
 185          // Function returns number of next cluster in chain
 186          //----------------------------------------------------------------
             --------------
 187          static unsigned Get_Next_Cluster(unsigned cluster)
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 43  

 188          {
 189   1              unsigned* xdata fat_table=Scratch;
 190   1      
 191   1          Sect_Read(Sect_Fat1() + cluster/(Sect_Block_Size()/2));
 192   1      
 193   1          return ntohs(fat_table[cluster%(Sect_Block_Size()/2)]);
 194   1      }
 195          
 196          //----------------------------------------------------------------
             --------------
 197          // Get_File_Name
 198          //----------------------------------------------------------------
             --------------
 199          //
 200          // Return Value : None
 201          // Parameters   : file_name - name of file [out] (must be allocate
             -d outside
 202          //                            this function)
 203          //                                    direntry_name - name used in direntry [in]
 204          //
 205          // Function gets file name from direntry
 206          //----------------------------------------------------------------
             --------------
 207          static void Get_File_Name(char* direntry_name,char* file_name)
 208          {
 209   1              unsigned i,j = 0,k = 0;
 210   1              for(i=0;i<11;i++)
 211   1              {
 212   2                      if(direntry_name[i] == ' ')
 213   2                      {
 214   3                              j = 1;
 215   3                              continue;
 216   3                      }
 217   2                      if(j)
 218   2                      {
 219   3                              file_name[k++] = '.';
 220   3                              j = 0;
 221   3                      }
 222   2                      file_name[k++] = tolower(direntry_name[i]);
 223   2              }
 224   1              file_name[k] = 0;
 225   1      }
 226          
 227          //----------------------------------------------------------------
             --------------
 228          // Get_First_Block_Directory_Cluster
 229          //----------------------------------------------------------------
             --------------
 230          //
 231          // Return Value : first sector of cluster which belongs to current
             - directory 
 232          //                fat chain
 233          // Parameters   : sector - sector to check                              
 234          //
 235          // Function returns first sector of cluster which contains sector 
             -if this
 236          // cluster belongs to FAT chain of current directory
 237          //----------------------------------------------------------------
             --------------
 238          static unsigned long Get_First_Block_Directory_Cluster(unsigned lo
             -ng sector)
 239          {
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 44  

 240   1              xdata unsigned cluster = Get_Cluster_From_Sector(sector);
 241   1              xdata unsigned next_dir_cluster = GetClusterOfParentDirectory();
 242   1              while(next_dir_cluster != cluster)
 243   1              {
 244   2                      next_dir_cluster = Get_Next_Cluster(next_dir_cluster);
 245   2                      if(next_dir_cluster >= 0xfff8) return next_dir_cluster;
 246   2              }
 247   1              return Get_First_Sector(cluster);
 248   1      }
 249          
 250          
 251          //----------------------------------------------------------------
             --------------
 252          // Clear_Cluster
 253          //----------------------------------------------------------------
             --------------
 254          //
 255          // Return Value : None
 256          // Parameters   : cluster - cluster number                              
 257          //
 258          // Function is used to clear all sectors of cluster
 259          //----------------------------------------------------------------
             --------------
 260          static void Clear_Cluster(unsigned cluster)
 261          {
 262   1              xdata unsigned long sector = Get_First_Sector(cluster);
 263   1              xdata unsigned i;
 264   1              memset(Scratch,0,512);
 265   1              for(i=0;i<MBR.sectors_per_cluster;i++)
 266   1              {
 267   2                      Sect_Write(sector+i);
 268   2              }
 269   1      
 270   1      }
 271          
 272          //----------------------------------------------------------------
             --------------
 273          // FillDirEntry
 274          //----------------------------------------------------------------
             --------------
 275          //
 276          // Return Value : None
 277          // Parameters   : direntry - dir entry
 278          //                                dir_name - file/directory name                                                        
 279          //
 280          // Function fills dir entry with file name
 281          //----------------------------------------------------------------
             --------------
 282          static void FillDirEntry(dir_entry* direntry,char* dir_name)
 283          {
 284   1        xdata BYTE i;
 285   1        for( i = 0; i < 10; i++) 
 286   1          direntry->sfn.reserved[i] = 0;
 287   1        
 288   1        direntry->sfn.time.i = findinfo.direntry->sfn.date.i = 0;
 289   1        direntry->sfn.filesize = 0;
 290   1      
 291   1        // Fill in the filename
 292   1        for( i = 0; i < 11; i++ ) 
 293   1          direntry->sfn.name[i] = ' ';
 294   1       
 295   1        for( i = 0; i < 11; i++ ) {
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 45  

 296   2          if(!dir_name[i])
 297   2                   break;
 298   2          direntry->sfn.name[i] = toupper(dir_name[i]);
 299   2        }
 300   1      }
 301          
 302          //----------------------------------------------------------------
             --------------
 303          // FileSys_Init
 304          //----------------------------------------------------------------
             --------------
 305          //
 306          // Return Value : None
 307          // Parameters   : None                                                  
 308          //
 309          // Function initializes some data used to navigate over directorie
             -s
 310          //----------------------------------------------------------------
             --------------
 311          void FileSys_Init()
 312          {
 313   1              Current_Dir_Block = Sect_Root_Dir();
 314   1              strcpy(Path_Name,"\\");
 315   1      }
 316          
 317          //----------------------------------------------------------------
             --------------
 318          // chngdir
 319          //----------------------------------------------------------------
             --------------
 320          //
 321          // Return Value : 0 - if such directory not exists in current dire
             -ctory 1 
 322          //                    otherwise
 323          // Parameters   : dirname - directory name to create                                                    
 324          //
 325          // Function tries to find and opens directory in current directory
 326          //----------------------------------------------------------------
             --------------
 327          BYTE chngdir(char* dirname)
 328          {
 329   1        findfirst(&findinfo, 0);
 330   1        while(!file_name_match(dirname,findinfo.direntry->sfn.name)) {
 331   2          if(!findnext(&findinfo)) {
 332   3            return 0;
 333   3          }
 334   2        }
 335   1        if(findinfo.direntry->sfn.attrib & ATTRIB_SUBDIR) 
 336   1        {
 337   2              if(findinfo.direntry->sfn.starting_cluster == 0x00)
 338   2                      Current_Dir_Block = Sect_Root_Dir();
 339   2              else
 340   2                      Current_Dir_Block = Sect_File_Data() + 
 341   2                              (htons(findinfo.direntry->sfn.starting_cluster) * MBR.sectors_p
             -er_cluster);
 342   2              if(!strcmp(dirname,"."))        return 1;
 343   2              if(!strcmp(dirname,".."))
 344   2              {
 345   3                      xdata unsigned char* next,*pos = strstr(Path_Name,"\\");
 346   3      
 347   3                      while((next = strstr(pos,"\\")) != (NULL))
 348   3                              pos = next+1;
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 46  

 349   3                      
 350   3                      if(pos!=(Path_Name+1))
 351   3                      pos--;
 352   3                      
 353   3                              *pos = '\0';
 354   3              }
 355   2              else
 356   2              {
 357   3                      xdata unsigned len = strlen(Path_Name);
 358   3                      if(Path_Name[len-1] != '\\')
 359   3                      {       
 360   4                              strcpy(&Path_Name[len],"\\");
 361   4                              len++;
 362   4                      }
 363   3                      strcpy(&Path_Name[len],dirname);
 364   3              }
 365   2              return 1;       
 366   2        }
 367   1        return 0;
 368   1      }
 369          
 370          //----------------------------------------------------------------
             --------------
 371          // mkdir
 372          //----------------------------------------------------------------
             --------------
 373          //
 374          // Return Value : 0 if function succeeds other value if error occu
             -rs
 375          // Parameters   : dir_name - directory name                                                     
 376          //
 377          // Function creates directory 
 378          //----------------------------------------------------------------
             --------------
 379          BYTE mkdir(char* dir_name)
 380          {
 381   1         
 382   1         xdata unsigned long dir_sectors;
 383   1         xdata dir_entry* entry;
 384   1         xdata unsigned start_cluster;
 385   1         unsigned max_len = strlen(dir_name);
 386   1      
 387   1         
 388   1        if((dir_name == NULL) || (max_len == 0) || (max_len > 8))
 389   1        {
 390   2              return DIRNAME_LENGTH_ERROR;
 391   2        }
 392   1        start_cluster = fat_chain_alloc(0,1);
 393   1        // try to find directory with such name
 394   1        findfirst(&findinfo, 0);
 395   1        while(findnext(&findinfo)) {
 396   2          if(file_name_match(dir_name,findinfo.direntry->sfn.name)) {
 397   3            return DIRECTORY_EXISTS;
 398   3          }
 399   2        }     
 400   1        if(!findfirst(&findinfo,1)) return NO_PLACE_FOR_DIRECTORY;;
 401   1        
 402   1         // Fill in the direntry
 403   1        FillDirEntry(findinfo.direntry,dir_name);
 404   1      
 405   1        findinfo.direntry->sfn.starting_cluster = htons(start_cluster);
 406   1        // Don't forget to set the attrib:
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 47  

 407   1        findinfo.direntry->sfn.attrib = ATTRIB_SUBDIR;
 408   1      
 409   1              // Write the new data to MMC
 410   1        Sect_Write(findinfo.block);
 411   1      
 412   1        // Clear dir_entry of directory and create dot and dotdot direct
             -ory inside
 413   1        Clear_Cluster(start_cluster);
 414   1        dir_sectors = Sect_File_Data() + (start_cluster * MBR.sectors_pe
             -r_cluster);
 415   1        
 416   1        entry = (dir_entry*)Scratch;
 417   1        FillDirEntry(entry,".");
 418   1      
 419   1        entry->sfn.starting_cluster = htons(start_cluster);
 420   1        entry->sfn.attrib = ATTRIB_SUBDIR;
 421   1      
 422   1        entry = (dir_entry*)&Scratch[32];
 423   1      
 424   1        FillDirEntry(entry,"..");     
 425   1      
 426   1        entry->sfn.starting_cluster = htons(GetClusterOfParentDirectory(
             -));
 427   1        entry->sfn.attrib = ATTRIB_SUBDIR;
 428   1      
 429   1      
 430   1        Sect_Write(dir_sectors);
 431   1        return 0;
 432   1      }
 433          
 434          //----------------------------------------------------------------
             --------------
 435          // rmdir
 436          //----------------------------------------------------------------
             --------------
 437          //
 438          // Return Value : 1 if function suceeds other value if error occur
             -s
 439          // Parameters   : dir_name - directory name                                                     
 440          //
 441          // Function removes directory 
 442          //----------------------------------------------------------------
             --------------
 443          BYTE rmdir(char* dir_name)
 444          {
 445   1        unsigned dir_deep = 0;
 446   1        PREV_SEARCH prev_dir_block[40];
 447   1        char  first_part_of_dir[20];
 448   1        char  dir_tmp_name[20];
 449   1        char* tmp;
 450   1        
 451   1        // error if someone tries to removw root directory
 452   1        if(!strcmp(dir_name,"\\")) return 0;
 453   1      
 454   1        if((tmp = strstr(dir_name,"\\")) == NULL)
 455   1        {
 456   2              strcpy(first_part_of_dir,dir_name);
 457   2        }
 458   1        else
 459   1        {
 460   2              if(tmp == dir_name)
 461   2              {
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 48  

 462   3                      tmp = strstr(&dir_name[1],"\\");
 463   3                      if(tmp != NULL)
 464   3                              *tmp = 0;
 465   3                      strcpy(first_part_of_dir,&dir_name[1]);
 466   3                      if(tmp != NULL)
 467   3                              *tmp = '\\';
 468   3              }
 469   2              else
 470   2              {
 471   3                      *tmp = 0;
 472   3                      strcpy(first_part_of_dir,dir_name);
 473   3                      *tmp = '\\';
 474   3              }
 475   2        }
 476   1      
 477   1        if(!chngdir(dir_name)) return 0;      
 478   1        if(!findfirst(&findinfo,0)) return 0;
 479   1        while(1)
 480   1        {
 481   2               if(findinfo.direntry->sfn.name[0]!=(char)0xE5)
 482   2               {
 483   3                       if(!(findinfo.direntry->sfn.attrib & ATTRIB_LABEL))
 484   3                       {
 485   4                               if(findinfo.direntry->sfn.attrib & (ATTRIB_SUBDIR)) 
 486   4                               {
 487   5                                      if(!file_name_match(".",findinfo.direntry->sfn.name) && 
 488   5                     !file_name_match("..",findinfo.direntry->sfn.name))
 489   5                                      {
 490   6                                      prev_dir_block[dir_deep].block = findinfo.block;
 491   6                                      prev_dir_block[dir_deep].offset = findinfo.offset;
 492   6                                      Get_File_Name(findinfo.direntry->sfn.name,dir_tmp_name);
 493   6                                      chngdir(dir_tmp_name);
 494   6                                      findfirst(&findinfo,0);
 495   6                                      dir_deep++;
 496   6                                      }
 497   5                               }
 498   4                               else
 499   4                               {
 500   5                                        // Mark the direntry as "deleted" before freeing the fat c
             -hain.
 501   5                                        // At this point, the findinfo is still valid in the 'Scratc
             -h' 
 502   5                    // buffer.
 503   5                                        // fat_chain_free() would overwrite the Scratch buffer.
 504   5                                        findinfo.direntry->sfn.name[0]=0xE5; // Mark as "deleted"
 505   5                                        Sect_Write(findinfo.block);
 506   5                                        fat_chain_free(ntohs(findinfo.direntry->sfn.starting_cluster
             -));        
 507   5                                        Sect_Read(findinfo.block);            
 508   5                                }
 509   4                        }
 510   3                }
 511   2                if(!findnext(&findinfo)) 
 512   2                {
 513   3                      if(dir_deep)
 514   3                      {
 515   4                              dir_deep--;
 516   4                              chngdir("..");
 517   4                              findinfo.block = prev_dir_block[dir_deep].block;
 518   4                              findinfo.offset = prev_dir_block[dir_deep].offset ;
 519   4                              Sect_Read(findinfo.block);
 520   4                              findinfo.direntry=(dir_entry*)(Scratch+findinfo.offset);
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 49  

 521   4                          findinfo.direntry->sfn.name[0]=0xE5; // Mark as "deleted"
 522   4                              Sect_Write(findinfo.block);
 523   4                              fat_chain_free(ntohs(findinfo.direntry->sfn.starting_cluster));
             -        
 524   4                              Sect_Read(findinfo.block);
 525   4                              findinfo.direntry=(dir_entry*)(Scratch+findinfo.offset);
 526   4                      } else
 527   3                      {
 528   4                              chngdir("..");
 529   4                              break;
 530   4                      } 
 531   3                }
 532   2        }
 533   1        findfirst(&findinfo,0);
 534   1        while(!file_name_match(first_part_of_dir,findinfo.direntry->sfn.
             -name)) {
 535   2          if(!findnext(&findinfo)) {
 536   3            return 0;
 537   3          }
 538   2        }
 539   1        findinfo.direntry->sfn.name[0]=0xE5; // Mark as "deleted"
 540   1        Sect_Write(findinfo.block);
 541   1        fat_chain_free(ntohs(findinfo.direntry->sfn.starting_cluster)); 
 542   1        return 1;
 543   1      }
 544          
 545          
 546          //----------------------------------------------------------------
             --------------
 547          // fcreate
 548          //----------------------------------------------------------------
             --------------
 549          //
 550          // Return Value : If ok returns TRUE
 551          // Parameters   : find_info - pointer to info about file
 552          //                                filename  - pointer to file name
 553          //
 554          // This function creates file
 555          //----------------------------------------------------------------
             --------------
 556          
 557          static BYTE fcreate(find_info* findinfo,char* filename)
 558          {
 559   1        xdata BYTE i,j;
 560   1        // Find the first empty directory entry
 561   1        if(!findfirst(findinfo,1)) return 0;
 562   1      
 563   1        // Fill in the direntry
 564   1        for( i = 0; i < 10; i++) 
 565   1          findinfo->direntry->sfn.reserved[i] = 0;
 566   1        findinfo->direntry->sfn.time.i = findinfo->direntry->sfn.date.i 
             -= 0;
 567   1        findinfo->direntry->sfn.starting_cluster =  
 568   1        findinfo->direntry->sfn.filesize = 0;
 569   1      
 570   1        // Fill in the filename
 571   1        for( i = 0; i < 11; i++ ) 
 572   1          findinfo->direntry->sfn.name[i] = ' ';
 573   1        for( j = 0; j < 20; j++ ) {
 574   2          if(!filename[j] || filename[j] == '.') 
 575   2            break;
 576   2          if( j < 8 ) 
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 50  

 577   2            findinfo->direntry->sfn.name[j] = toupper(filename[j]);
 578   2        }
 579   1        if( filename[j] == '.' ) {
 580   2          for( i = 0; i < 3; i++ ) {
 581   3            if(!filename[j+i+1] || filename[j+i+1]=='.')
 582   3              break;
 583   3            findinfo->direntry->sfn.name[8+i] = toupper(filename[j+i+1])
             -;
 584   3          }
 585   2        }
 586   1        //for(i=0;i<11;i++) findinfo->direntry->sfn.name[i]=
 587   1        //toupper(findinfo->direntry->sfn.name[i]);
 588   1      
 589   1        // Don't forget to set the attrib:
 590   1        findinfo->direntry->sfn.attrib = ATTRIB_ARCHIVE;
 591   1              // Write the new data to MMC
 592   1        Sect_Write(findinfo->block);
 593   1      
 594   1              return 1;
 595   1      }
 596          
 597          
 598          
 599          //----------------------------------------------------------------
             --------------
 600          // fopen
 601          //----------------------------------------------------------------
             --------------
 602          //
 603          // Return Value : TRUE if file is open
 604          // Parameters   : f - pointer to file structure info
 605          //                        filename - pointer to file name
 606          //                                mode - pointer to opened file mode (read, write etc.)
 607          //
 608          // This function opens file
 609          //----------------------------------------------------------------
             --------------
 610          
 611          int fopen(FILE* f,char* filename,char* mode) 
 612          {
 613   1              f->isopen = 0;
 614   1      
 615   1              if( mode[0] == 'w' ) { 
 616   2          fdelete(filename); 
 617   2        } // This is the most memory-efficient solution, not the most 
 618   1          // time-efficient solution.
 619   1      
 620   1        findfirst(&findinfo, 0);
 621   1        while(!file_name_match(filename,findinfo.direntry->sfn.name)) {
 622   2          if(!findnext(&findinfo)) {
 623   3            if(mode[0] == 'r') {
 624   4              return 0; // File not found.
 625   4            }
 626   3            if( mode[0] == 'w' || mode[0] == 'a' ) {
 627   4              if(!fcreate(&findinfo, filename)) {
 628   5                return 0; // File cannot be created.
 629   5              } else {
 630   5                break;
 631   5              }
 632   4            }
 633   3          }
 634   2        }
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 51  

 635   1      
 636   1        f->sector_direntry=findinfo.block;
 637   1        f->offset_direntry=findinfo.offset;
 638   1        f->cluster_start=f->sector_current=
 639   1        ntohs(findinfo.direntry->sfn.starting_cluster);//*MBR.sectors_pe
             -r_cluster;
 640   1        f->attrib=findinfo.direntry->sfn.attrib;
 641   1        f->size=ntohl(findinfo.direntry->sfn.filesize);
 642   1      
 643   1        if(mode[0]=='a') f->pos=f->size; else f->pos=0;
 644   1      //      Print_File(f);
 645   1        return        f->isopen=1;
 646   1      }
 647          
 648          //----------------------------------------------------------------
             --------------
 649          // feof
 650          //----------------------------------------------------------------
             --------------
 651          //
 652          // Return Value : End of file value
 653          // Parameters   : f - pointer to file info structure
 654          //
 655          // This function printout size of file
 656          //----------------------------------------------------------------
             --------------
 657          
 658          int feof(FILE* f) 
 659          {
 660   1        if(!f->isopen) return 1;
 661   1        return f->pos >= f->size;
 662   1      }
 663          
 664          //----------------------------------------------------------------
             --------------
 665          // fat_chain
 666          //----------------------------------------------------------------
             --------------
 667          //
 668          // Return Value : global number of sector 
 669          // Parameters   : from - starting number of sector
 670          //                                nr - relative number of sector
 671          //
 672          // Find the 'nr'-th sector in the fat chain starting at 'from'
 673          //----------------------------------------------------------------
             --------------
 674          
 675          static unsigned long fat_chain(unsigned long from,unsigned nr) 
 676          {
 677   1        unsigned* xdata fat_table=Scratch;
 678   1        unsigned xdata sect,sect_prev=0;
 679   1        unsigned xdata cluster = nr/MBR.sectors_per_cluster;
 680   1      
 681   1        while(cluster) {
 682   2          sect = Sect_Fat1() + from/(Sect_Block_Size()/2);
 683   2          if(sect!=sect_prev) {
 684   3            Sect_Read(sect_prev=sect);
 685   3          }
 686   2      
 687   2          from=ntohs(fat_table[from%(Sect_Block_Size()/2)]);
 688   2      
 689   2          if(!(from>=2 && from<=0xFFEF)) {
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 52  

 690   3            return 0xFFFFFFFF;
 691   3          }
 692   2      
 693   2          cluster--;
 694   2        }
 695   1        from *= MBR.sectors_per_cluster;
 696   1        from += nr%MBR.sectors_per_cluster;
 697   1        return from;
 698   1      }
 699          
 700          //----------------------------------------------------------------
             --------------
 701          // fat_chain_free
 702          //----------------------------------------------------------------
             --------------
 703          //
 704          // Return Value :  
 705          // Parameters   : from - starting number of sector
 706          //
 707          // Function frees an entire fat chain, starting at 'from' until th
             -e end of the chain
 708          //----------------------------------------------------------------
             --------------
 709          
 710          static void fat_chain_free(unsigned from) 
 711          {
 712   1        unsigned* xdata fat_table=Scratch;
 713   1        unsigned xdata sect,sect_prev=0;
 714   1        unsigned xdata index;
 715   1      
 716   1        if(from<2) return;
 717   1      
 718   1        sect = Sect_Fat1() + from/(Sect_Block_Size()/2);
 719   1      
 720   1        while(1) {
 721   2          if(sect!=sect_prev) {
 722   3            Sect_Read(sect_prev=sect);
 723   3          }
 724   2      
 725   2          index = from%(Sect_Block_Size()/2);
 726   2              
 727   2          from=ntohs(fat_table[index]);
 728   2                      
 729   2          fat_table[index]=0x0000; // Free it
 730   2      
 731   2          if(!(from>=2 && from<=0xFFEF)) {
 732   3            Sect_Write_Multi_Fat(sect_prev);
 733   3            break;
 734   3          }
 735   2      
 736   2          sect = Sect_Fat1() + from/(Sect_Block_Size()/2);
 737   2          if(sect!=sect_prev) {
 738   3            Sect_Write_Multi_Fat(sect_prev);
 739   3          }
 740   2        }
 741   1      }
 742          
 743          
 744          //----------------------------------------------------------------
             --------------
 745          // fat_chain_alloc
 746          //----------------------------------------------------------------
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 53  

             --------------
 747          //
 748          // Return Value : numer of allocated sector 
 749          // Parameters   : from - starting number of sector
 750          //                                nr - relative number of sector
 751          //
 752          // Allocate 'nr' of extra FAT blocks at the end of the chain that 
             -starts at 'from'
 753          //----------------------------------------------------------------
             --------------
 754          
 755          static unsigned fat_chain_alloc(unsigned from,unsigned nr) 
 756          {
 757   1        unsigned* xdata fat_table=Scratch;
 758   1        unsigned xdata sect,sect_prev=0;
 759   1        unsigned xdata index;
 760   1        unsigned xdata alloced=0xFFFF;
 761   1      
 762   1              // Find free FAT entries, allocate them, and link them together.
 763   1        for(sect=Sect_Fat1();nr && sect<Sect_Fat2();sect++) {
 764   2          Sect_Read(sect);
 765   2                      // (Skip first two FAT entries when looking for free blocks)
 766   2          for(index=((sect==Sect_Fat1())?2:0);index<Sect_Block_Size()/2;
             -index++) {
 767   3            if(fat_table[index]==0x0000) {            // It's free
 768   4              fat_table[index]=ntohs(alloced);// Allocate it (refer to p
             -reviously 
 769   4                                              //   alloc'ed FAT entry).
 770   4              alloced =                                               // Remember which FAT entry was alloc'ed
 771   4                (sect-Sect_Fat1()) * (Sect_Block_Size()/2) + index;
 772   4              if(!--nr) break;
 773   4            }
 774   3          }
 775   2          if(alloced!=0xFFFF) Sect_Write_Multi_Fat(sect);     // Write all F
             -AT copies
 776   2        }
 777   1      
 778   1        // When we get here, 'alloced' contains the first FAT block in t
             -he alloc'ed chain
 779   1        // Find the end of the current FAT chain.
 780   1        // Make the end of the current FAT chain refer to the newly allo
             -cated FAT chain
 781   1        while(from>=2 && from<=0xFFEF && alloced!=0xFFFF) {
 782   2          sect = Sect_Fat1() + from/(Sect_Block_Size()/2);
 783   2          if(sect!=sect_prev) {
 784   3            Sect_Read(sect_prev=sect);
 785   3          }
 786   2          index = from%(Sect_Block_Size()/2);
 787   2          from=ntohs(fat_table[index]);
 788   2      
 789   2          if(from>=0xFFF8) {
 790   3            fat_table[index]=ntohs(alloced);
 791   3            Sect_Write_Multi_Fat(sect);
 792   3          }
 793   2        }
 794   1      
 795   1        return alloced;
 796   1      }
 797          
 798          //----------------------------------------------------------------
             --------------
 799          // fread
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 54  

 800          //----------------------------------------------------------------
             --------------
 801          //
 802          // Return Value : amount of read bytes 
 803          // Parameters   : f - pointer to file structure
 804          //                                buffer - pinter to buffer
 805          //                                count - number of bytes to read
 806          //
 807          // This function reads the file
 808          //----------------------------------------------------------------
             --------------
 809          
 810          unsigned fread(FILE* f,BYTE* buffer,unsigned count) 
 811          {
 812   1        unsigned xdata cnt,total_cnt=0;
 813   1        if(!f->isopen || !count) return 0;
 814   1      
 815   1        // If you use the Scratch buffer as fread buffer, then
 816   1        // we cannot possibly support transfers consisting of
 817   1        // multiple Sect_Read() operations. The second Sect_Read
 818   1        // would overwrite the stored bytes from the first one.
 819   1        if(buffer>=Scratch && buffer<Scratch+Sect_Block_Size())
 820   1          count=min(count,Sect_Block_Size()-f->pos%Sect_Block_Size());
 821   1      
 822   1        while(count && !feof(f)) {
 823   2          f->sector_current = fat_chain(f->cluster_start,f->pos/Sect_Blo
             -ck_Size());
 824   2      
 825   2          Sect_Read(Sect_File_Data() + f->sector_current);
 826   2      
 827   2          cnt=min(Sect_Block_Size()-f->pos%Sect_Block_Size(),count);
 828   2          cnt=min(cnt,f->size-f->pos);
 829   2      
 830   2          memmove(buffer,Scratch+f->pos%Sect_Block_Size(),cnt); // MUST 
             -be overlap-safe 
 831   2                                                                // copy 
             -operation!
 832   2          total_cnt+=cnt;
 833   2          f->pos+=cnt;
 834   2          count-=cnt;
 835   2          buffer+=cnt;
 836   2        }
 837   1      
 838   1        return total_cnt;
 839   1      }
 840          
 841          //----------------------------------------------------------------
             --------------
 842          // fwrite
 843          //----------------------------------------------------------------
             --------------
 844          //
 845          // Return Value : amount of written bytes 
 846          // Parameters   : f - pointer to file structure
 847          //                                buffer - pinter to buffer
 848          //                                count - number of bytes to write
 849          //
 850          // This function writes the file
 851          //----------------------------------------------------------------
             --------------
 852          
 853          unsigned fwrite(FILE* f,BYTE* buffer,unsigned count) 
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 55  

 854          {
 855   1        xdata unsigned cnt,total_cnt=0,xtra,alloced;
 856   1        xdata dir_entry* entry;
 857   1        if(!f->isopen || !count) return 0;
 858   1      
 859   1      
 860   1        // First, extend the file so it can hold all the data:
 861   1        if(f->pos+count>f->size) {
 862   2          // If the new EOF ends up in the next FAT block, an extra bloc
             -k must be allocated.
 863   2          // The number of blocks needed to store X bytes = 1+(X-1)/512 
             -if X!=0, or =0 if X==0.
 864   2          // We will need to store 'pos+count' bytes after the write ope
             -ration
 865   2          // This means we need 1+(pos+count-1)/512 blocks after the wri
             -te operation
 866   2          // We currently have 'size' bytes in the file, or 1+(size-1)/5
             -12 blocks (or 0 if size==0).
 867   2          // So, we need to allocate (1+(pos+count-1)/512) - (1+(size-1)
             -/512) extra blocks
 868   2          xtra=(1+((f->pos+count-1)/Sect_Block_Size())/MBR.sectors_per_c
             -luster); 
 869   2          if ( f->size )
 870   2            xtra -= ( 1 +(( f->size - 1 ) / Sect_Block_Size() ) / MBR.se
             -ctors_per_cluster );
 871   2                      
 872   2      
 873   2          if(xtra) {
 874   3            if(0xFFFF==(alloced=fat_chain_alloc(f->sector_current/MBR.se
             -ctors_per_cluster,xtra))) 
 875   3              return 0;
 876   3          }
 877   2      
 878   2                      // Modify the direntry for this file:
 879   2          Sect_Read(f->sector_direntry);
 880   2          entry = (dir_entry*)(Scratch+f->offset_direntry);
 881   2          if((entry->sfn.filesize==0) && (entry->sfn.starting_cluster<2 
             -|| 
 882   2                                      entry->sfn.starting_cluster>=0xFFF
             -0)) {
 883   3            entry->sfn.starting_cluster=ntohs(f->cluster_start=alloced);
 884   3          } 
 885   2          entry->sfn.filesize=ntohl(f->size=f->pos+count);
 886   2          f->attrib=(entry->sfn.attrib|=ATTRIB_ARCHIVE);
 887   2          Sect_Write(f->sector_direntry);
 888   2        }
 889   1      
 890   1        // Now we are sure the fwrite() operation can be performed
 891   1        // in the existing file data blocks. Either because the file 
 892   1        // was big enough to start with, or because we have just
 893   1        // allocated extra blocks for the new data.
 894   1        while(count && !feof(f)) {
 895   2          f->sector_current = fat_chain(f->cluster_start,f->pos/Sect_Blo
             -ck_Size());
 896   2                      
 897   2      
 898   2          Sect_Read(Sect_File_Data() + f->sector_current);
 899   2        //    Print_File(f);
 900   2        //    print_scratch();
 901   2      
 902   2          cnt=min(Sect_Block_Size()-f->pos%Sect_Block_Size(),count);
 903   2          cnt=min(cnt,f->size-f->pos);
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 56  

 904   2      
 905   2          memmove(Scratch+f->pos%Sect_Block_Size(),buffer,cnt);
 906   2      
 907   2        //    print_scratch();
 908   2          Sect_Write(Sect_File_Data() + f->sector_current);
 909   2      
 910   2          total_cnt+=cnt;
 911   2          f->pos+=cnt;
 912   2          count-=cnt;
 913   2          buffer+=cnt;
 914   2        }
 915   1      
 916   1        return total_cnt;
 917   1      }
 918          
 919          //----------------------------------------------------------------
             --------------
 920          // fclose
 921          //----------------------------------------------------------------
             --------------
 922          //
 923          // Return Value : 
 924          // Parameters   : f - pointer to file structure
 925          
 926          //
 927          // This function closes the file
 928          //----------------------------------------------------------------
             --------------
 929          
 930          void fclose(FILE* f) 
 931          {
 932   1        f->isopen=0;
 933   1      }
 934          
 935          //----------------------------------------------------------------
             --------------
 936          // fdelete
 937          //----------------------------------------------------------------
             --------------
 938          //
 939          // Return Value :TRUE if everything is ok
 940          // Parameters   : name - pointer to filename
 941          //
 942          //
 943          // This function deletes the file
 944          //----------------------------------------------------------------
             --------------
 945          
 946          int fdelete(char* name) 
 947          {
 948   1        findfirst(&findinfo,0);
 949   1        while(!file_name_match(name,findinfo.direntry->sfn.name)) {
 950   2          if(!findnext(&findinfo)) {
 951   3            return 0;
 952   3          }
 953   2        }
 954   1      
 955   1        // Do not delete subdirectories or labels:
 956   1        if(findinfo.direntry->sfn.attrib & (ATTRIB_SUBDIR|ATTRIB_LABEL))
             - return 0;
 957   1      
 958   1        // Mark the direntry as "deleted" before freeing the fat chain.
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 57  

 959   1        // At this point, the findinfo is still valid in the 'Scratch' b
             -uffer.
 960   1        // fat_chain_free() would overwrite the Scratch buffer.
 961   1        findinfo.direntry->sfn.name[0]=0xE5; // Mark as "deleted"
 962   1        Sect_Write(findinfo.block);
 963   1        fat_chain_free(ntohs(findinfo.direntry->sfn.starting_cluster));
 964   1      
 965   1        return 1;
 966   1      }
 967          
 968          //-------------------directory functions---------------------
 969          //--------- findfirst, findnext directory functions ---------
 970          
 971          static BYTE findvalid(find_info* findinfo) 
 972          {
 973   1        xdata char n0 = findinfo->direntry->sfn.name[0];
 974   1        if(findinfo->findempty) {
 975   2          return (n0==(char)0xE5) || (n0=='\0');
 976   2        }
 977   1        return (n0!=(char)0xE5) && (n0>' ') && (findinfo->direntry->sfn.
             -attrib!=0x0F);
 978   1      }
 979          
 980          
 981          BYTE findfirst(find_info* findinfo,BYTE empty) 
 982          {
 983   1        Sect_Read(findinfo->block = Current_Dir_Block);
 984   1      
 985   1        findinfo->findempty=empty;
 986   1      
 987   1        findinfo->direntry=(dir_entry*)(Scratch+(findinfo->offset=0));
 988   1        if(findvalid(findinfo))
 989   1          return 1;
 990   1        return findnext(findinfo);
 991   1      }
 992          
 993          
 994          BYTE findnext(find_info* findinfo) 
 995          {
 996   1        xdata BYTE bRoot = (Current_Dir_Block == Sect_Root_Dir());
 997   1        
 998   1      
 999   1        do {
1000   2          if((findinfo->offset+=sizeof(dir_entry))>=Sect_Block_Size()) {
1001   3            xdata unsigned long dir_next_cluster_block = 
1002   3                           Get_First_Block_Directory_Cluster(findinfo->b
             -lock);
1003   3            if(bRoot &&  (findinfo->block>=Sect_Root_Dir_Last()))
1004   3            {
1005   4            //        printf("NOT FOUND\r\n");
1006   4              return 0;
1007   4            }
1008   3                else if((!bRoot) && (dir_next_cluster_block != 0xffffffff) && 
1009   3                              (findinfo->block>=(dir_next_cluster_block + MBR.sectors_per_c
             -luster-1)))
1010   3                {
1011   4                      // read next cluster occupied by directory      
1012   4                      xdata unsigned long next_next_block = Get_First_Block_Of_Next_
             -Cluster(
1013   4                                                                                      Get_Cluster_From_Sector(dir_next_cluster_block));
1014   4                              
1015   4                      if(next_next_block == (0xFFFFFFFF))
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 58  

1016   4                      {
1017   5                              if(!findinfo->findempty)
1018   5                                      return 0;
1019   5                              else
1020   5                              {
1021   6                                      xdata new_cluster = 
1022   6                        fat_chain_alloc(Get_Cluster_From_Sector(dir_next
             -_cluster_block),1);
1023   6                                      if(new_cluster == 0xFFFF)
1024   6                                              return 0;
1025   6                                      next_next_block = Get_First_Sector(new_cluster);
1026   6                                      Clear_Cluster(new_cluster);
1027   6                              }       
1028   5                      }
1029   4      
1030   4                      dir_next_cluster_block = next_next_block;
1031   4                      findinfo->offset=0;
1032   4                      Sect_Read(findinfo->block = dir_next_cluster_block);
1033   4                }
1034   3            else {
1035   4              findinfo->offset=0;
1036   4              Sect_Read(++findinfo->block);
1037   4      
1038   4            }
1039   3          }
1040   2                      
1041   2                      
1042   2          findinfo->direntry=(dir_entry*)(Scratch+findinfo->offset);
1043   2        } while(!findvalid(findinfo));
1044   1      
1045   1        return 1;
1046   1      }
1047          
1048          #else
              
              //---------------------------------------------------------
              /* Copy of functions for devices different then F340*/
              //---------------------------------------------------------
              
              static BYTE fcreate(find_info* findinfo,char* filename) 
              {
                BYTE i,j;
                // Find the first empty directory entry
                if(!findfirst(findinfo,1)) return 0;
              
                // Fill in the direntry
                for( i = 0; i < 10; i++) 
                  findinfo->direntry->sfn.reserved[i] = 0;
                findinfo->direntry->sfn.time.i = findinfo->direntry->sfn.date.i 
             -= 0;
                findinfo->direntry->sfn.starting_cluster = findinfo->direntry->s
             -fn.filesize = 0;
              
                // Fill in the filename
                for( i = 0; i < 11; i++ ) 
                  findinfo->direntry->sfn.name[i] = ' ';
                for( j = 0; j < 20; j++ ) {
                  if(!filename[j] || filename[j] == '.') 
                    break;
                  if( j < 8 ) 
                    findinfo->direntry->sfn.name[j] = toupper(filename[j]);
                }
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 59  

                if( filename[j] == '.' ) {
                  for( i = 0; i < 3; i++ ) {
                    if(!filename[j+i+1] || filename[j+i+1]=='.') 
                      break;
                    findinfo->direntry->sfn.name[8+i] = toupper(filename[j+i+1])
             -;
                  }
                }
                //for(i=0;i<11;i++) findinfo->direntry->sfn.name[i]=
                //toupper(findinfo->direntry->sfn.name[i]);
              
                // Don't forget to set the attrib:
                findinfo->direntry->sfn.attrib = ATTRIB_ARCHIVE;
              
                      // Write the new data to MMC
                Sect_Write(findinfo->block);
              
                      return 1;
              }
              
              
              static find_info xdata findinfo; // Shared find_info for fopen() a
             -nd fdelete()
              
              int fopen(FILE* f,char* filename,char* mode) 
              {
                      f->isopen = 0;
              
                      if( mode[0] == 'w' ) { 
                  fdelete(filename); 
                } // This is the most memory-efficient solution, not the most ti
             -me-efficient solution.
              
                findfirst(&findinfo, 0);
                while(!file_name_match(filename,findinfo.direntry->sfn.name)) {
                  if(!findnext(&findinfo)) {
                    if(mode[0] == 'r') {
                      return 0; // File not found.
                    }
                    if( mode[0] == 'w' || mode[0] == 'a' ) {
                      if(!fcreate(&findinfo, filename)) {
                        return 0; // File cannot be created.
                      } else {
                        break;
                      }
                    }
                  }
                }
              
                f->sector_direntry=findinfo.block;
                f->offset_direntry=findinfo.offset;
                f->cluster_start=f->sector_current=
                ntohs(findinfo.direntry->sfn.starting_cluster);//*MBR.sectors_pe
             -r_cluster;
                f->attrib=findinfo.direntry->sfn.attrib;
                f->size=ntohl(findinfo.direntry->sfn.filesize);
              
                if(mode[0]=='a') f->pos=f->size; else f->pos=0;
              //      Print_File(f);
                return        f->isopen=1;
              }
              
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 60  

              /*
              int fexists(char* filename) {
                      FILE xdata f;
                      if(fopen(&f,filename,"r")) {
                              fclose(&f);
                              return 1;
                      }
                      return 0;
              }
              */
              
              /*
              int fseek(FILE* f,long offset,int origin) {
                      if(!f->isopen) return 0;
                      switch(origin) {
                              case SEEK_SET:default:
                                      if(offset>=0)
                                              f->pos=offset;
                                      else
                                              return 0;
                                      break;
                              case SEEK_END:
                                      f->pos=f->size+offset;
                                      break;
                              case SEEK_CUR:
                                      f->pos+=offset;
                                      break;
                      }
              
                      return 1;
              }
              */
              
              /*
              DWORD ftell(FILE* f) {
                      if(!f->isopen) return 0;
                      return f->pos;
              }
              */
              
              int feof(FILE* f) 
              {
                if(!f->isopen) return 1;
                return f->pos >= f->size;
              }
              
              // Find the 'nr'-th sector in the fat chain starting at 'from'
              static unsigned long fat_chain(unsigned long from,unsigned nr) 
              {
                unsigned* xdata fat_table=Scratch;
                unsigned xdata sect,sect_prev=0;
                unsigned xdata cluster = nr/MBR.sectors_per_cluster;
              
                while(cluster) {
                  sect = Sect_Fat1() + from/(Sect_Block_Size()/2);
                  if(sect!=sect_prev) {
                    Sect_Read(sect_prev=sect);
                  }
              
                  from=ntohs(fat_table[from%(Sect_Block_Size()/2)]);
              
                  if(!(from>=2 && from<=0xFFEF)) {
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 61  

                    return 0xFFFFu;
                  }
              
                  cluster--;
                }
                from *= MBR.sectors_per_cluster;
                from += nr%MBR.sectors_per_cluster;
                return from;
              }
              
              // Free an entire fat chain, starting at 'from' until the end of t
             -he chain
              static void fat_chain_free(unsigned from) 
              {
                unsigned* xdata fat_table=Scratch;
                unsigned xdata sect,sect_prev=0;
                unsigned xdata index;
              
                if(from<2) return;
              
                sect = Sect_Fat1() + from/(Sect_Block_Size()/2);
              
                while(1) {
                  if(sect!=sect_prev) {
                    Sect_Read(sect_prev=sect);
                  }
              
                  index = from%(Sect_Block_Size()/2);
                      
                  from=ntohs(fat_table[index]);
                              
                  fat_table[index]=0x0000; // Free it
              
                  if(!(from>=2 && from<=0xFFEF)) {
                    Sect_Write_Multi_Fat(sect_prev);
                    break;
                  }
              
                  sect = Sect_Fat1() + from/(Sect_Block_Size()/2);
                  if(sect!=sect_prev) {
                    Sect_Write_Multi_Fat(sect_prev);
                  }
                }
              }
              
              
              // Allocate 'nr' extra FAT blocks at the end of the chain that sta
             -rts at 'from':
              static unsigned fat_chain_alloc(unsigned from,unsigned nr) 
              {
                unsigned* xdata fat_table=Scratch;
                unsigned xdata sect,sect_prev=0;
                unsigned xdata index;
                unsigned xdata alloced=0xFFFF;
              
                      // Find free FAT entries, allocate them, and link them together.
                for(sect=Sect_Fat1();nr && sect<Sect_Fat2();sect++) {
                  Sect_Read(sect);
                              // (Skip first two FAT entries when looking for free blocks)
                  for(index=((sect==Sect_Fat1())?2:0);index<Sect_Block_Size()/2;
             -index++) {
                    if(fat_table[index]==0x0000) {            // It's free
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 62  

                      fat_table[index]=ntohs(alloced);// Allocate it (refer to p
             -reviously alloc'ed FAT entry).
                      alloced =                                               // Remember which FAT entry was alloc'ed
                        (sect-Sect_Fat1()) * (Sect_Block_Size()/2) + index;
                      if(!--nr) break;
                    }
                  }
                  if(alloced!=0xFFFF) Sect_Write_Multi_Fat(sect);     // Write all F
             -AT copies
                }
              
                // When we get here, 'alloced' contains the first FAT block in t
             -he alloc'ed chain
                // Find the end of the current FAT chain.
                // Make the end of the current FAT chain refer to the newly allo
             -cated FAT chain
                while(from>=2 && from<=0xFFEF && alloced!=0xFFFF) {
                  sect = Sect_Fat1() + from/(Sect_Block_Size()/2);
                  if(sect!=sect_prev) {
                    Sect_Read(sect_prev=sect);
                  }
                  index = from%(Sect_Block_Size()/2);
                  from=ntohs(fat_table[index]);
              
                  if(from>=0xFFF8) {
                    fat_table[index]=ntohs(alloced);
                    Sect_Write_Multi_Fat(sect);
                  }
                }
              
                return alloced;
              }
              
              unsigned fread(FILE* f,BYTE* buffer,unsigned count) 
              {
                unsigned xdata cnt,total_cnt=0;
                if(!f->isopen || !count) return 0;
              
                // If you use the Scratch buffer as fread buffer, then
                // we cannot possibly support transfers consisting of
                // multiple Sect_Read() operations. The second Sect_Read
                // would overwrite the stored bytes from the first one.
                if(buffer>=Scratch && buffer<Scratch+Sect_Block_Size())
                  count=min(count,Sect_Block_Size()-f->pos%Sect_Block_Size());
              
                while(count && !feof(f)) {
                  f->sector_current = fat_chain(f->cluster_start,f->pos/Sect_Blo
             -ck_Size());
              
                  Sect_Read(Sect_File_Data() + f->sector_current);
              
                  cnt=min(Sect_Block_Size()-f->pos%Sect_Block_Size(),count);
                  cnt=min(cnt,f->size-f->pos);
              
                  memmove(buffer,Scratch+f->pos%Sect_Block_Size(),cnt); // MUST 
             -be overlap-safe copy operation!
                  total_cnt+=cnt;
                  f->pos+=cnt;
                  count-=cnt;
                  buffer+=cnt;
                }
              
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 63  

                return total_cnt;
              }
              
              unsigned fwrite(FILE* f,BYTE* buffer,unsigned count) 
              {
                unsigned cnt,total_cnt=0,xtra,alloced;
                dir_entry* entry;
                if(!f->isopen || !count) return 0;
              
              
                // First, extend the file so it can hold all the data:
                if(f->pos+count>f->size) {
                  // If the new EOF ends up in the next FAT block, an extra bloc
             -k must be 
                  // allocated.
                  // The number of blocks needed to store X bytes = 1+(X-1)/512 
             -if X!=0, 
                  // or =0 if X==0.
                  // We will need to store 'pos+count' bytes after the write ope
             -ration
                  // This means we need 1+(pos+count-1)/512 blocks after the wri
             -te operation
                  // We currently have 'size' bytes in the file, or 1+(size-1)/5
             -12 blocks 
                  // (or 0 if size==0).
                  // So, we need to allocate (1+(pos+count-1)/512) - (1+(size-1)
             -/512) 
                  // extra blocks
                  xtra=(1+((f->pos+count-1)/Sect_Block_Size())/MBR.sectors_per_c
             -luster); 
                  if ( f->size )
                    xtra -= 
                    ( 1 +(( f->size - 1 ) / Sect_Block_Size() ) / MBR.sectors_pe
             -r_cluster );
                              
              
                  if(xtra) {
                    if(0xFFFF==
                    (alloced=fat_chain_alloc(f->sector_current/MBR.sectors_per_c
             -luster,xtra)))
                      return 0;
                  }
              
                              // Modify the direntry for this file:
                  Sect_Read(f->sector_direntry);
                  entry = (dir_entry*)(Scratch+f->offset_direntry);
                  if((entry->sfn.filesize==0) && (entry->sfn.starting_cluster<2 
             -|| 
                  entry->sfn.starting_cluster>=0xFFF0)) {
                    entry->sfn.starting_cluster=ntohs(f->cluster_start=alloced);
                  } 
                  entry->sfn.filesize=ntohl(f->size=f->pos+count);
                  f->attrib=(entry->sfn.attrib|=ATTRIB_ARCHIVE);
                  Sect_Write(f->sector_direntry);
                }
              
                // Now we are sure the fwrite() operation can be performed
                // in the existing file data blocks. Either because the file 
                // was big enough to start with, or because we have just
                // allocated extra blocks for the new data.
                while(count && !feof(f)) {
                  f->sector_current = fat_chain(f->cluster_start,f->pos/Sect_Blo
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 64  

             -ck_Size());
                              
              
                  Sect_Read(Sect_File_Data() + f->sector_current);
                //    Print_File(f);
                //    print_scratch();
              
                  cnt=min(Sect_Block_Size()-f->pos%Sect_Block_Size(),count);
                  cnt=min(cnt,f->size-f->pos);
              
                  memmove(Scratch+f->pos%Sect_Block_Size(),buffer,cnt);
              
                //    print_scratch();
                  Sect_Write(Sect_File_Data() + f->sector_current);
              
                  total_cnt+=cnt;
                  f->pos+=cnt;
                  count-=cnt;
                  buffer+=cnt;
                }
              
                return total_cnt;
              }
              
              void fclose(FILE* f) 
              {
                f->isopen=0;
              }
              
              int fdelete(char* name) 
              {
                findfirst(&findinfo,0);
                while(!file_name_match(name,findinfo.direntry->sfn.name)) {
                  if(!findnext(&findinfo)) {
                    return 0;
                  }
                }
              
                // Do not delete subdirectories or labels:
                if(findinfo.direntry->sfn.attrib & (ATTRIB_SUBDIR|ATTRIB_LABEL))
             - return 0;
              
                // Mark the direntry as "deleted" before freeing the fat chain.
                // At this point, the findinfo is still valid in the 'Scratch' b
             -uffer.
                // fat_chain_free() would overwrite the Scratch buffer.
                findinfo.direntry->sfn.name[0]=0xE5; // Mark as "deleted"
                Sect_Write(findinfo.block);
                fat_chain_free(ntohs(findinfo.direntry->sfn.starting_cluster));
              
                return 1;
              }
              
              //--------- findfirst, findnext directory functions ---------
              
              static BYTE findvalid(find_info* findinfo) 
              {
                char n0 = findinfo->direntry->sfn.name[0];
                if(findinfo->findempty) {
                  return (n0==(char)0xE5) || (n0=='\0');
                }
                return (n0!=(char)0xE5) && (n0>' ') && (findinfo->direntry->sfn.
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 65  

             -attrib!=0x0F);
              }
              
              BYTE findfirst(find_info* findinfo,BYTE empty) 
              {
                Sect_Read(findinfo->block = Sect_Root_Dir());
              
                findinfo->findempty=empty;
              
                findinfo->direntry=(dir_entry*)(Scratch+(findinfo->offset=0));
                if(findvalid(findinfo))
                  return 1;
                return findnext(findinfo);
              }
              void print_info(find_info* info);
              
              BYTE findnext(find_info* findinfo) 
              {
                do {
                  if((findinfo->offset+=sizeof(dir_entry))>=Sect_Block_Size()) {
                    if(findinfo->block>=Sect_Root_Dir_Last())
                    {
                    //        printf("NOT FOUND\r\n");
                      return 0;
                    }
                    else {
                      findinfo->offset=0;
                      Sect_Read(++findinfo->block);
              
                    }
                  }
                              
                              
                  findinfo->direntry=(dir_entry*)(Scratch+findinfo->offset);
                } while(!findvalid(findinfo));
              
                return 1;
              }
              
              #endif
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 66  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com00FD (BEGIN)
0000         L?0254:
0000 900000      R     MOV     DPTR,#f
0003 120000      E     LCALL   ?C?PLDXDATA
0006 90000B            MOV     DPTR,#0BH
0009 120000      E     LCALL   ?C?LLDOPTR
000C 900000      R     MOV     DPTR,#count
000F         L?0255:
000F EF                MOV     A,R7
0010 FB                MOV     R3,A
0011 EE                MOV     A,R6
0012 5401              ANL     A,#01H
0014 FA                MOV     R2,A
0015 E4                CLR     A
0016 C3                CLR     C
0017 9B                SUBB    A,R3
0018 FB                MOV     R3,A
0019 7402              MOV     A,#02H
001B 9A                SUBB    A,R2
001C FA                MOV     R2,A
001D E4                CLR     A
001E 9400              SUBB    A,#00H
0020 F9                MOV     R1,A
0021 E4                CLR     A
0022 9400              SUBB    A,#00H
0024 F8                MOV     R0,A
0025         L?0256:
0025 E0                MOVX    A,@DPTR
0026 FE                MOV     R6,A
0027 A3                INC     DPTR
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A E4                CLR     A
002B FC                MOV     R4,A
002C FD                MOV     R5,A
002D 22                RET     
002E         L?0257:
002E         L?0258:
002E 900000      R     MOV     DPTR,#filename
0031         L?0259:
0031 120000      E     LCALL   ?C?PLDXDATA
0034 900000      R     MOV     DPTR,#i
0037         L?0260:
0037 E0                MOVX    A,@DPTR
0038         L?0261:
0038 F582              MOV     DPL,A
003A         L?0262:
003A 758300            MOV     DPH,#00H
003D 020000      E     LJMP    ?C?CLDOPTR
0040         L?0263:
0040         L?0264:
0040 900000      R     MOV     DPTR,#findinfo+07H
0043         L?0265:
0043 120000      E     LCALL   ?C?PLDXDATA
0046 90001A            MOV     DPTR,#01AH
0049         L?0266:
0049 120000      E     LCALL   ?C?ILDOPTR
004C FF                MOV     R7,A
004D AEF0              MOV     R6,B
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 67  

004F 22                RET     
0050         L?0267:
0050 AC06              MOV     R4,AR6
0052 AD07              MOV     R5,AR7
0054 900000      R     MOV     DPTR,#index+01H
0057         L?0268:
0057 E0                MOVX    A,@DPTR
0058 25E0              ADD     A,ACC
005A FF                MOV     R7,A
005B 900000      R     MOV     DPTR,#index
005E E0                MOVX    A,@DPTR
005F         L?0269:
005F 900000      R     MOV     DPTR,#fat_table
0062         L?0270:
0062 33                RLC     A
0063 FE                MOV     R6,A
0064         L?0271:
0064 120000      E     LCALL   ?C?PLDXDATA
0067 8F82              MOV     DPL,R7
0069 8E83              MOV     DPH,R6
006B 22                RET     
006C         L?0272:
006C E4                CLR     A
006D F5F0              MOV     B,A
006F 120000      E     LCALL   ?C?ISTOPTR
0072         L?0273:
0072 900000      R     MOV     DPTR,#findinfo
0075 120000      E     LCALL   ?C?PLDXDATA
0078         L?0274:
0078 900007            MOV     DPTR,#07H
007B 020000      E     LJMP    ?C?PLDOPTR
007E         L?0275:
007E 900000      R     MOV     DPTR,#f
0081         L?0276:
0081 E4                CLR     A
0082 FC                MOV     R4,A
0083 FD                MOV     R5,A
0084 020000      E     LJMP    ?C?PLDXDATA
0087         L?0277:
0087         L?0278:
0087 900000      R     MOV     DPTR,#f
008A         L?0279:
008A 120000      E     LCALL   ?C?PLDXDATA
008D 90000B            MOV     DPTR,#0BH
0090 22                RET     
0091         L?0280:
0091         L?0281:
0091 900000      R     MOV     DPTR,#findinfo+07H
0094 120000      E     LCALL   ?C?PLDXDATA
0097 900000      R     MOV     DPTR,#?_file_name_match?BYTE+03H
009A 020000      E     LJMP    ?C?PSTXDATA
009D         L?0282:
009D         L?0283:
009D 120000      E     LCALL   ?C?PSTXDATA
00A0         L?0284:
00A0 7B01              MOV     R3,#01H
00A2 7A00        R     MOV     R2,#HIGH findinfo
00A4 7900        R     MOV     R1,#LOW findinfo
00A6 22                RET     
00A7         L?0285:
00A7 900000      R     MOV     DPTR,#findinfo+07H
00AA 120000      E     LCALL   ?C?PLDXDATA
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 68  

00AD         L?0286:
00AD 74E5              MOV     A,#0E5H
00AF 120000      E     LCALL   ?C?CSTPTR
00B2         L?0287:
00B2 900000      R     MOV     DPTR,#findinfo
00B5 020000      E     LJMP    ?C?LLDXDATA
00B8         L?0288:
00B8 120000      E     LCALL   ?C?LADD
00BB         L?0289:
00BB 900000      R     MOV     DPTR,#f
00BE 020000      E     LJMP    ?C?PLDXDATA
00C1         L?0290:
00C1         L?0291:
00C1 120000      E     LCALL   ?C?LLDOPTR
00C4 EF                MOV     A,R7
00C5 FB                MOV     R3,A
00C6 EE                MOV     A,R6
00C7 5401              ANL     A,#01H
00C9 FA                MOV     R2,A
00CA E4                CLR     A
00CB C3                CLR     C
00CC 9B                SUBB    A,R3
00CD FF                MOV     R7,A
00CE 7402              MOV     A,#02H
00D0 9A                SUBB    A,R2
00D1 FE                MOV     R6,A
00D2 E4                CLR     A
00D3 9400              SUBB    A,#00H
00D5 FD                MOV     R5,A
00D6 E4                CLR     A
00D7 9400              SUBB    A,#00H
00D9 FC                MOV     R4,A
00DA 22                RET     
00DB         L?0292:
00DB 900000      R     MOV     DPTR,#entry
00DE         L?0293:
00DE 120000      E     LCALL   ?C?PLDXDATA
00E1 90001A            MOV     DPTR,#01AH
00E4 EE                MOV     A,R6
00E5 8FF0              MOV     B,R7
00E7 120000      E     LCALL   ?C?ISTOPTR
00EA 7410              MOV     A,#010H
00EC         L?0294:
00EC 90000B            MOV     DPTR,#0BH
00EF 020000      E     LJMP    ?C?CSTOPTR
00F2         L?0295:
00F2 74FF              MOV     A,#0FFH
00F4 FF                MOV     R7,A
00F5 FE                MOV     R6,A
00F6 FD                MOV     R5,A
00F7 FC                MOV     R4,A
00F8         L?0296:
00F8 120000      E     LCALL   ?C?LLDXDATA0
00FB C3                CLR     C
00FC 020000      E     LJMP    ?C?ULCMP
00FF         L?0297:
00FF 900000      R     MOV     DPTR,#dir_deep
0102 E0                MOVX    A,@DPTR
0103 FA                MOV     R2,A
0104 A3                INC     DPTR
0105 E0                MOVX    A,@DPTR
0106 FB                MOV     R3,A
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 69  

0107 A3                INC     DPTR
0108 75F006            MOV     B,#06H
010B         L?0298:
010B 120000      E     LCALL   ?C?OFFXADD
010E EA                MOV     A,R2
010F 75F006            MOV     B,#06H
0112 A4                MUL     AB
0113 2583              ADD     A,DPH
0115 F583              MOV     DPH,A
0117 22                RET     
0118         L?0299:
0118 EF                MOV     A,R7
0119 24FF              ADD     A,#0FFH
011B FF                MOV     R7,A
011C EE                MOV     A,R6
011D 34FF              ADDC    A,#0FFH
011F FE                MOV     R6,A
0120 ED                MOV     A,R5
0121 34FF              ADDC    A,#0FFH
0123 FD                MOV     R5,A
0124 EC                MOV     A,R4
0125 34FF              ADDC    A,#0FFH
0127 FC                MOV     R4,A
0128         L?0300:
0128 E4                CLR     A
0129 FB                MOV     R3,A
012A 7A02              MOV     R2,#02H
012C F9                MOV     R1,A
012D F8                MOV     R0,A
012E 020000      E     LJMP    ?C?ULDIV
0131         L?0301:
0131 EE                MOV     A,R6
0132 F0                MOVX    @DPTR,A
0133 EF                MOV     A,R7
0134         L?0302:
0134 A3                INC     DPTR
0135 F0                MOVX    @DPTR,A
0136 A3                INC     DPTR
0137         L?0303:
0137 7B01              MOV     R3,#01H
0139 7A00        E     MOV     R2,#HIGH Scratch
013B 7900        E     MOV     R1,#LOW Scratch
013D 020000      E     LJMP    ?C?PSTXDATA
0140         L?0304:
0140 900000      R     MOV     DPTR,#f
0143         L?0305:
0143 120000      E     LCALL   ?C?PLDXDATA
0146         L?0306:
0146 90000F            MOV     DPTR,#0FH
0149 020000      E     LJMP    ?C?LLDOPTR
014C         L?0307:
014C 900000      R     MOV     DPTR,#findinfo
014F 120000      E     LCALL   ?C?PLDXDATA
0152 E4                CLR     A
0153         L?0308:
0153 900004            MOV     DPTR,#04H
0156 F5F0              MOV     B,A
0158 020000      E     LJMP    ?C?ISTOPTR
015B         L?0309:
015B         L?0310:
015B 7BFF              MOV     R3,#0FFH
015D 7A00        R     MOV     R2,#HIGH ?SC_3
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 70  

015F 7900        R     MOV     R1,#LOW ?SC_3
0161 900000      E     MOV     DPTR,#?_strstr?BYTE+03H
0164 020000      E     LJMP    ?C?PSTXDATA
0167         L?0311:
0167 7800        R     MOV     R0,#LOW first_part_of_dir
0169 7C00        R     MOV     R4,#HIGH first_part_of_dir
016B 7D01              MOV     R5,#01H
016D         L?0312:
016D 900000      R     MOV     DPTR,#dir_name
0170 020000      E     LJMP    ?C?PLDXDATA
0173         L?0313:
0173 900000      R     MOV     DPTR,#from
0176         L?0314:
0176 AC06              MOV     R4,AR6
0178 AD07              MOV     R5,AR7
017A         L?0315:
017A E0                MOVX    A,@DPTR
017B 7E00              MOV     R6,#00H
017D 2D                ADD     A,R5
017E FF                MOV     R7,A
017F EE                MOV     A,R6
0180 3C                ADDC    A,R4
0181 22                RET     
0182         L?0316:
0182         L?0317:
0182 E4                CLR     A
0183 75F001            MOV     B,#01H
0186 020000      E     LJMP    ?C?IILDX
0189         L?0318:
0189 900000      R     MOV     DPTR,#findinfo+04H
018C E0                MOVX    A,@DPTR
018D FE                MOV     R6,A
018E A3                INC     DPTR
018F E0                MOVX    A,@DPTR
0190 2400        E     ADD     A,#LOW Scratch
0192 F9                MOV     R1,A
0193 7400        E     MOV     A,#HIGH Scratch
0195 3E                ADDC    A,R6
0196 900000      R     MOV     DPTR,#findinfo+07H
0199         L?0319:
0199 FA                MOV     R2,A
019A 7B01              MOV     R3,#01H
019C 020000      E     LJMP    ?C?PSTXDATA
019F         L?0320:
019F E4                CLR     A
01A0 FC                MOV     R4,A
01A1 FD                MOV     R5,A
01A2 020000      E     LJMP    ?C?PLDXDATA
01A5         L?0321:
01A5         L?0322:
01A5 E0                MOVX    A,@DPTR
01A6 FE                MOV     R6,A
01A7 A3                INC     DPTR
01A8 E0                MOVX    A,@DPTR
01A9 FF                MOV     R7,A
01AA C3                CLR     C
01AB 22                RET     
01AC         L?0323:
01AC 900000      R     MOV     DPTR,#file_name
01AF 120000      E     LCALL   ?C?PLDXDATA
01B2 900000      R     MOV     DPTR,#k
01B5 E4                CLR     A
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 71  

01B6 75F001            MOV     B,#01H
01B9 120000      E     LCALL   ?C?ILDIX
01BC 85F082            MOV     DPL,B
01BF F583              MOV     DPH,A
01C1 22                RET     
01C2         L?0324:
01C2 900000      R     MOV     DPTR,#dirname
01C5         L?0325:
01C5 120000      E     LCALL   ?C?PLDXDATA
01C8         L?0326:
01C8 A801              MOV     R0,AR1
01CA AC02              MOV     R4,AR2
01CC AD03              MOV     R5,AR3
01CE 22                RET     
01CF         L?0327:
01CF E4                CLR     A
01D0 FC                MOV     R4,A
01D1 FD                MOV     R5,A
01D2 020000      E     LJMP    ?C?LSTXDATA
01D5         L?0329:
01D5         L?0330:
01D5 900000      E     MOV     DPTR,#MBR+010H
01D8 E0                MOVX    A,@DPTR
01D9 FB                MOV     R3,A
01DA E4                CLR     A
01DB FA                MOV     R2,A
01DC 22                RET     
01DD         L?0331:
01DD E9                MOV     A,R1
01DE 240C              ADD     A,#0CH
01E0 F9                MOV     R1,A
01E1 E4                CLR     A
01E2 3A                ADDC    A,R2
01E3 FA                MOV     R2,A
01E4 7E00              MOV     R6,#00H
01E6 E9                MOV     A,R1
01E7 2F                ADD     A,R7
01E8 F9                MOV     R1,A
01E9 EE                MOV     A,R6
01EA 3A                ADDC    A,R2
01EB FA                MOV     R2,A
01EC E4                CLR     A
01ED 020000      E     LJMP    ?C?CSTPTR
01F0         L?0332:
01F0 120000      E     LCALL   ?C?PSTXDATA
01F3         L?0333:
01F3 900000      R     MOV     DPTR,#findinfo+07H
01F6 020000      E     LJMP    ?C?PLDXDATA
01F9         L?0334:
01F9         L?0335:
01F9 900000      R     MOV     DPTR,#tmp
01FC 020000      E     LJMP    ?C?PLDXDATA
01FF         L?0336:
01FF 900000      E     MOV     DPTR,#MBR+010H
0202 E0                MOVX    A,@DPTR
0203 FD                MOV     R5,A
0204 7C00              MOV     R4,#00H
0206 900000      R     MOV     DPTR,#nr
0209 E0                MOVX    A,@DPTR
020A FE                MOV     R6,A
020B A3                INC     DPTR
020C E0                MOVX    A,@DPTR
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 72  

020D FF                MOV     R7,A
020E 020000      E     LJMP    ?C?UIDIV
0211         L?0337:
0211 E0                MOVX    A,@DPTR
0212 FE                MOV     R6,A
0213 A3                INC     DPTR
0214 E0                MOVX    A,@DPTR
0215 FF                MOV     R7,A
0216 A3                INC     DPTR
0217         L?0338:
0217 EE                MOV     A,R6
0218 8FF0              MOV     B,R7
021A 020000      E     LJMP    ?C?IILDX
021D         L?0339:
021D         L?0340:
021D 900000      R     MOV     DPTR,#findinfo
0220 020000      E     LJMP    ?C?PLDXDATA
0223         L?0341:
0223 FF                MOV     R7,A
0224 7E00              MOV     R6,#00H
0226 E0                MOVX    A,@DPTR
0227 FC                MOV     R4,A
0228 A3                INC     DPTR
0229 E0                MOVX    A,@DPTR
022A FD                MOV     R5,A
022B 120000      E     LCALL   ?C?IMUL
022E EB                MOV     A,R3
022F 2F                ADD     A,R7
0230 FF                MOV     R7,A
0231 EA                MOV     A,R2
0232 3E                ADDC    A,R6
0233 FE                MOV     R6,A
0234 22                RET     
0235         L?0342:
0235         L?0343:
0235 900000      R     MOV     DPTR,#filename
0238 120000      E     LCALL   ?C?PLDXDATA
023B 900000      R     MOV     DPTR,#j
023E 22                RET     
023F         L?0344:
023F         L?0345:
023F 74FF              MOV     A,#0FFH
0241 F5F0              MOV     B,A
0243 020000      E     LJMP    ?C?IILDX
0246         L?0346:
0246         L?0347:
0246 E4                CLR     A
0247 F5F0              MOV     B,A
0249 020000      E     LJMP    ?C?ISTOPTR
024C         L?0348:
024C         L?0349:
024C 900000      R     MOV     DPTR,#f
024F 020000      E     LJMP    ?C?PLDXDATA
0252         L?0350:
0252         L?0351:
0252 900000      R     MOV     DPTR,#mode
0255 120000      E     LCALL   ?C?PLDXDATA
0258 020000      E     LJMP    ?C?CLDPTR
025B         L?0352:
025B         L?0353:
025B 900000      R     MOV     DPTR,#f
025E 020000      E     LJMP    ?C?PLDXDATA
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 73  

0261         L?0354:
0261         L?0355:
0261 900002            MOV     DPTR,#02H
0264 120000      E     LCALL   ?C?LLDOPTR0
0267 020000      E     LJMP    ?C?LADD
026A         L?0356:
026A         L?0357:
026A 900000      R     MOV     DPTR,#findinfo
026D 020000      E     LJMP    ?C?PLDXDATA
0270         L?0358:
0270 120000      E     LCALL   ?C?LLDOPTR
0273 EE                MOV     A,R6
0274 5401              ANL     A,#01H
0276 FE                MOV     R6,A
0277 7400        E     MOV     A,#LOW Scratch
0279 2F                ADD     A,R7
027A F9                MOV     R1,A
027B 7400        E     MOV     A,#HIGH Scratch
027D 3E                ADDC    A,R6
027E 22                RET     
027F         L?0359:
027F AB07              MOV     R3,AR7
0281 AA06              MOV     R2,AR6
0283 E4                CLR     A
0284 F9                MOV     R1,A
0285 F8                MOV     R0,A
0286 020000      E     LJMP    ?C?LLDXDATA
0289         L?0360:
0289         L?0361:
0289 900000      R     MOV     DPTR,#start_cluster
028C E0                MOVX    A,@DPTR
028D FE                MOV     R6,A
028E A3                INC     DPTR
028F E0                MOVX    A,@DPTR
0290 FF                MOV     R7,A
0291 22                RET     
0292         L?0362:
0292         L?0363:
0292 900000      R     MOV     DPTR,#alloced
0295 E0                MOVX    A,@DPTR
0296 FE                MOV     R6,A
0297 A3                INC     DPTR
0298 E0                MOVX    A,@DPTR
0299 FF                MOV     R7,A
029A 22                RET     
029B         L?0364:
029B         L?0365:
029B 900000      R     MOV     DPTR,#direntry
029E 020000      E     LJMP    ?C?PLDXDATA
02A1         L?0366:
02A1 120000      E     LCALL   ?C?CSTOPTR
02A4         L?0367:
02A4 900000      R     MOV     DPTR,#i
02A7 E0                MOVX    A,@DPTR
02A8 04                INC     A
02A9 F0                MOVX    @DPTR,A
02AA 22                RET     
02AB         L?0368:
02AB         L?0369:
02AB 7BFF              MOV     R3,#0FFH
02AD 7A00        R     MOV     R2,#HIGH ?SC_7
02AF 7900        R     MOV     R1,#LOW ?SC_7
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 74  

02B1 22                RET     
02B2         L?0370:
02B2 120000      E     LCALL   ?C?CSTOPTR
02B5         L?0371:
02B5 900000      R     MOV     DPTR,#i
02B8 E0                MOVX    A,@DPTR
02B9 04                INC     A
02BA F0                MOVX    @DPTR,A
02BB 22                RET     
02BC         L?0372:
02BC 7D01              MOV     R5,#01H
02BE         L?0373:
02BE 7BFF              MOV     R3,#0FFH
02C0 7A00        R     MOV     R2,#HIGH ?SC_3
02C2 7900        R     MOV     R1,#LOW ?SC_3
02C4 22                RET     
02C5         L?0374:
02C5         L?0375:
02C5 E9                MOV     A,R1
02C6 2401              ADD     A,#01H
02C8 F9                MOV     R1,A
02C9 E4                CLR     A
02CA 3A                ADDC    A,R2
02CB FA                MOV     R2,A
02CC 22                RET     
02CD         L?0376:
02CD A801              MOV     R0,AR1
02CF FC                MOV     R4,A
02D0 7D01              MOV     R5,#01H
02D2 020000      E     LJMP    ?C?PLDXDATA
02D5         L?0377:
02D5 120000      E     LCALL   ?C?LSUB
02D8 A804              MOV     R0,AR4
02DA A905              MOV     R1,AR5
02DC AA06              MOV     R2,AR6
02DE AB07              MOV     R3,AR7
02E0 22                RET     
02E1         L?0378:
02E1         L?0379:
02E1 E9                MOV     A,R1
02E2 240B              ADD     A,#0BH
02E4 F9                MOV     R1,A
02E5 E4                CLR     A
02E6 3A                ADDC    A,R2
02E7 FA                MOV     R2,A
02E8 22                RET     
02E9         L?0380:
02E9 900000      R     MOV     DPTR,#index
02EC F0                MOVX    @DPTR,A
02ED A3                INC     DPTR
02EE EF                MOV     A,R7
02EF F0                MOVX    @DPTR,A
02F0 22                RET     
02F1         L?0381:
02F1 120000      E     LCALL   ?C?ILDOPTR
02F4 2400        E     ADD     A,#LOW Scratch
02F6 F9                MOV     R1,A
02F7 7400        E     MOV     A,#HIGH Scratch
02F9 35F0              ADDC    A,B
02FB 22                RET     
02FC         L?0382:
02FC         L?0383:
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 75  

02FC 7B01              MOV     R3,#01H
02FE 7A00        R     MOV     R2,#HIGH Path_Name
0300 7900        R     MOV     R1,#LOW Path_Name
0302 22                RET     
0303         L?0384:
0303         L?0385:
0303 E4                CLR     A
0304 FC                MOV     R4,A
0305 FD                MOV     R5,A
0306 900000      R     MOV     DPTR,#Current_Dir_Block
0309 22                RET     
030A         L?0386:
030A         L?0387:
030A 900000      R     MOV     DPTR,#i
030D E0                MOVX    A,@DPTR
030E FF                MOV     R7,A
030F C3                CLR     C
0310 22                RET     
0311         L?0388:
0311         L?0389:
0311 900000      R     MOV     DPTR,#pos
0314 020000      E     LJMP    ?C?PLDXDATA
0317         L?0390:
0317         L?0391:
0317 900000      R     MOV     DPTR,#dir_name
031A 020000      E     LJMP    ?C?PLDXDATA
031D         L?0392:
031D         L?0393:
031D 900000      R     MOV     DPTR,#i
0320 E0                MOVX    A,@DPTR
0321 FF                MOV     R7,A
0322 C3                CLR     C
0323 22                RET     
0324         L?0394:
0324         L?0395:
0324 900000      R     MOV     DPTR,#filename
0327 020000      E     LJMP    ?C?PLDXDATA
032A         L?0396:
032A         L?0397:
032A 900002            MOV     DPTR,#02H
032D 020000      E     LJMP    ?C?LSTOPTR
0330         L?0398:
0330         L?0399:
0330 900013            MOV     DPTR,#013H
0333 020000      E     LJMP    ?C?CLDOPTR
0336         L?0400:
0336         L?0401:
0336 900000      R     MOV     DPTR,#from
0339 020000      E     LJMP    ?C?LSTXDATA
033C         L?0402:
033C         L?0403:
033C 900000      R     MOV     DPTR,#from
033F 020000      E     LJMP    ?C?LLDXDATA
0342         L?0404:
0342         L?0405:
0342 900000      R     MOV     DPTR,#from
0345 020000      E     LJMP    ?C?LLDXDATA0
0348         L?0406:
0348 900000      E     MOV     DPTR,#MBR+010H
034B E0                MOVX    A,@DPTR
034C FF                MOV     R7,A
034D E4                CLR     A
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 76  

034E FC                MOV     R4,A
034F FD                MOV     R5,A
0350 FE                MOV     R6,A
0351 22                RET     
0352         L?0407:
0352 120000      E     LCALL   ?C?ILDPTR
0355 FF                MOV     R7,A
0356 AEF0              MOV     R6,B
0358 E4                CLR     A
0359 FC                MOV     R4,A
035A FD                MOV     R5,A
035B 22                RET     
035C         L?0408:
035C 120000      E     LCALL   ?C?LLDPTR0
035F E4                CLR     A
0360 FC                MOV     R4,A
0361 FD                MOV     R5,A
0362 020000      E     LJMP    ?C?LADD
0365         L?0409:
0365         L?0410:
0365 120000      E     LCALL   ?C?LLDOPTR0
0368 900000      R     MOV     DPTR,#count
036B 22                RET     
036C         L?0411:
036C 120000      E     LCALL   ?C?ULDIV
036F EF                MOV     A,R7
0370 2401              ADD     A,#01H
0372 FF                MOV     R7,A
0373 E4                CLR     A
0374 3E                ADDC    A,R6
0375 22                RET     
0376         L?0412:
0376         L?0413:
0376 900000      R     MOV     DPTR,#dir_next_cluster_block
0379 020000      E     LJMP    ?C?LLDXDATA
             ; FUNCTION Com00FD (END)

             ; FUNCTION _file_name_match (BEGIN)
                                           ; SOURCE LINE # 57
0000 900000      R     MOV     DPTR,#filename
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 59
0006 120000      E     LCALL   ?C?CLDPTR
0009 900000      R     MOV     DPTR,#j
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 60
000D E4                CLR     A
000E 900000      R     MOV     DPTR,#i
0011 F0                MOVX    @DPTR,A
0012         ?C0001:
0012 900000      R     MOV     DPTR,#i
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 C3                CLR     C
0018 9408              SUBB    A,#08H
001A 503B              JNC     ?C0002
                                           ; SOURCE LINE # 61
001C 900000      R     MOV     DPTR,#direntryname
001F 120000      E     LCALL   ?C?PLDXDATA
0022 8F82              MOV     DPL,R7
0024 120000      R     LCALL   L?0262
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 77  

0027 FF                MOV     R7,A
0028 6420              XRL     A,#020H
002A 7017              JNZ     ?C0004
002C 120000      R     LCALL   L?0257
002F FE                MOV     R6,A
0030 6003              JZ      ?C0005
0032 B42E0E            CJNE    A,#02EH,?C0004
0035         ?C0005:
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 63
0035 900000      R     MOV     DPTR,#j
0038 E0                MOVX    A,@DPTR
0039 642E              XRL     A,#02EH
003B 701A              JNZ     ?C0002
003D 120000      R     LCALL   L?0257
0040 B42E14            CJNE    A,#02EH,?C0002
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
0043         ?C0004:
                                           ; SOURCE LINE # 66
0043 120000      E     LCALL   _tolower
0046 120000      R     LCALL   L?0258
0049 6F                XRL     A,R7
004A 6003              JZ      ?C0003
                                           ; SOURCE LINE # 67
004C 7F00              MOV     R7,#00H
004E 22                RET     
                                           ; SOURCE LINE # 68
004F         ?C0003:
004F 900000      R     MOV     DPTR,#i
0052 E0                MOVX    A,@DPTR
0053 04                INC     A
0054 F0                MOVX    @DPTR,A
0055 80BB              SJMP    ?C0001
0057         ?C0002:
                                           ; SOURCE LINE # 69
0057 900000      R     MOV     DPTR,#i
005A E0                MOVX    A,@DPTR
005B 04                INC     A
005C A3                INC     DPTR
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 70
005E 900000      R     MOV     DPTR,#i
0061 7408              MOV     A,#08H
0063 F0                MOVX    @DPTR,A
0064         ?C0010:
0064 900000      R     MOV     DPTR,#i
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 C3                CLR     C
006A 940B              SUBB    A,#0BH
006C 506C              JNC     ?C0011
                                           ; SOURCE LINE # 71
006E 120000      R     LCALL   L?0342
0071 120000      R     LCALL   L?0260
0074 FE                MOV     R6,A
0075 7012              JNZ     ?C0013
0077 900000      R     MOV     DPTR,#direntryname
007A 120000      E     LCALL   ?C?PLDXDATA
007D 8F82              MOV     DPL,R7
007F 120000      R     LCALL   L?0262
0082 6420              XRL     A,#020H
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 78  

0084 6003              JZ      ?C0013
                                           ; SOURCE LINE # 72
0086 7F00              MOV     R7,#00H
0088 22                RET     
0089         ?C0013:
                                           ; SOURCE LINE # 73
0089 900000      R     MOV     DPTR,#direntryname
008C 120000      R     LCALL   L?0259
008F 6420              XRL     A,#020H
0091 7022              JNZ     ?C0014
0093 EE                MOV     A,R6
0094 6044              JZ      ?C0011
0096 120000      R     LCALL   L?0342
0099 E0                MOVX    A,@DPTR
009A FF                MOV     R7,A
009B 120000      R     LCALL   L?0261
009E 642E              XRL     A,#02EH
00A0 6038              JZ      ?C0011
00A2 EF                MOV     A,R7
00A3 24FF              ADD     A,#0FFH
00A5 FF                MOV     R7,A
00A6 E4                CLR     A
00A7 34FF              ADDC    A,#0FFH
00A9 FE                MOV     R6,A
00AA 900000      R     MOV     DPTR,#filename
00AD 120000      R     LCALL   L?0271
00B0 120000      E     LCALL   ?C?CLDOPTR
00B3 6025              JZ      ?C0011
                                           ; SOURCE LINE # 75
00B5         ?C0014:
                                           ; SOURCE LINE # 76
00B5 900000      R     MOV     DPTR,#direntryname
00B8 120000      R     LCALL   L?0259
00BB FF                MOV     R7,A
00BC 120000      E     LCALL   _tolower
00BF 120000      R     LCALL   L?0343
00C2 120000      R     LCALL   L?0260
00C5 6F                XRL     A,R7
00C6 6003              JZ      ?C0016
                                           ; SOURCE LINE # 77
00C8 7F00              MOV     R7,#00H
00CA 22                RET     
00CB         ?C0016:
                                           ; SOURCE LINE # 78
00CB 900000      R     MOV     DPTR,#j
00CE E0                MOVX    A,@DPTR
00CF 04                INC     A
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 79
00D1 900000      R     MOV     DPTR,#i
00D4 E0                MOVX    A,@DPTR
00D5 04                INC     A
00D6 F0                MOVX    @DPTR,A
00D7 020000      R     LJMP    ?C0010
00DA         ?C0011:
                                           ; SOURCE LINE # 80
00DA 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 81
00DC         ?C0009:
00DC 22                RET     
             ; FUNCTION _file_name_match (END)

C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 79  

             ; FUNCTION write_current_dir (BEGIN)
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
0000 120000      R     LCALL   L?0382
0003 900000      E     MOV     DPTR,#?_printf?BYTE+03H
0006 120000      E     LCALL   ?C?PSTXDATA
0009 7BFF              MOV     R3,#0FFH
000B 7A00        R     MOV     R2,#HIGH ?SC_0
000D 7900        R     MOV     R1,#LOW ?SC_0
000F 020000      E     LJMP    _printf
             ; FUNCTION write_current_dir (END)

             ; FUNCTION GetClusterOfParentDirectory (BEGIN)
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
0000 120000      E     LCALL   Sect_Root_Dir
0003 120000      R     LCALL   L?0384
0006 120000      R     LCALL   L?0296
0009 7003              JNZ     ?C0018
000B FE                MOV     R6,A
000C FF                MOV     R7,A
000D 22                RET     
000E         ?C0018:
                                           ; SOURCE LINE # 126
000E 120000      E     LCALL   Sect_File_Data
0011 900000      R     MOV     DPTR,#Current_Dir_Block
0014 120000      R     LCALL   L?0359
0017 120000      E     LCALL   ?C?LSUB
001A C007              PUSH    AR7
001C 120000      R     LCALL   L?0329
001F F8                MOV     R0,A
0020 D007              POP     AR7
0022 120000      E     LCALL   ?C?ULDIV
                                           ; SOURCE LINE # 127
0025         ?C0019:
0025 22                RET     
             ; FUNCTION GetClusterOfParentDirectory (END)

             ; FUNCTION _Get_Cluster_From_Sector (BEGIN)
                                           ; SOURCE LINE # 138
0000 900000      R     MOV     DPTR,#sector
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 140
0006 120000      E     LCALL   Sect_File_Data
0009 AC06              MOV     R4,AR6
000B AD07              MOV     R5,AR7
000D 900000      E     MOV     DPTR,#MBR+010H
0010 E0                MOVX    A,@DPTR
0011 75F002            MOV     B,#02H
0014 A4                MUL     AB
0015 2D                ADD     A,R5
0016 FF                MOV     R7,A
0017 EC                MOV     A,R4
0018 35F0              ADDC    A,B
001A FE                MOV     R6,A
001B E4                CLR     A
001C FC                MOV     R4,A
001D FD                MOV     R5,A
001E 900000      R     MOV     DPTR,#sector
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 80  

0021 120000      R     LCALL   L?0296
0024 5004              JNC     ?C0020
0026 E4                CLR     A
0027 FE                MOV     R6,A
0028 FF                MOV     R7,A
0029 22                RET     
002A         ?C0020:
                                           ; SOURCE LINE # 141
002A 120000      E     LCALL   Sect_File_Data
002D 900000      R     MOV     DPTR,#sector
0030 120000      R     LCALL   L?0359
0033 120000      E     LCALL   ?C?LSUB
0036 C007              PUSH    AR7
0038 120000      R     LCALL   L?0329
003B F8                MOV     R0,A
003C D007              POP     AR7
003E 120000      E     LCALL   ?C?ULDIV
                                           ; SOURCE LINE # 142
0041         ?C0021:
0041 22                RET     
             ; FUNCTION _Get_Cluster_From_Sector (END)

             ; FUNCTION _Get_First_Sector (BEGIN)
                                           ; SOURCE LINE # 153
0000 900000      R     MOV     DPTR,#cluster
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
0008 C3                CLR     C
0009 9402              SUBB    A,#02H
000B EE                MOV     A,R6
000C 9400              SUBB    A,#00H
000E 4013              JC      ?C0022
0010 120000      E     LCALL   Sect_File_Data
0013 AA06              MOV     R2,AR6
0015 AB07              MOV     R3,AR7
0017 900000      E     MOV     DPTR,#MBR+010H
001A E0                MOVX    A,@DPTR
001B 900000      R     MOV     DPTR,#cluster
001E 120000      R     LCALL   L?0341
0021 8003              SJMP    ?C0247
0023         ?C0022:
                                           ; SOURCE LINE # 156
0023 120000      E     LCALL   Sect_Root_Dir
0026         ?C0247:
0026 E4                CLR     A
0027 FC                MOV     R4,A
0028 FD                MOV     R5,A
                                           ; SOURCE LINE # 157
0029         ?C0023:
0029 22                RET     
             ; FUNCTION _Get_First_Sector (END)

             ; FUNCTION _Get_First_Block_Of_Next_Cluster (BEGIN)
                                           ; SOURCE LINE # 170
;---- Variable 'cluster' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 81  

0000 E4                CLR     A
0001 FC                MOV     R4,A
0002 FD                MOV     R5,A
0003 900000      E     MOV     DPTR,#MBR+010H
0006 E0                MOVX    A,@DPTR
0007 FB                MOV     R3,A
0008 900000      R     MOV     DPTR,#?_fat_chain?BYTE+04H
000B E4                CLR     A
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E EB                MOV     A,R3
000F F0                MOVX    @DPTR,A
0010 120000      R     LCALL   _fat_chain
0013 900000      R     MOV     DPTR,#ret
0016 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 173
0019 900000      R     MOV     DPTR,#ret
001C 120000      R     LCALL   L?0295
001F 600F              JZ      ?C0025
                                           ; SOURCE LINE # 174
0021 120000      E     LCALL   Sect_File_Data
0024 E4                CLR     A
0025 FC                MOV     R4,A
0026 FD                MOV     R5,A
0027 900000      R     MOV     DPTR,#ret
002A 120000      E     LCALL   ?C?LLDXDATA0
002D 020000      E     LJMP    ?C?LADD
0030         ?C0025:
                                           ; SOURCE LINE # 175
0030 900000      R     MOV     DPTR,#ret
0033 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 176
0036         ?C0026:
0036 22                RET     
             ; FUNCTION _Get_First_Block_Of_Next_Cluster (END)

             ; FUNCTION _Get_Next_Cluster (BEGIN)
                                           ; SOURCE LINE # 187
0000 900000      R     MOV     DPTR,#cluster
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 189
0003 120000      R     LCALL   L?0301
                                           ; SOURCE LINE # 191
0006 120000      E     LCALL   Sect_Fat1
0009 900000      R     MOV     DPTR,#cluster
000C 120000      R     LCALL   L?0314
000F FE                MOV     R6,A
0010 E4                CLR     A
0011 FC                MOV     R4,A
0012 FD                MOV     R5,A
0013 120000      E     LCALL   _Sect_Read
                                           ; SOURCE LINE # 193
0016 900000      R     MOV     DPTR,#cluster+01H
0019 E0                MOVX    A,@DPTR
001A 25E0              ADD     A,ACC
001C FF                MOV     R7,A
001D E4                CLR     A
001E 33                RLC     A
001F FE                MOV     R6,A
0020 A3                INC     DPTR
0021 120000      R     LCALL   L?0271
0024 120000      R     LCALL   L?0266
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 82  

0027 120000      E     LCALL   _htons
                                           ; SOURCE LINE # 194
002A         ?C0027:
002A 22                RET     
             ; FUNCTION _Get_Next_Cluster (END)

             ; FUNCTION _Get_File_Name (BEGIN)
                                           ; SOURCE LINE # 207
0000 900000      R     MOV     DPTR,#direntry_name
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
0006 E4                CLR     A
0007 900000      R     MOV     DPTR,#j
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E F0                MOVX    @DPTR,A
000F A3                INC     DPTR
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 210
0011 900000      R     MOV     DPTR,#i
0014 F0                MOVX    @DPTR,A
0015 A3                INC     DPTR
0016 F0                MOVX    @DPTR,A
0017         ?C0028:
0017 900000      R     MOV     DPTR,#i
001A 120000      R     LCALL   L?0321
001D 940B              SUBB    A,#0BH
001F EE                MOV     A,R6
0020 9400              SUBB    A,#00H
0022 5057              JNC     ?C0029
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
0024 900000      R     MOV     DPTR,#direntry_name
0027 120000      R     LCALL   L?0271
002A 120000      E     LCALL   ?C?CLDOPTR
002D B4200A            CJNE    A,#020H,?C0031
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
0030 900000      R     MOV     DPTR,#j
0033 E4                CLR     A
0034 F0                MOVX    @DPTR,A
0035 A3                INC     DPTR
0036 04                INC     A
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 215
0038 8038              SJMP    ?C0030
                                           ; SOURCE LINE # 216
003A         ?C0031:
                                           ; SOURCE LINE # 217
003A 900000      R     MOV     DPTR,#j
003D E0                MOVX    A,@DPTR
003E 7002              JNZ     ?C0221
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042         ?C0221:
0042 600F              JZ      ?C0032
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
0044 120000      R     LCALL   L?0323
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 83  

0047 742E              MOV     A,#02EH
0049 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 220
004C E4                CLR     A
004D 900000      R     MOV     DPTR,#j
0050 F0                MOVX    @DPTR,A
0051 A3                INC     DPTR
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
0053         ?C0032:
                                           ; SOURCE LINE # 222
0053 900000      R     MOV     DPTR,#direntry_name
0056 120000      E     LCALL   ?C?PLDXDATA
0059 900000      R     MOV     DPTR,#i
005C E0                MOVX    A,@DPTR
005D FE                MOV     R6,A
005E A3                INC     DPTR
005F E0                MOVX    A,@DPTR
0060 F582              MOV     DPL,A
0062 8E83              MOV     DPH,R6
0064 120000      E     LCALL   ?C?CLDOPTR
0067 FF                MOV     R7,A
0068 120000      E     LCALL   _tolower
006B 120000      R     LCALL   L?0323
006E EF                MOV     A,R7
006F 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 223
0072         ?C0030:
0072 900000      R     MOV     DPTR,#i
0075 120000      R     LCALL   L?0316
0078 020000      R     LJMP    ?C0028
007B         ?C0029:
                                           ; SOURCE LINE # 224
007B 900000      R     MOV     DPTR,#file_name
007E 120000      E     LCALL   ?C?PLDXDATA
0081 900000      R     MOV     DPTR,#k
0084 E0                MOVX    A,@DPTR
0085 FE                MOV     R6,A
0086 A3                INC     DPTR
0087 E0                MOVX    A,@DPTR
0088 F582              MOV     DPL,A
008A 8E83              MOV     DPH,R6
008C E4                CLR     A
008D 020000      E     LJMP    ?C?CSTOPTR
             ; FUNCTION _Get_File_Name (END)

             ; FUNCTION _Get_First_Block_Directory_Cluster (BEGIN)
                                           ; SOURCE LINE # 238
;---- Variable 'sector' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 239
                                           ; SOURCE LINE # 240
0000 120000      R     LCALL   _Get_Cluster_From_Sector
0003 900000      R     MOV     DPTR,#cluster
0006 EE                MOV     A,R6
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 241
000B 120000      R     LCALL   GetClusterOfParentDirectory
;---- Variable 'next_dir_cluster' assigned to Register 'R6/R7' ----
000E         ?C0034:
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 84  

                                           ; SOURCE LINE # 242
000E 900000      R     MOV     DPTR,#cluster
0011 E0                MOVX    A,@DPTR
0012 6E                XRL     A,R6
0013 7003              JNZ     ?C0222
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 6F                XRL     A,R7
0018         ?C0222:
0018 6010              JZ      ?C0035
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
001A 120000      R     LCALL   _Get_Next_Cluster
                                           ; SOURCE LINE # 245
001D C3                CLR     C
001E EF                MOV     A,R7
001F 94F8              SUBB    A,#0F8H
0021 EE                MOV     A,R6
0022 94FF              SUBB    A,#0FFH
0024 40E8              JC      ?C0034
0026 E4                CLR     A
0027 FC                MOV     R4,A
0028 FD                MOV     R5,A
0029 22                RET     
                                           ; SOURCE LINE # 246
002A         ?C0035:
                                           ; SOURCE LINE # 247
002A 900000      R     MOV     DPTR,#cluster
002D E0                MOVX    A,@DPTR
002E FE                MOV     R6,A
002F A3                INC     DPTR
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 120000      R     LCALL   _Get_First_Sector
                                           ; SOURCE LINE # 248
0035         ?C0037:
0035 22                RET     
             ; FUNCTION _Get_First_Block_Directory_Cluster (END)

             ; FUNCTION _Clear_Cluster (BEGIN)
                                           ; SOURCE LINE # 260
;---- Variable 'cluster' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
0000 120000      R     LCALL   _Get_First_Sector
0003 900000      R     MOV     DPTR,#sector
0006 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 264
0009 7E02              MOV     R6,#02H
000B 7F00              MOV     R7,#00H
000D 7D00              MOV     R5,#00H
000F 7B01              MOV     R3,#01H
0011 7A00        E     MOV     R2,#HIGH Scratch
0013 7900        E     MOV     R1,#LOW Scratch
0015 120000      E     LCALL   ?C?MEMSET
                                           ; SOURCE LINE # 265
0018 E4                CLR     A
0019 900000      R     MOV     DPTR,#i
001C F0                MOVX    @DPTR,A
001D A3                INC     DPTR
001E F0                MOVX    @DPTR,A
001F         ?C0038:
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 85  

001F 900000      E     MOV     DPTR,#MBR+010H
0022 E0                MOVX    A,@DPTR
0023 FD                MOV     R5,A
0024 900000      R     MOV     DPTR,#i
0027 120000      R     LCALL   L?0321
002A 9D                SUBB    A,R5
002B EE                MOV     A,R6
002C 9400              SUBB    A,#00H
002E 5017              JNC     ?C0041
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 267
0030 E4                CLR     A
0031 FC                MOV     R4,A
0032 FD                MOV     R5,A
0033 900000      R     MOV     DPTR,#sector
0036 120000      E     LCALL   ?C?LLDXDATA0
0039 120000      E     LCALL   ?C?LADD
003C 120000      E     LCALL   _Sect_Write
                                           ; SOURCE LINE # 268
003F 900000      R     MOV     DPTR,#i
0042 120000      R     LCALL   L?0317
0045 80D8              SJMP    ?C0038
                                           ; SOURCE LINE # 270
0047         ?C0041:
0047 22                RET     
             ; FUNCTION _Clear_Cluster (END)

             ; FUNCTION _FillDirEntry (BEGIN)
                                           ; SOURCE LINE # 282
0000 900000      R     MOV     DPTR,#direntry
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 285
0006 E4                CLR     A
0007 900000      R     MOV     DPTR,#i
000A F0                MOVX    @DPTR,A
000B         ?C0042:
000B 120000      R     LCALL   L?0386
000E 940A              SUBB    A,#0AH
0010 500B              JNC     ?C0043
                                           ; SOURCE LINE # 286
0012 120000      R     LCALL   L?0364
0015 120000      R     LCALL   L?0331
0018 120000      R     LCALL   L?0367
001B 80EE              SJMP    ?C0042
001D         ?C0043:
                                           ; SOURCE LINE # 288
001D 120000      R     LCALL   L?0333
0020 900018            MOV     DPTR,#018H
0023 120000      R     LCALL   L?0346
0026 120000      R     LCALL   L?0364
0029 900016            MOV     DPTR,#016H
002C 120000      R     LCALL   L?0347
                                           ; SOURCE LINE # 289
002F 90001C            MOV     DPTR,#01CH
0032 120000      E     LCALL   ?C?LSTKOPTR
0035 00                DB      00H
0036 00                DB      00H
0037 00                DB      00H
0038 00                DB      00H
                                           ; SOURCE LINE # 292
0039 E4                CLR     A
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 86  

003A 900000      R     MOV     DPTR,#i
003D F0                MOVX    @DPTR,A
003E         ?C0045:
003E 120000      R     LCALL   L?0386
0041 940B              SUBB    A,#0BH
0043 500F              JNC     ?C0046
                                           ; SOURCE LINE # 293
0045 120000      R     LCALL   L?0365
0048 8F82              MOV     DPL,R7
004A 758300            MOV     DPH,#00H
004D 7420              MOV     A,#020H
004F 120000      R     LCALL   L?0366
0052 80EA              SJMP    ?C0045
0054         ?C0046:
                                           ; SOURCE LINE # 295
0054 E4                CLR     A
0055 900000      R     MOV     DPTR,#i
0058 F0                MOVX    @DPTR,A
0059         ?C0048:
0059 120000      R     LCALL   L?0387
005C 940B              SUBB    A,#0BH
005E 5023              JNC     ?C0052
                                           ; SOURCE LINE # 296
0060 900000      R     MOV     DPTR,#dir_name
0063 120000      E     LCALL   ?C?PLDXDATA
0066 8F82              MOV     DPL,R7
0068 120000      R     LCALL   L?0262
006B FF                MOV     R7,A
006C 6015              JZ      ?C0052
                                           ; SOURCE LINE # 297
006E         ?C0051:
                                           ; SOURCE LINE # 298
006E 120000      E     LCALL   _toupper
0071 120000      R     LCALL   L?0365
0074 900000      R     MOV     DPTR,#i
0077 E0                MOVX    A,@DPTR
0078 F582              MOV     DPL,A
007A 758300            MOV     DPH,#00H
007D EF                MOV     A,R7
                                           ; SOURCE LINE # 299
007E 120000      R     LCALL   L?0366
0081 80D6              SJMP    ?C0048
                                           ; SOURCE LINE # 300
0083         ?C0052:
0083 22                RET     
             ; FUNCTION _FillDirEntry (END)

             ; FUNCTION FileSys_Init (BEGIN)
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 313
0000 120000      E     LCALL   Sect_Root_Dir
0003 900000      R     MOV     DPTR,#Current_Dir_Block
0006 120000      R     LCALL   L?0327
                                           ; SOURCE LINE # 314
0009 7800        R     MOV     R0,#LOW Path_Name
000B 7C00        R     MOV     R4,#HIGH Path_Name
000D 120000      R     LCALL   L?0372
0010 020000      E     LJMP    ?C?STRCPY
             ; FUNCTION FileSys_Init (END)

             ; FUNCTION _chngdir (BEGIN)
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 87  

                                           ; SOURCE LINE # 327
0000 900000      R     MOV     DPTR,#dirname
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
0003 120000      R     LCALL   L?0282
0006 E4                CLR     A
0007 FD                MOV     R5,A
0008 120000      R     LCALL   _findfirst
000B         ?C0054:
                                           ; SOURCE LINE # 330
000B 120000      R     LCALL   L?0280
000E 900000      R     MOV     DPTR,#dirname
0011 120000      E     LCALL   ?C?PLDXDATA
0014 120000      R     LCALL   _file_name_match
0017 EF                MOV     A,R7
0018 700B              JNZ     ?C0055
                                           ; SOURCE LINE # 331
001A 120000      R     LCALL   L?0284
001D 120000      R     LCALL   _findnext
0020 EF                MOV     A,R7
0021 70E8              JNZ     ?C0054
                                           ; SOURCE LINE # 332
0023 FF                MOV     R7,A
0024 22                RET     
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
0025         ?C0055:
                                           ; SOURCE LINE # 335
0025 900000      R     MOV     DPTR,#findinfo+07H
0028 120000      R     LCALL   L?0279
002B 120000      E     LCALL   ?C?CLDOPTR
002E 20E403            JB      ACC.4,$ + 6H
0031 020000      R     LJMP    ?C0058
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 337
0034 90001A            MOV     DPTR,#01AH
0037 120000      E     LCALL   ?C?ILDOPTR
003A 45F0              ORL     A,B
003C 7005              JNZ     ?C0059
                                           ; SOURCE LINE # 338
003E 120000      E     LCALL   Sect_Root_Dir
0041 801F              SJMP    ?C0248
0043         ?C0059:
                                           ; SOURCE LINE # 340
0043 120000      R     LCALL   L?0263
0046 120000      E     LCALL   _htons
0049 900000      E     MOV     DPTR,#MBR+010H
004C E0                MOVX    A,@DPTR
004D FD                MOV     R5,A
004E 7C00              MOV     R4,#00H
0050 120000      E     LCALL   ?C?IMUL
0053 C006              PUSH    AR6
0055 C007              PUSH    AR7
0057 120000      E     LCALL   Sect_File_Data
005A D0E0              POP     ACC
005C 2F                ADD     A,R7
005D FF                MOV     R7,A
005E D0E0              POP     ACC
0060 3E                ADDC    A,R6
0061 FE                MOV     R6,A
0062         ?C0248:
0062 120000      R     LCALL   L?0384
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 88  

0065 120000      E     LCALL   ?C?LSTXDATA
0068         ?C0060:
                                           ; SOURCE LINE # 342
0068 120000      R     LCALL   L?0324
006B 7BFF              MOV     R3,#0FFH
006D 7A00        R     MOV     R2,#HIGH ?SC_5
006F 7900        R     MOV     R1,#LOW ?SC_5
0071 120000      E     LCALL   ?C?STRCMP
0074 EF                MOV     A,R7
0075 7003              JNZ     ?C0061
0077 7F01              MOV     R7,#01H
0079 22                RET     
007A         ?C0061:
                                           ; SOURCE LINE # 343
007A 120000      R     LCALL   L?0324
007D 120000      R     LCALL   L?0368
0080 120000      E     LCALL   ?C?STRCMP
0083 EF                MOV     A,R7
0084 7054              JNZ     ?C0062
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 345
0086 120000      R     LCALL   L?0309
0089 120000      R     LCALL   L?0382
008C 120000      E     LCALL   _strstr
008F 801D              SJMP    ?C0249
0091         ?C0063:
                                           ; SOURCE LINE # 347
0091 120000      R     LCALL   L?0309
0094 120000      R     LCALL   L?0388
0097 120000      E     LCALL   _strstr
009A 900000      R     MOV     DPTR,#next
009D 120000      E     LCALL   ?C?PSTXDATA
00A0 E9                MOV     A,R1
00A1 4A                ORL     A,R2
00A2 4B                ORL     A,R3
00A3 6011              JZ      ?C0064
                                           ; SOURCE LINE # 348
00A5 900000      R     MOV     DPTR,#next
00A8 120000      E     LCALL   ?C?PLDXDATA
00AB 120000      R     LCALL   L?0374
00AE         ?C0249:
00AE 900000      R     MOV     DPTR,#pos
00B1 120000      E     LCALL   ?C?PSTXDATA
00B4 80DB              SJMP    ?C0063
00B6         ?C0064:
                                           ; SOURCE LINE # 350
00B6 120000      R     LCALL   L?0388
00B9 7401              MOV     A,#01H
00BB 900000      R     MOV     DPTR,#Path_Name+01H
00BE 6B                XRL     A,R3
00BF 7008              JNZ     ?C0224
00C1 E9                MOV     A,R1
00C2 6582              XRL     A,DPL
00C4 7003              JNZ     ?C0224
00C6 EA                MOV     A,R2
00C7 6583              XRL     A,DPH
00C9         ?C0224:
00C9 6006              JZ      ?C0065
                                           ; SOURCE LINE # 351
00CB 900000      R     MOV     DPTR,#pos+01H
00CE 120000      R     LCALL   L?0344
00D1         ?C0065:
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 89  

                                           ; SOURCE LINE # 353
00D1 120000      R     LCALL   L?0389
00D4 E4                CLR     A
00D5 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 354
00D8 8046              SJMP    ?C0066
00DA         ?C0062:
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 357
00DA 120000      R     LCALL   L?0383
00DD 120000      E     LCALL   _strlen
00E0 900000      R     MOV     DPTR,#len
00E3 EE                MOV     A,R6
00E4 F0                MOVX    @DPTR,A
00E5 A3                INC     DPTR
00E6 EF                MOV     A,R7
00E7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 358
00E8 2400        R     ADD     A,#LOW Path_Name+0FFFFH
00EA F582              MOV     DPL,A
00EC E4                CLR     A
00ED 3400        R     ADDC    A,#HIGH Path_Name+0FFFFH
00EF F583              MOV     DPH,A
00F1 E0                MOVX    A,@DPTR
00F2 645C              XRL     A,#05CH
00F4 6016              JZ      ?C0067
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 360
00F6 7400        R     MOV     A,#LOW Path_Name
00F8 2F                ADD     A,R7
00F9 F9                MOV     R1,A
00FA E4                CLR     A
00FB 3400        R     ADDC    A,#HIGH Path_Name
00FD A801              MOV     R0,AR1
00FF FC                MOV     R4,A
0100 120000      R     LCALL   L?0372
0103 120000      E     LCALL   ?C?STRCPY
                                           ; SOURCE LINE # 361
0106 900000      R     MOV     DPTR,#len
0109 120000      R     LCALL   L?0317
                                           ; SOURCE LINE # 362
010C         ?C0067:
                                           ; SOURCE LINE # 363
010C 900000      R     MOV     DPTR,#len
010F A3                INC     DPTR
0110 E0                MOVX    A,@DPTR
0111 2400        R     ADD     A,#LOW Path_Name
0113 F9                MOV     R1,A
0114 E4                CLR     A
0115 3400        R     ADDC    A,#HIGH Path_Name
0117 900000      R     MOV     DPTR,#dirname
011A 120000      R     LCALL   L?0376
011D 120000      E     LCALL   ?C?STRCPY
                                           ; SOURCE LINE # 364
0120         ?C0066:
                                           ; SOURCE LINE # 365
0120 7F01              MOV     R7,#01H
0122 22                RET     
                                           ; SOURCE LINE # 366
0123         ?C0058:
                                           ; SOURCE LINE # 367
0123 7F00              MOV     R7,#00H
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 90  

                                           ; SOURCE LINE # 368
0125         ?C0057:
0125 22                RET     
             ; FUNCTION _chngdir (END)

             ; FUNCTION _mkdir (BEGIN)
                                           ; SOURCE LINE # 379
0000 900000      R     MOV     DPTR,#dir_name
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 385
0006 120000      E     LCALL   _strlen
;---- Variable 'max_len' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 388
0009 120000      R     LCALL   L?0390
000C E9                MOV     A,R1
000D 4A                ORL     A,R2
000E 4B                ORL     A,R3
000F 600D              JZ      ?C0069
0011 EF                MOV     A,R7
0012 4E                ORL     A,R6
0013 6009              JZ      ?C0069
0015 D3                SETB    C
0016 EF                MOV     A,R7
0017 9408              SUBB    A,#08H
0019 EE                MOV     A,R6
001A 9400              SUBB    A,#00H
001C 4003              JC      ?C0068
001E         ?C0069:
                                           ; SOURCE LINE # 389
                                           ; SOURCE LINE # 390
001E 7F03              MOV     R7,#03H
0020 22                RET     
                                           ; SOURCE LINE # 391
0021         ?C0068:
                                           ; SOURCE LINE # 392
0021 7D01              MOV     R5,#01H
0023 7C00              MOV     R4,#00H
0025 E4                CLR     A
0026 FF                MOV     R7,A
0027 FE                MOV     R6,A
0028 120000      R     LCALL   _fat_chain_alloc
002B 900000      R     MOV     DPTR,#start_cluster
002E EE                MOV     A,R6
002F F0                MOVX    @DPTR,A
0030 A3                INC     DPTR
0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 394
0033 120000      R     LCALL   L?0284
0036 E4                CLR     A
0037 FD                MOV     R5,A
0038 120000      R     LCALL   _findfirst
003B         ?C0071:
                                           ; SOURCE LINE # 395
003B 120000      R     LCALL   L?0284
003E 120000      R     LCALL   _findnext
0041 EF                MOV     A,R7
0042 600F              JZ      ?C0072
                                           ; SOURCE LINE # 396
0044 120000      R     LCALL   L?0280
0047 120000      R     LCALL   L?0390
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 91  

004A 120000      R     LCALL   _file_name_match
004D EF                MOV     A,R7
004E 60EB              JZ      ?C0071
                                           ; SOURCE LINE # 397
0050 7F01              MOV     R7,#01H
0052 22                RET     
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
0053         ?C0072:
                                           ; SOURCE LINE # 400
0053 120000      R     LCALL   L?0284
0056 7D01              MOV     R5,#01H
0058 120000      R     LCALL   _findfirst
005B EF                MOV     A,R7
005C 7003              JNZ     ?C0074
005E 7F02              MOV     R7,#02H
0060 22                RET     
0061         ?C0074:
                                           ; SOURCE LINE # 403
0061 120000      R     LCALL   L?0391
0064 900000      R     MOV     DPTR,#?_FillDirEntry?BYTE+03H
0067 120000      R     LCALL   L?0332
006A 120000      R     LCALL   _FillDirEntry
                                           ; SOURCE LINE # 405
006D 120000      R     LCALL   L?0360
0070 120000      E     LCALL   _htons
0073 900000      R     MOV     DPTR,#findinfo+07H
                                           ; SOURCE LINE # 407
0076 120000      R     LCALL   L?0293
                                           ; SOURCE LINE # 410
0079 120000      R     LCALL   L?0287
007C 120000      E     LCALL   _Sect_Write
                                           ; SOURCE LINE # 413
007F 120000      R     LCALL   L?0360
0082 120000      R     LCALL   _Clear_Cluster
                                           ; SOURCE LINE # 414
0085 120000      E     LCALL   Sect_File_Data
0088 AA06              MOV     R2,AR6
008A AB07              MOV     R3,AR7
008C 900000      E     MOV     DPTR,#MBR+010H
008F E0                MOVX    A,@DPTR
0090 900000      R     MOV     DPTR,#start_cluster
0093 120000      R     LCALL   L?0341
0096 E4                CLR     A
0097 FC                MOV     R4,A
0098 FD                MOV     R5,A
0099 900000      R     MOV     DPTR,#dir_sectors
009C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 416
009F 900000      R     MOV     DPTR,#entry
00A2 120000      R     LCALL   L?0303
                                           ; SOURCE LINE # 417
00A5 7A00        R     MOV     R2,#HIGH ?SC_5
00A7 7900        R     MOV     R1,#LOW ?SC_5
00A9 120000      R     LCALL   L?0328
                                           ; SOURCE LINE # 419
00AC 120000      R     LCALL   L?0361
00AF 120000      E     LCALL   _htons
                                           ; SOURCE LINE # 420
00B2 120000      R     LCALL   L?0292
                                           ; SOURCE LINE # 422
00B5 7B01              MOV     R3,#01H
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 92  

00B7 7A00        E     MOV     R2,#HIGH Scratch+020H
00B9 7900        E     MOV     R1,#LOW Scratch+020H
00BB 900000      R     MOV     DPTR,#entry
00BE 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 424
00C1 7A00        R     MOV     R2,#HIGH ?SC_7
00C3 7900        R     MOV     R1,#LOW ?SC_7
00C5 120000      R     LCALL   L?0328
                                           ; SOURCE LINE # 426
00C8 120000      R     LCALL   GetClusterOfParentDirectory
00CB 120000      E     LCALL   _htons
                                           ; SOURCE LINE # 427
00CE 120000      R     LCALL   L?0292
                                           ; SOURCE LINE # 430
00D1 900000      R     MOV     DPTR,#dir_sectors
00D4 120000      E     LCALL   ?C?LLDXDATA
00D7 120000      E     LCALL   _Sect_Write
                                           ; SOURCE LINE # 431
00DA 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 432
00DC         ?C0070:
00DC 22                RET     
00DD         L?0328:
00DD 7BFF              MOV     R3,#0FFH
00DF 900000      R     MOV     DPTR,#?_FillDirEntry?BYTE+03H
00E2 120000      E     LCALL   ?C?PSTXDATA
00E5 900000      R     MOV     DPTR,#entry
00E8 120000      E     LCALL   ?C?PLDXDATA
00EB 120000      R     LCALL   _FillDirEntry
00EE 22                RET     
             ; FUNCTION _mkdir (END)

             ; FUNCTION _rmdir (BEGIN)
                                           ; SOURCE LINE # 443
0000 900000      R     MOV     DPTR,#dir_name
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
0006 E4                CLR     A
0007 900000      R     MOV     DPTR,#dir_deep
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 452
000D 120000      R     LCALL   L?0312
0010 120000      R     LCALL   L?0326
0013 120000      R     LCALL   L?0373
0016 120000      E     LCALL   ?C?STRCMP
0019 EF                MOV     A,R7
001A 7002              JNZ     ?C0075
001C FF                MOV     R7,A
001D 22                RET     
001E         ?C0075:
                                           ; SOURCE LINE # 454
001E 120000      R     LCALL   L?0310
0021 120000      R     LCALL   L?0312
0024 120000      R     LCALL   L?0414
0027 E9                MOV     A,R1
0028 4A                ORL     A,R2
0029 4B                ORL     A,R3
002A 7009              JNZ     ?C0077
                                           ; SOURCE LINE # 455
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 93  

                                           ; SOURCE LINE # 456
002C 120000      R     LCALL   L?0311
002F 120000      E     LCALL   ?C?STRCPY
                                           ; SOURCE LINE # 457
0032 020000      R     LJMP    ?C0078
0035         ?C0077:
                                           ; SOURCE LINE # 459
                                           ; SOURCE LINE # 460
0035 120000      R     LCALL   L?0312
0038 C003              PUSH    AR3
003A C002              PUSH    AR2
003C C001              PUSH    AR1
003E 120000      R     LCALL   L?0334
0041 D082              POP     DPL
0043 D083              POP     DPH
0045 D0E0              POP     ACC
0047 6B                XRL     A,R3
0048 7008              JNZ     ?C0227
004A E9                MOV     A,R1
004B 6582              XRL     A,DPL
004D 7003              JNZ     ?C0227
004F EA                MOV     A,R2
0050 6583              XRL     A,DPH
0052         ?C0227:
0052 7040              JNZ     ?C0079
                                           ; SOURCE LINE # 461
                                           ; SOURCE LINE # 462
0054 120000      R     LCALL   L?0312
0057 120000      R     LCALL   L?0374
005A C003              PUSH    AR3
005C C002              PUSH    AR2
005E C001              PUSH    AR1
0060 120000      R     LCALL   L?0310
0063 D001              POP     AR1
0065 D002              POP     AR2
0067 D003              POP     AR3
0069 120000      R     LCALL   L?0414
                                           ; SOURCE LINE # 463
006C 120000      R     LCALL   L?0334
006F E9                MOV     A,R1
0070 4A                ORL     A,R2
0071 4B                ORL     A,R3
0072 6007              JZ      ?C0080
                                           ; SOURCE LINE # 464
0074 120000      R     LCALL   L?0335
0077 E4                CLR     A
0078 120000      E     LCALL   ?C?CSTPTR
007B         ?C0080:
                                           ; SOURCE LINE # 465
007B 120000      R     LCALL   L?0312
007E 120000      R     LCALL   L?0375
0081 7800        R     MOV     R0,#LOW first_part_of_dir
0083 7C00        R     MOV     R4,#HIGH first_part_of_dir
0085 7D01              MOV     R5,#01H
0087 120000      E     LCALL   ?C?STRCPY
                                           ; SOURCE LINE # 466
008A 120000      R     LCALL   L?0335
008D E9                MOV     A,R1
008E 4A                ORL     A,R2
008F 4B                ORL     A,R3
0090 6017              JZ      ?C0078
                                           ; SOURCE LINE # 467
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 94  

                                           ; SOURCE LINE # 468
0092 800D              SJMP    ?C0250
0094         ?C0079:
                                           ; SOURCE LINE # 470
                                           ; SOURCE LINE # 471
0094 120000      R     LCALL   L?0335
0097 E4                CLR     A
0098 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 472
009B 120000      R     LCALL   L?0311
009E 120000      E     LCALL   ?C?STRCPY
                                           ; SOURCE LINE # 473
00A1         ?C0250:
00A1 120000      R     LCALL   L?0335
00A4 745C              MOV     A,#05CH
00A6 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 474
                                           ; SOURCE LINE # 475
00A9         ?C0078:
                                           ; SOURCE LINE # 477
00A9 120000      R     LCALL   L?0312
00AC 120000      R     LCALL   _chngdir
00AF EF                MOV     A,R7
00B0 7002              JNZ     ?C0083
00B2 FF                MOV     R7,A
00B3 22                RET     
00B4         ?C0083:
                                           ; SOURCE LINE # 478
00B4 120000      R     LCALL   L?0284
00B7 E4                CLR     A
00B8 FD                MOV     R5,A
00B9 120000      R     LCALL   _findfirst
00BC EF                MOV     A,R7
00BD 7002              JNZ     ?C0085
00BF FF                MOV     R7,A
00C0 22                RET     
00C1         ?C0085:
                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 480
                                           ; SOURCE LINE # 481
00C1 120000      R     LCALL   L?0333
00C4 120000      E     LCALL   ?C?CLDPTR
00C7 64E5              XRL     A,#0E5H
00C9 7003              JNZ     $ + 5H
00CB 020000      R     LJMP    ?C0087
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 483
00CE 90000B            MOV     DPTR,#0BH
00D1 120000      E     LCALL   ?C?CLDOPTR
00D4 FF                MOV     R7,A
00D5 20E378            JB      ACC.3,?C0087
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
00D8 30E463            JNB     ACC.4,?C0089
                                           ; SOURCE LINE # 486
                                           ; SOURCE LINE # 487
00DB 120000      R     LCALL   L?0281
00DE 7BFF              MOV     R3,#0FFH
00E0 7A00        R     MOV     R2,#HIGH ?SC_5
00E2 7900        R     MOV     R1,#LOW ?SC_5
00E4 120000      R     LCALL   _file_name_match
00E7 EF                MOV     A,R7
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 95  

00E8 7066              JNZ     ?C0087
00EA 120000      R     LCALL   L?0281
00ED 120000      R     LCALL   L?0368
00F0 120000      R     LCALL   _file_name_match
00F3 EF                MOV     A,R7
00F4 705A              JNZ     ?C0087
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 490
00F6 120000      R     LCALL   L?0287
00F9 120000      R     LCALL   L?0297
00FC 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 491
00FF 900000      R     MOV     DPTR,#findinfo+04H
0102 E0                MOVX    A,@DPTR
0103 FE                MOV     R6,A
0104 A3                INC     DPTR
0105 E0                MOVX    A,@DPTR
0106 FF                MOV     R7,A
0107 900000      R     MOV     DPTR,#prev_dir_block+04H
010A 75F006            MOV     B,#06H
010D EB                MOV     A,R3
010E 120000      R     LCALL   L?0298
0111 EE                MOV     A,R6
0112 F0                MOVX    @DPTR,A
0113 A3                INC     DPTR
0114 EF                MOV     A,R7
0115 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
0116 7B01              MOV     R3,#01H
0118 7A00        R     MOV     R2,#HIGH dir_tmp_name
011A 7900        R     MOV     R1,#LOW dir_tmp_name
011C 900000      R     MOV     DPTR,#?_Get_File_Name?BYTE+03H
011F 120000      R     LCALL   L?0332
0122 120000      R     LCALL   _Get_File_Name
                                           ; SOURCE LINE # 493
0125 7B01              MOV     R3,#01H
0127 7A00        R     MOV     R2,#HIGH dir_tmp_name
0129 7900        R     MOV     R1,#LOW dir_tmp_name
012B 120000      R     LCALL   _chngdir
                                           ; SOURCE LINE # 494
012E 120000      R     LCALL   L?0284
0131 E4                CLR     A
0132 FD                MOV     R5,A
0133 120000      R     LCALL   _findfirst
                                           ; SOURCE LINE # 495
0136 900000      R     MOV     DPTR,#dir_deep
0139 120000      R     LCALL   L?0316
                                           ; SOURCE LINE # 496
                                           ; SOURCE LINE # 497
013C 8012              SJMP    ?C0087
013E         ?C0089:
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 505
013E 120000      R     LCALL   L?0285
0141 120000      E     LCALL   _Sect_Write
                                           ; SOURCE LINE # 506
0144 120000      R     LCALL   L?0263
0147 120000      R     LCALL   L?0415
                                           ; SOURCE LINE # 507
014A 120000      R     LCALL   L?0287
014D 120000      E     LCALL   _Sect_Read
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 96  

                                           ; SOURCE LINE # 508
                                           ; SOURCE LINE # 509
                                           ; SOURCE LINE # 510
0150         ?C0087:
                                           ; SOURCE LINE # 511
0150 120000      R     LCALL   L?0284
0153 120000      R     LCALL   _findnext
0156 EF                MOV     A,R7
0157 6003              JZ      $ + 5H
0159 020000      R     LJMP    ?C0085
                                           ; SOURCE LINE # 512
                                           ; SOURCE LINE # 513
015C 900000      R     MOV     DPTR,#dir_deep
015F E0                MOVX    A,@DPTR
0160 7002              JNZ     ?C0230
0162 A3                INC     DPTR
0163 E0                MOVX    A,@DPTR
0164         ?C0230:
0164 604F              JZ      ?C0093
                                           ; SOURCE LINE # 514
                                           ; SOURCE LINE # 515
0166 900000      R     MOV     DPTR,#dir_deep
0169 120000      R     LCALL   L?0344
                                           ; SOURCE LINE # 516
016C 120000      R     LCALL   L?0369
016F 120000      R     LCALL   _chngdir
                                           ; SOURCE LINE # 517
0172 120000      R     LCALL   L?0297
0175 120000      E     LCALL   ?C?LLDXDATA
0178 900000      R     MOV     DPTR,#findinfo
017B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 518
017E 900000      R     MOV     DPTR,#prev_dir_block+04H
0181 75F006            MOV     B,#06H
0184 EB                MOV     A,R3
0185 120000      R     LCALL   L?0298
0188 E0                MOVX    A,@DPTR
0189 FF                MOV     R7,A
018A A3                INC     DPTR
018B E0                MOVX    A,@DPTR
018C 900000      R     MOV     DPTR,#findinfo+04H
018F CF                XCH     A,R7
0190 F0                MOVX    @DPTR,A
0191 A3                INC     DPTR
0192 EF                MOV     A,R7
0193 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 519
0194 120000      R     LCALL   L?0287
0197 120000      E     LCALL   _Sect_Read
                                           ; SOURCE LINE # 520
019A 120000      R     LCALL   L?0318
                                           ; SOURCE LINE # 521
                                           ; SOURCE LINE # 522
019D 120000      R     LCALL   L?0286
01A0 120000      E     LCALL   _Sect_Write
                                           ; SOURCE LINE # 523
01A3 120000      R     LCALL   L?0264
01A6 120000      R     LCALL   L?0415
                                           ; SOURCE LINE # 524
01A9 120000      R     LCALL   L?0287
01AC 120000      E     LCALL   _Sect_Read
                                           ; SOURCE LINE # 525
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 97  

01AF 120000      R     LCALL   L?0318
                                           ; SOURCE LINE # 526
01B2 020000      R     LJMP    ?C0085
01B5         ?C0093:
                                           ; SOURCE LINE # 527
                                           ; SOURCE LINE # 528
01B5 120000      R     LCALL   L?0369
01B8 120000      R     LCALL   _chngdir
                                           ; SOURCE LINE # 529
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 531
                                           ; SOURCE LINE # 532
01BB         ?C0086:
                                           ; SOURCE LINE # 533
01BB 120000      R     LCALL   L?0284
01BE E4                CLR     A
01BF FD                MOV     R5,A
01C0 120000      R     LCALL   _findfirst
01C3         ?C0095:
                                           ; SOURCE LINE # 534
01C3 120000      R     LCALL   L?0281
01C6 7B01              MOV     R3,#01H
01C8 7A00        R     MOV     R2,#HIGH first_part_of_dir
01CA 7900        R     MOV     R1,#LOW first_part_of_dir
01CC 120000      R     LCALL   _file_name_match
01CF EF                MOV     A,R7
01D0 700B              JNZ     ?C0096
                                           ; SOURCE LINE # 535
01D2 120000      R     LCALL   L?0284
01D5 120000      R     LCALL   _findnext
01D8 EF                MOV     A,R7
01D9 70E8              JNZ     ?C0095
                                           ; SOURCE LINE # 536
01DB FF                MOV     R7,A
01DC 22                RET     
                                           ; SOURCE LINE # 537
                                           ; SOURCE LINE # 538
01DD         ?C0096:
                                           ; SOURCE LINE # 539
                                           ; SOURCE LINE # 540
01DD 120000      R     LCALL   L?0285
01E0 120000      E     LCALL   _Sect_Write
                                           ; SOURCE LINE # 541
01E3 120000      R     LCALL   L?0264
01E6 120000      E     LCALL   _htons
01E9 120000      R     LCALL   _fat_chain_free
                                           ; SOURCE LINE # 542
01EC 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 543
01EE         ?C0076:
01EE 22                RET     
01EF         L?0414:
01EF 120000      E     LCALL   _strstr
01F2 900000      R     MOV     DPTR,#tmp
01F5 120000      E     LCALL   ?C?PSTXDATA
01F8 22                RET     
01F9         L?0415:
01F9 120000      E     LCALL   _htons
01FC 120000      R     LCALL   _fat_chain_free
01FF 22                RET     
             ; FUNCTION _rmdir (END)

C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 98  

             ; FUNCTION _fcreate (BEGIN)
                                           ; SOURCE LINE # 557
0000 900000      R     MOV     DPTR,#findinfo
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 558
                                           ; SOURCE LINE # 561
0006 7D01              MOV     R5,#01H
0008 120000      R     LCALL   _findfirst
000B EF                MOV     A,R7
000C 7002              JNZ     ?C0098
000E FF                MOV     R7,A
000F 22                RET     
0010         ?C0098:
                                           ; SOURCE LINE # 564
0010 E4                CLR     A
0011 900000      R     MOV     DPTR,#i
0014 F0                MOVX    @DPTR,A
0015         ?C0100:
0015 120000      R     LCALL   L?0392
0018 940A              SUBB    A,#0AH
001A 500B              JNC     ?C0101
                                           ; SOURCE LINE # 565
001C 120000      R     LCALL   L?0273
001F 120000      R     LCALL   L?0331
0022 120000      R     LCALL   L?0371
0025 80EE              SJMP    ?C0100
0027         ?C0101:
                                           ; SOURCE LINE # 566
0027 120000      R     LCALL   L?0273
002A 900018            MOV     DPTR,#018H
002D 120000      R     LCALL   L?0272
0030 900016            MOV     DPTR,#016H
                                           ; SOURCE LINE # 567
0033 120000      R     LCALL   L?0272
0036 90001C            MOV     DPTR,#01CH
0039 120000      E     LCALL   ?C?LSTKOPTR
003C 00                DB      00H
003D 00                DB      00H
003E 00                DB      00H
003F 00                DB      00H
0040 120000      R     LCALL   L?0273
0043 90001A            MOV     DPTR,#01AH
0046 120000      R     LCALL   L?0346
                                           ; SOURCE LINE # 571
0049 E4                CLR     A
004A 900000      R     MOV     DPTR,#i
004D F0                MOVX    @DPTR,A
004E         ?C0103:
004E 120000      R     LCALL   L?0392
0051 940B              SUBB    A,#0BH
0053 500F              JNC     ?C0104
                                           ; SOURCE LINE # 572
0055 120000      R     LCALL   L?0273
0058 8F82              MOV     DPL,R7
005A 758300            MOV     DPH,#00H
005D 7420              MOV     A,#020H
005F 120000      R     LCALL   L?0370
0062 80EA              SJMP    ?C0103
0064         ?C0104:
                                           ; SOURCE LINE # 573
0064 E4                CLR     A
0065 900000      R     MOV     DPTR,#j
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 99  

0068 F0                MOVX    @DPTR,A
0069         ?C0106:
0069 900000      R     MOV     DPTR,#j
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E C3                CLR     C
006F 9414              SUBB    A,#014H
0071 503D              JNC     ?C0107
                                           ; SOURCE LINE # 574
0073 900000      R     MOV     DPTR,#filename
0076 120000      E     LCALL   ?C?PLDXDATA
0079 8F82              MOV     DPL,R7
007B 120000      R     LCALL   L?0262
007E FF                MOV     R7,A
007F 602F              JZ      ?C0107
0081 642E              XRL     A,#02EH
0083 602B              JZ      ?C0107
                                           ; SOURCE LINE # 575
0085         ?C0109:
                                           ; SOURCE LINE # 576
0085 900000      R     MOV     DPTR,#j
0088 E0                MOVX    A,@DPTR
0089 FF                MOV     R7,A
008A C3                CLR     C
008B 9408              SUBB    A,#08H
008D 5019              JNC     ?C0108
                                           ; SOURCE LINE # 577
008F 8F82              MOV     DPL,R7
0091 120000      R     LCALL   L?0262
0094 FF                MOV     R7,A
0095 120000      E     LCALL   _toupper
0098 120000      R     LCALL   L?0273
009B 900000      R     MOV     DPTR,#j
009E E0                MOVX    A,@DPTR
009F F582              MOV     DPL,A
00A1 758300            MOV     DPH,#00H
00A4 EF                MOV     A,R7
00A5 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 578
00A8         ?C0108:
00A8 900000      R     MOV     DPTR,#j
00AB E0                MOVX    A,@DPTR
00AC 04                INC     A
00AD F0                MOVX    @DPTR,A
00AE 80B9              SJMP    ?C0106
00B0         ?C0107:
                                           ; SOURCE LINE # 579
00B0 900000      R     MOV     DPTR,#filename
00B3 120000      E     LCALL   ?C?PLDXDATA
00B6 900000      R     MOV     DPTR,#j
00B9 120000      R     LCALL   L?0260
00BC 642E              XRL     A,#02EH
00BE 7040              JNZ     ?C0112
                                           ; SOURCE LINE # 580
00C0 900000      R     MOV     DPTR,#i
00C3 F0                MOVX    @DPTR,A
00C4         ?C0113:
00C4 120000      R     LCALL   L?0393
00C7 9403              SUBB    A,#03H
00C9 5035              JNC     ?C0112
                                           ; SOURCE LINE # 581
00CB A3                INC     DPTR
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 100 

00CC E0                MOVX    A,@DPTR
00CD 2F                ADD     A,R7
00CE FF                MOV     R7,A
00CF E4                CLR     A
00D0 33                RLC     A
00D1 CF                XCH     A,R7
00D2 2401              ADD     A,#01H
00D4 CF                XCH     A,R7
00D5 3400              ADDC    A,#00H
00D7 FE                MOV     R6,A
00D8 900000      R     MOV     DPTR,#filename
00DB 120000      R     LCALL   L?0271
00DE 120000      E     LCALL   ?C?CLDOPTR
00E1 FF                MOV     R7,A
00E2 601C              JZ      ?C0112
00E4 642E              XRL     A,#02EH
00E6 6018              JZ      ?C0112
                                           ; SOURCE LINE # 582
00E8         ?C0116:
                                           ; SOURCE LINE # 583
00E8 120000      E     LCALL   _toupper
00EB 120000      R     LCALL   L?0273
00EE 900000      R     MOV     DPTR,#i
00F1 E0                MOVX    A,@DPTR
00F2 2408              ADD     A,#08H
00F4 F582              MOV     DPL,A
00F6 E4                CLR     A
00F7 33                RLC     A
00F8 F583              MOV     DPH,A
00FA EF                MOV     A,R7
                                           ; SOURCE LINE # 584
00FB 120000      R     LCALL   L?0370
00FE 80C4              SJMP    ?C0113
                                           ; SOURCE LINE # 585
0100         ?C0112:
                                           ; SOURCE LINE # 590
0100 120000      R     LCALL   L?0273
0103 7420              MOV     A,#020H
0105 120000      R     LCALL   L?0294
                                           ; SOURCE LINE # 592
0108 900000      R     MOV     DPTR,#findinfo
010B 120000      E     LCALL   ?C?PLDXDATA
010E 120000      E     LCALL   ?C?LLDPTR
0111 120000      E     LCALL   _Sect_Write
                                           ; SOURCE LINE # 594
0114 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 595
0116         ?C0099:
0116 22                RET     
             ; FUNCTION _fcreate (END)

             ; FUNCTION _fopen (BEGIN)
                                           ; SOURCE LINE # 611
0000 900000      R     MOV     DPTR,#f
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 612
                                           ; SOURCE LINE # 613
0006 120000      R     LCALL   L?0348
0009 900013            MOV     DPTR,#013H
000C E4                CLR     A
000D 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 615
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 101 

0010 120000      R     LCALL   L?0350
0013 B47706            CJNE    A,#077H,?C0118
                                           ; SOURCE LINE # 616
0016 120000      R     LCALL   L?0394
0019 120000      R     LCALL   _fdelete
                                           ; SOURCE LINE # 617
001C         ?C0118:
                                           ; SOURCE LINE # 620
001C 120000      R     LCALL   L?0284
001F E4                CLR     A
0020 FD                MOV     R5,A
0021 120000      R     LCALL   _findfirst
0024         ?C0119:
                                           ; SOURCE LINE # 621
0024 120000      R     LCALL   L?0281
0027 120000      R     LCALL   L?0394
002A 120000      R     LCALL   _file_name_match
002D EF                MOV     A,R7
002E 7031              JNZ     ?C0120
                                           ; SOURCE LINE # 622
0030 120000      R     LCALL   L?0284
0033 120000      R     LCALL   _findnext
0036 EF                MOV     A,R7
0037 70EB              JNZ     ?C0119
                                           ; SOURCE LINE # 623
0039 120000      R     LCALL   L?0350
003C FD                MOV     R5,A
003D B47204            CJNE    A,#072H,?C0122
                                           ; SOURCE LINE # 624
0040 E4                CLR     A
0041 FE                MOV     R6,A
0042 FF                MOV     R7,A
0043 22                RET     
                                           ; SOURCE LINE # 625
0044         ?C0122:
                                           ; SOURCE LINE # 626
0044 ED                MOV     A,R5
0045 6477              XRL     A,#077H
0047 6006              JZ      ?C0125
0049 120000      E     LCALL   ?C?CLDPTR
004C B461D5            CJNE    A,#061H,?C0119
004F         ?C0125:
                                           ; SOURCE LINE # 627
004F 120000      R     LCALL   L?0395
0052 900000      R     MOV     DPTR,#?_fcreate?BYTE+03H
0055 120000      R     LCALL   L?0282
0058 120000      R     LCALL   _fcreate
005B EF                MOV     A,R7
005C 7003              JNZ     ?C0120
                                           ; SOURCE LINE # 628
005E FE                MOV     R6,A
005F FF                MOV     R7,A
0060 22                RET     
                                           ; SOURCE LINE # 629
                                           ; SOURCE LINE # 630
                                           ; SOURCE LINE # 631
                                           ; SOURCE LINE # 632
                                           ; SOURCE LINE # 633
                                           ; SOURCE LINE # 634
0061         ?C0120:
                                           ; SOURCE LINE # 636
0061 120000      R     LCALL   L?0287
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 102 

0064 120000      R     LCALL   L?0348
0067 900006            MOV     DPTR,#06H
006A EE                MOV     A,R6
006B 8FF0              MOV     B,R7
006D 120000      E     LCALL   ?C?ISTOPTR
                                           ; SOURCE LINE # 637
0070 900000      R     MOV     DPTR,#findinfo+04H
0073 E0                MOVX    A,@DPTR
0074 FF                MOV     R7,A
0075 A3                INC     DPTR
0076 E0                MOVX    A,@DPTR
0077 900008            MOV     DPTR,#08H
007A CF                XCH     A,R7
007B 8FF0              MOV     B,R7
007D 120000      E     LCALL   ?C?ISTOPTR
                                           ; SOURCE LINE # 638
0080 120000      R     LCALL   L?0264
0083 120000      E     LCALL   _htons
0086 900000      R     MOV     DPTR,#f
0089 120000      R     LCALL   L?0276
008C 120000      R     LCALL   L?0396
008F EE                MOV     A,R6
0090 8FF0              MOV     B,R7
0092 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 640
0095 900000      R     MOV     DPTR,#findinfo+07H
0098 120000      R     LCALL   L?0279
009B 120000      E     LCALL   ?C?CLDOPTR
009E FF                MOV     R7,A
009F 120000      R     LCALL   L?0349
00A2 90000A            MOV     DPTR,#0AH
00A5 EF                MOV     A,R7
00A6 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 641
00A9 120000      R     LCALL   L?0333
00AC 90001C            MOV     DPTR,#01CH
00AF 120000      E     LCALL   ?C?LLDOPTR
00B2 120000      E     LCALL   _htonl
00B5 120000      R     LCALL   L?0349
00B8 90000F            MOV     DPTR,#0FH
00BB 120000      E     LCALL   ?C?LSTOPTR
                                           ; SOURCE LINE # 643
00BE 120000      R     LCALL   L?0351
00C1 900000      R     MOV     DPTR,#f
00C4 B4610B            CJNE    A,#061H,?C0128
00C7 120000      R     LCALL   L?0305
00CA 90000B            MOV     DPTR,#0BH
00CD 120000      E     LCALL   ?C?LSTOPTR
00D0 800A              SJMP    ?C0129
00D2         ?C0128:
00D2 120000      R     LCALL   L?0279
00D5 120000      E     LCALL   ?C?LSTKOPTR
00D8 00                DB      00H
00D9 00                DB      00H
00DA 00                DB      00H
00DB 00                DB      00H
00DC         ?C0129:
                                           ; SOURCE LINE # 645
00DC 120000      R     LCALL   L?0349
00DF 900013            MOV     DPTR,#013H
00E2 7401              MOV     A,#01H
00E4 120000      E     LCALL   ?C?CSTOPTR
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 103 

00E7 7E00              MOV     R6,#00H
00E9 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 646
00EB         ?C0123:
00EB 22                RET     
             ; FUNCTION _fopen (END)

             ; FUNCTION _feof (BEGIN)
                                           ; SOURCE LINE # 658
;---- Variable 'f' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 659
                                           ; SOURCE LINE # 660
0000 120000      R     LCALL   L?0398
0003 7004              JNZ     ?C0130
0005 FE                MOV     R6,A
0006 7F01              MOV     R7,#01H
0008 22                RET     
0009         ?C0130:
                                           ; SOURCE LINE # 661
0009 120000      R     LCALL   L?0306
000C 90000B            MOV     DPTR,#0BH
000F 120000      E     LCALL   ?C?LLDOPTR0
0012 C3                CLR     C
0013 120000      E     LCALL   ?C?ULCMP
0016 7E00              MOV     R6,#00H
0018 4004              JC      ?C0132
001A 7F01              MOV     R7,#01H
001C 8002              SJMP    ?C0133
001E         ?C0132:
001E 7F00              MOV     R7,#00H
0020         ?C0133:
                                           ; SOURCE LINE # 662
0020         ?C0131:
0020 22                RET     
             ; FUNCTION _feof (END)

             ; FUNCTION _fat_chain (BEGIN)
                                           ; SOURCE LINE # 675
0000 120000      R     LCALL   L?0400
                                           ; SOURCE LINE # 676
                                           ; SOURCE LINE # 677
0003 7B01              MOV     R3,#01H
0005 7A00        E     MOV     R2,#HIGH Scratch
0007 7900        E     MOV     R1,#LOW Scratch
0009 900000      R     MOV     DPTR,#fat_table
000C 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 678
000F E4                CLR     A
0010 900000      R     MOV     DPTR,#sect_prev
0013 F0                MOVX    @DPTR,A
0014 A3                INC     DPTR
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 679
0016 120000      R     LCALL   L?0336
0019 900000      R     MOV     DPTR,#cluster
001C EE                MOV     A,R6
001D F0                MOVX    @DPTR,A
001E A3                INC     DPTR
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
0021         ?C0134:
                                           ; SOURCE LINE # 681
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 104 

0021 900000      R     MOV     DPTR,#cluster
0024 E0                MOVX    A,@DPTR
0025 7002              JNZ     ?C0231
0027 A3                INC     DPTR
0028 E0                MOVX    A,@DPTR
0029         ?C0231:
0029 7003              JNZ     $ + 5H
002B 020000      R     LJMP    ?C0135
                                           ; SOURCE LINE # 682
002E 120000      E     LCALL   Sect_Fat1
0031 C006              PUSH    AR6
0033 C007              PUSH    AR7
0035 E4                CLR     A
0036 FB                MOV     R3,A
0037 7A01              MOV     R2,#01H
0039 F9                MOV     R1,A
003A F8                MOV     R0,A
003B 120000      R     LCALL   L?0402
003E 120000      E     LCALL   ?C?ULDIV
0041 D0E0              POP     ACC
0043 2F                ADD     A,R7
0044 FF                MOV     R7,A
0045 D0E0              POP     ACC
0047 3E                ADDC    A,R6
0048 FE                MOV     R6,A
;---- Variable 'sect' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 683
0049 900000      R     MOV     DPTR,#sect_prev
004C E0                MOVX    A,@DPTR
004D 6E                XRL     A,R6
004E 7003              JNZ     ?C0232
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 6F                XRL     A,R7
0053         ?C0232:
0053 600E              JZ      ?C0136
                                           ; SOURCE LINE # 684
0055 900000      R     MOV     DPTR,#sect_prev
0058 EE                MOV     A,R6
0059 F0                MOVX    @DPTR,A
005A A3                INC     DPTR
005B EF                MOV     A,R7
005C F0                MOVX    @DPTR,A
005D E4                CLR     A
005E FC                MOV     R4,A
005F FD                MOV     R5,A
0060 120000      E     LCALL   _Sect_Read
                                           ; SOURCE LINE # 685
0063         ?C0136:
                                           ; SOURCE LINE # 687
0063 120000      R     LCALL   L?0402
0066 E4                CLR     A
0067 FE                MOV     R6,A
0068 FD                MOV     R5,A
0069 FC                MOV     R4,A
006A 7B02              MOV     R3,#02H
006C FA                MOV     R2,A
006D F9                MOV     R1,A
006E F8                MOV     R0,A
006F 120000      E     LCALL   ?C?LMUL
0072 900000      R     MOV     DPTR,#fat_table
0075 120000      R     LCALL   L?0271
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 105 

0078 120000      R     LCALL   L?0266
007B 120000      E     LCALL   _htons
007E 900000      R     MOV     DPTR,#from
0081 120000      R     LCALL   L?0327
                                           ; SOURCE LINE # 689
0084 E4                CLR     A
0085 7F02              MOV     R7,#02H
0087 FE                MOV     R6,A
0088 FD                MOV     R5,A
0089 FC                MOV     R4,A
008A 900000      R     MOV     DPTR,#from
008D 120000      R     LCALL   L?0296
0090 4010              JC      ?C0138
0092 E4                CLR     A
0093 7FEF              MOV     R7,#0EFH
0095 7EFF              MOV     R6,#0FFH
0097 FD                MOV     R5,A
0098 FC                MOV     R4,A
0099 120000      R     LCALL   L?0404
009C D3                SETB    C
009D 120000      E     LCALL   ?C?ULCMP
00A0 4007              JC      ?C0137
00A2         ?C0138:
                                           ; SOURCE LINE # 690
00A2 74FF              MOV     A,#0FFH
00A4 FF                MOV     R7,A
00A5 FE                MOV     R6,A
00A6 FD                MOV     R5,A
00A7 FC                MOV     R4,A
00A8 22                RET     
                                           ; SOURCE LINE # 691
00A9         ?C0137:
                                           ; SOURCE LINE # 693
00A9 900000      R     MOV     DPTR,#cluster
00AC 120000      R     LCALL   L?0345
                                           ; SOURCE LINE # 694
00AF 020000      R     LJMP    ?C0134
00B2         ?C0135:
                                           ; SOURCE LINE # 695
00B2 120000      R     LCALL   L?0404
00B5 120000      R     LCALL   L?0406
00B8 120000      E     LCALL   ?C?LMUL
00BB 120000      R     LCALL   L?0400
                                           ; SOURCE LINE # 696
00BE 120000      R     LCALL   L?0405
00C1 C000              PUSH    AR0
00C3 120000      R     LCALL   L?0336
00C6 AE04              MOV     R6,AR4
00C8 AF05              MOV     R7,AR5
00CA E4                CLR     A
00CB FC                MOV     R4,A
00CC FD                MOV     R5,A
00CD D000              POP     AR0
00CF 120000      E     LCALL   ?C?LADD
00D2 120000      R     LCALL   L?0401
                                           ; SOURCE LINE # 697
00D5 120000      R     LCALL   L?0403
                                           ; SOURCE LINE # 698
00D8         ?C0139:
00D8 22                RET     
             ; FUNCTION _fat_chain (END)

C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 106 

             ; FUNCTION _fat_chain_free (BEGIN)
                                           ; SOURCE LINE # 710
0000 900000      R     MOV     DPTR,#from
                                           ; SOURCE LINE # 711
                                           ; SOURCE LINE # 712
0003 120000      R     LCALL   L?0301
                                           ; SOURCE LINE # 713
0006 E4                CLR     A
0007 900000      R     MOV     DPTR,#sect_prev
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 716
000D C3                CLR     C
000E EF                MOV     A,R7
000F 9402              SUBB    A,#02H
0011 EE                MOV     A,R6
0012 9400              SUBB    A,#00H
0014 5003              JNC     $ + 5H
0016 020000      R     LJMP    ?C0141
0019         ?C0140:
                                           ; SOURCE LINE # 718
0019 120000      E     LCALL   Sect_Fat1
001C 120000      R     LCALL   L?0313
001F 900000      R     MOV     DPTR,#sect
0022 F0                MOVX    @DPTR,A
0023 A3                INC     DPTR
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
0026         ?C0142:
                                           ; SOURCE LINE # 720
                                           ; SOURCE LINE # 721
0026 900000      R     MOV     DPTR,#sect_prev
0029 E0                MOVX    A,@DPTR
002A FE                MOV     R6,A
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 900000      R     MOV     DPTR,#sect
0031 E0                MOVX    A,@DPTR
0032 FC                MOV     R4,A
0033 A3                INC     DPTR
0034 E0                MOVX    A,@DPTR
0035 FD                MOV     R5,A
0036 6F                XRL     A,R7
0037 7002              JNZ     ?C0233
0039 EC                MOV     A,R4
003A 6E                XRL     A,R6
003B         ?C0233:
003B 600F              JZ      ?C0144
                                           ; SOURCE LINE # 722
003D A3                INC     DPTR
003E EC                MOV     A,R4
003F F0                MOVX    @DPTR,A
0040 A3                INC     DPTR
0041 ED                MOV     A,R5
0042 F0                MOVX    @DPTR,A
0043 FF                MOV     R7,A
0044 AE04              MOV     R6,AR4
0046 E4                CLR     A
0047 FC                MOV     R4,A
0048 FD                MOV     R5,A
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 107 

0049 120000      E     LCALL   _Sect_Read
                                           ; SOURCE LINE # 723
004C         ?C0144:
                                           ; SOURCE LINE # 725
004C 900000      R     MOV     DPTR,#from+01H
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 900000      R     MOV     DPTR,#index
0054 E4                CLR     A
0055 F0                MOVX    @DPTR,A
0056 A3                INC     DPTR
0057 EF                MOV     A,R7
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 727
0059 E0                MOVX    A,@DPTR
005A 25E0              ADD     A,ACC
005C FF                MOV     R7,A
005D 900000      R     MOV     DPTR,#index
0060 E0                MOVX    A,@DPTR
0061 900000      R     MOV     DPTR,#fat_table
0064 120000      R     LCALL   L?0270
0067 120000      R     LCALL   L?0266
006A 120000      E     LCALL   _htons
006D 900000      R     MOV     DPTR,#from
0070 EE                MOV     A,R6
0071 F0                MOVX    @DPTR,A
0072 FC                MOV     R4,A
0073 A3                INC     DPTR
0074 EF                MOV     A,R7
0075 F0                MOVX    @DPTR,A
0076 FD                MOV     R5,A
                                           ; SOURCE LINE # 729
0077 900000      R     MOV     DPTR,#index+01H
007A E0                MOVX    A,@DPTR
007B 25E0              ADD     A,ACC
007D FF                MOV     R7,A
007E 900000      R     MOV     DPTR,#index
0081 E0                MOVX    A,@DPTR
0082 33                RLC     A
0083 FE                MOV     R6,A
0084 900000      R     MOV     DPTR,#fat_table
0087 120000      R     LCALL   L?0271
008A 120000      R     LCALL   L?0347
                                           ; SOURCE LINE # 731
008D C3                CLR     C
008E ED                MOV     A,R5
008F 9402              SUBB    A,#02H
0091 EC                MOV     A,R4
0092 9400              SUBB    A,#00H
0094 400F              JC      ?C0146
0096 D3                SETB    C
0097 900000      R     MOV     DPTR,#from+01H
009A E0                MOVX    A,@DPTR
009B 94EF              SUBB    A,#0EFH
009D 900000      R     MOV     DPTR,#from
00A0 E0                MOVX    A,@DPTR
00A1 94FF              SUBB    A,#0FFH
00A3 4009              JC      ?C0145
00A5         ?C0146:
                                           ; SOURCE LINE # 732
00A5 900000      R     MOV     DPTR,#sect_prev
00A8 120000      R     LCALL   L?0256
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 108 

00AB 020000      E     LJMP    _Sect_Write_Multi_Fat
                                           ; SOURCE LINE # 733
                                           ; SOURCE LINE # 734
00AE         ?C0145:
                                           ; SOURCE LINE # 736
00AE 120000      E     LCALL   Sect_Fat1
00B1 120000      R     LCALL   L?0313
00B4 900000      R     MOV     DPTR,#sect
00B7 F0                MOVX    @DPTR,A
00B8 FC                MOV     R4,A
00B9 A3                INC     DPTR
00BA EF                MOV     A,R7
00BB F0                MOVX    @DPTR,A
00BC FD                MOV     R5,A
                                           ; SOURCE LINE # 737
00BD A3                INC     DPTR
00BE E0                MOVX    A,@DPTR
00BF FE                MOV     R6,A
00C0 A3                INC     DPTR
00C1 E0                MOVX    A,@DPTR
00C2 FF                MOV     R7,A
00C3 6D                XRL     A,R5
00C4 7002              JNZ     ?C0234
00C6 EE                MOV     A,R6
00C7 6C                XRL     A,R4
00C8         ?C0234:
00C8 7003              JNZ     $ + 5H
00CA 020000      R     LJMP    ?C0142
                                           ; SOURCE LINE # 738
00CD E4                CLR     A
00CE FC                MOV     R4,A
00CF FD                MOV     R5,A
00D0 120000      E     LCALL   _Sect_Write_Multi_Fat
                                           ; SOURCE LINE # 739
                                           ; SOURCE LINE # 740
00D3 020000      R     LJMP    ?C0142
                                           ; SOURCE LINE # 741
00D6         ?C0141:
00D6 22                RET     
             ; FUNCTION _fat_chain_free (END)

             ; FUNCTION _fat_chain_alloc (BEGIN)
                                           ; SOURCE LINE # 755
0000 900000      R     MOV     DPTR,#from
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EC                MOV     A,R4
000A F0                MOVX    @DPTR,A
000B ED                MOV     A,R5
                                           ; SOURCE LINE # 756
                                           ; SOURCE LINE # 757
000C 120000      R     LCALL   L?0302
                                           ; SOURCE LINE # 758
000F E4                CLR     A
0010 900000      R     MOV     DPTR,#sect_prev
0013 F0                MOVX    @DPTR,A
0014 A3                INC     DPTR
0015 F0                MOVX    @DPTR,A
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 109 

                                           ; SOURCE LINE # 760
0016 74FF              MOV     A,#0FFH
0018 900000      R     MOV     DPTR,#alloced
001B F0                MOVX    @DPTR,A
001C A3                INC     DPTR
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 763
001E 120000      E     LCALL   Sect_Fat1
0021 900000      R     MOV     DPTR,#sect
0024 EE                MOV     A,R6
0025 F0                MOVX    @DPTR,A
0026 A3                INC     DPTR
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
0029         ?C0148:
0029 900000      R     MOV     DPTR,#nr
002C E0                MOVX    A,@DPTR
002D 7002              JNZ     ?C0235
002F A3                INC     DPTR
0030 E0                MOVX    A,@DPTR
0031         ?C0235:
0031 7003              JNZ     $ + 5H
0033 020000      R     LJMP    ?C0159
0036 120000      E     LCALL   Sect_Fat2
0039 AC06              MOV     R4,AR6
003B AD07              MOV     R5,AR7
003D 900000      R     MOV     DPTR,#sect
0040 120000      R     LCALL   L?0322
0043 9D                SUBB    A,R5
0044 EE                MOV     A,R6
0045 9C                SUBB    A,R4
0046 4003              JC      $ + 5H
0048 020000      R     LJMP    ?C0159
                                           ; SOURCE LINE # 764
004B E4                CLR     A
004C FC                MOV     R4,A
004D FD                MOV     R5,A
004E 120000      E     LCALL   _Sect_Read
                                           ; SOURCE LINE # 766
0051 120000      E     LCALL   Sect_Fat1
0054 900000      R     MOV     DPTR,#sect
0057 E0                MOVX    A,@DPTR
0058 B5060B            CJNE    A,AR6,?C0153
005B A3                INC     DPTR
005C E0                MOVX    A,@DPTR
005D B50706            CJNE    A,AR7,?C0153
0060 7E00              MOV     R6,#00H
0062 7F02              MOV     R7,#02H
0064 8004              SJMP    ?C0154
0066         ?C0153:
0066 7E00              MOV     R6,#00H
0068 7F00              MOV     R7,#00H
006A         ?C0154:
006A EE                MOV     A,R6
006B 120000      R     LCALL   L?0380
006E         ?C0151:
006E 900000      R     MOV     DPTR,#index
0071 120000      R     LCALL   L?0322
0074 EE                MOV     A,R6
0075 9401              SUBB    A,#01H
0077 5050              JNC     ?C0152
                                           ; SOURCE LINE # 767
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 110 

0079 EF                MOV     A,R7
007A 25E0              ADD     A,ACC
007C FF                MOV     R7,A
007D EE                MOV     A,R6
007E 120000      R     LCALL   L?0269
0081 120000      E     LCALL   ?C?ILDOPTR
0084 45F0              ORL     A,B
0086 7038              JNZ     ?C0155
                                           ; SOURCE LINE # 768
0088 120000      R     LCALL   L?0362
008B 120000      E     LCALL   _htons
008E 120000      R     LCALL   L?0267
0091 EC                MOV     A,R4
0092 8DF0              MOV     B,R5
0094 120000      E     LCALL   ?C?ISTOPTR
                                           ; SOURCE LINE # 771
0097 120000      E     LCALL   Sect_Fat1
009A C3                CLR     C
009B 900000      R     MOV     DPTR,#sect+01H
009E E0                MOVX    A,@DPTR
009F 9F                SUBB    A,R7
00A0 FF                MOV     R7,A
00A1 EF                MOV     A,R7
00A2 FE                MOV     R6,A
00A3 900000      R     MOV     DPTR,#index+01H
00A6 E0                MOVX    A,@DPTR
00A7 2400              ADD     A,#00H
00A9 FF                MOV     R7,A
00AA 900000      R     MOV     DPTR,#index
00AD E0                MOVX    A,@DPTR
00AE 3E                ADDC    A,R6
00AF 900000      R     MOV     DPTR,#alloced
00B2 F0                MOVX    @DPTR,A
00B3 A3                INC     DPTR
00B4 EF                MOV     A,R7
00B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 772
00B6 900000      R     MOV     DPTR,#nr
00B9 120000      R     LCALL   L?0345
00BC 45F0              ORL     A,B
00BE 6009              JZ      ?C0152
                                           ; SOURCE LINE # 773
                                           ; SOURCE LINE # 774
00C0         ?C0155:
00C0 900000      R     MOV     DPTR,#index
00C3 120000      R     LCALL   L?0317
00C6 020000      R     LJMP    ?C0151
00C9         ?C0152:
                                           ; SOURCE LINE # 775
00C9 900000      R     MOV     DPTR,#alloced
00CC E0                MOVX    A,@DPTR
00CD F4                CPL     A
00CE 7003              JNZ     ?C0237
00D0 A3                INC     DPTR
00D1 E0                MOVX    A,@DPTR
00D2 F4                CPL     A
00D3         ?C0237:
00D3 6009              JZ      ?C0150
00D5 900000      R     MOV     DPTR,#sect
00D8 120000      R     LCALL   L?0256
00DB 120000      E     LCALL   _Sect_Write_Multi_Fat
                                           ; SOURCE LINE # 776
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 111 

00DE         ?C0150:
00DE 900000      R     MOV     DPTR,#sect
00E1 120000      R     LCALL   L?0317
00E4 020000      R     LJMP    ?C0148
00E7         ?C0159:
                                           ; SOURCE LINE # 781
00E7 900000      R     MOV     DPTR,#from
00EA 120000      R     LCALL   L?0322
00ED 9402              SUBB    A,#02H
00EF EE                MOV     A,R6
00F0 9400              SUBB    A,#00H
00F2 5003              JNC     $ + 5H
00F4 020000      R     LJMP    ?C0160
00F7 D3                SETB    C
00F8 EF                MOV     A,R7
00F9 94EF              SUBB    A,#0EFH
00FB EE                MOV     A,R6
00FC 94FF              SUBB    A,#0FFH
00FE 507C              JNC     ?C0160
0100 900000      R     MOV     DPTR,#alloced
0103 E0                MOVX    A,@DPTR
0104 F4                CPL     A
0105 7003              JNZ     ?C0238
0107 A3                INC     DPTR
0108 E0                MOVX    A,@DPTR
0109 F4                CPL     A
010A         ?C0238:
010A 6070              JZ      ?C0160
                                           ; SOURCE LINE # 782
010C 120000      E     LCALL   Sect_Fat1
010F AC06              MOV     R4,AR6
0111 AD07              MOV     R5,AR7
0113 900000      R     MOV     DPTR,#from
0116 120000      R     LCALL   L?0315
0119 FE                MOV     R6,A
011A 900000      R     MOV     DPTR,#sect
011D F0                MOVX    @DPTR,A
011E A3                INC     DPTR
011F EF                MOV     A,R7
0120 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 783
0121 A3                INC     DPTR
0122 E0                MOVX    A,@DPTR
0123 6E                XRL     A,R6
0124 7003              JNZ     ?C0239
0126 A3                INC     DPTR
0127 E0                MOVX    A,@DPTR
0128 6F                XRL     A,R7
0129         ?C0239:
0129 6014              JZ      ?C0161
                                           ; SOURCE LINE # 784
012B 900000      R     MOV     DPTR,#sect
012E E0                MOVX    A,@DPTR
012F FE                MOV     R6,A
0130 A3                INC     DPTR
0131 E0                MOVX    A,@DPTR
0132 FF                MOV     R7,A
0133 A3                INC     DPTR
0134 EE                MOV     A,R6
0135 F0                MOVX    @DPTR,A
0136 A3                INC     DPTR
0137 EF                MOV     A,R7
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 112 

0138 F0                MOVX    @DPTR,A
0139 E4                CLR     A
013A FC                MOV     R4,A
013B FD                MOV     R5,A
013C 120000      E     LCALL   _Sect_Read
                                           ; SOURCE LINE # 785
013F         ?C0161:
                                           ; SOURCE LINE # 786
013F 900000      R     MOV     DPTR,#from+01H
0142 E0                MOVX    A,@DPTR
0143 FF                MOV     R7,A
0144 E4                CLR     A
0145 120000      R     LCALL   L?0380
                                           ; SOURCE LINE # 787
0148 120000      R     LCALL   L?0268
014B 120000      R     LCALL   L?0266
014E 120000      E     LCALL   _htons
0151 900000      R     MOV     DPTR,#from
0154 EE                MOV     A,R6
0155 F0                MOVX    @DPTR,A
0156 A3                INC     DPTR
0157 EF                MOV     A,R7
0158 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 789
0159 C3                CLR     C
015A 94F8              SUBB    A,#0F8H
015C EE                MOV     A,R6
015D 94FF              SUBB    A,#0FFH
015F 4086              JC      ?C0159
                                           ; SOURCE LINE # 790
0161 120000      R     LCALL   L?0362
0164 120000      E     LCALL   _htons
0167 120000      R     LCALL   L?0267
016A EC                MOV     A,R4
016B 8DF0              MOV     B,R5
016D 120000      E     LCALL   ?C?ISTOPTR
                                           ; SOURCE LINE # 791
0170 900000      R     MOV     DPTR,#sect
0173 120000      R     LCALL   L?0256
0176 120000      E     LCALL   _Sect_Write_Multi_Fat
                                           ; SOURCE LINE # 792
                                           ; SOURCE LINE # 793
0179 020000      R     LJMP    ?C0159
017C         ?C0160:
                                           ; SOURCE LINE # 795
017C 120000      R     LCALL   L?0363
                                           ; SOURCE LINE # 796
017F         ?C0163:
017F 22                RET     
             ; FUNCTION _fat_chain_alloc (END)

             ; FUNCTION _fread (BEGIN)
                                           ; SOURCE LINE # 810
0000 900000      R     MOV     DPTR,#f
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 811
                                           ; SOURCE LINE # 812
0006 E4                CLR     A
0007 900000      R     MOV     DPTR,#total_cnt
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C F0                MOVX    @DPTR,A
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 113 

                                           ; SOURCE LINE # 813
000D 120000      R     LCALL   L?0352
0010 120000      R     LCALL   L?0398
0013 600A              JZ      ?C0165
0015 900000      R     MOV     DPTR,#count
0018 E0                MOVX    A,@DPTR
0019 7002              JNZ     ?C0240
001B A3                INC     DPTR
001C E0                MOVX    A,@DPTR
001D         ?C0240:
001D 7004              JNZ     ?C0164
001F         ?C0165:
001F E4                CLR     A
0020 FE                MOV     R6,A
0021 FF                MOV     R7,A
0022 22                RET     
0023         ?C0164:
                                           ; SOURCE LINE # 819
0023 900000      R     MOV     DPTR,#buffer
0026 120000      E     LCALL   ?C?PLDXDATA
0029 C3                CLR     C
002A 900000      E     MOV     DPTR,#Scratch
002D E9                MOV     A,R1
002E 9582              SUBB    A,DPL
0030 EA                MOV     A,R2
0031 9583              SUBB    A,DPH
0033         ?C0241:
0033 4033              JC      ?C0170
0035 900000      R     MOV     DPTR,#buffer
0038 120000      E     LCALL   ?C?PLDXDATA
003B 900000      E     MOV     DPTR,#Scratch+0200H
003E E9                MOV     A,R1
003F 9582              SUBB    A,DPL
0041 EA                MOV     A,R2
0042 9583              SUBB    A,DPH
0044         ?C0242:
0044 5022              JNC     ?C0170
                                           ; SOURCE LINE # 820
0046 120000      R     LCALL   L?0254
0049 D3                SETB    C
004A 120000      E     LCALL   ?C?ULCMP
004D 4008              JC      ?C0168
004F 900000      R     MOV     DPTR,#count
0052 120000      R     LCALL   L?0256
0055 8009              SJMP    ?C0169
0057         ?C0168:
0057 900000      R     MOV     DPTR,#f
005A 120000      R     LCALL   L?0279
005D 120000      R     LCALL   L?0290
0060         ?C0169:
0060 900000      R     MOV     DPTR,#count
0063 EE                MOV     A,R6
0064 F0                MOVX    @DPTR,A
0065 A3                INC     DPTR
0066 EF                MOV     A,R7
0067 F0                MOVX    @DPTR,A
0068         ?C0170:
                                           ; SOURCE LINE # 822
0068 900000      R     MOV     DPTR,#count
006B E0                MOVX    A,@DPTR
006C 7002              JNZ     ?C0243
006E A3                INC     DPTR
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 114 

006F E0                MOVX    A,@DPTR
0070         ?C0243:
0070 7003              JNZ     $ + 5H
0072 020000      R     LJMP    ?C0171
0075 120000      R     LCALL   L?0352
0078 120000      R     LCALL   _feof
007B EF                MOV     A,R7
007C 4E                ORL     A,R6
007D 6003              JZ      $ + 5H
007F 020000      R     LJMP    ?C0171
                                           ; SOURCE LINE # 823
0082 120000      R     LCALL   L?0353
0085 120000      R     LCALL   L?0407
0088 C004              PUSH    AR4
008A C005              PUSH    AR5
008C C006              PUSH    AR6
008E C007              PUSH    AR7
0090 900000      R     MOV     DPTR,#f
0093 120000      R     LCALL   L?0279
0096 120000      E     LCALL   ?C?LLDOPTR
0099 120000      R     LCALL   L?0300
009C 900000      R     MOV     DPTR,#?_fat_chain?BYTE+04H
009F EE                MOV     A,R6
00A0 F0                MOVX    @DPTR,A
00A1 A3                INC     DPTR
00A2 EF                MOV     A,R7
00A3 F0                MOVX    @DPTR,A
00A4 D007              POP     AR7
00A6 D006              POP     AR6
00A8 D005              POP     AR5
00AA D004              POP     AR4
00AC 120000      R     LCALL   _fat_chain
00AF 120000      R     LCALL   L?0353
00B2 120000      R     LCALL   L?0396
                                           ; SOURCE LINE # 825
00B5 120000      E     LCALL   Sect_File_Data
00B8 900000      R     MOV     DPTR,#f
00BB 120000      R     LCALL   L?0320
00BE 120000      R     LCALL   L?0354
00C1 120000      E     LCALL   _Sect_Read
                                           ; SOURCE LINE # 827
00C4 120000      R     LCALL   L?0254
00C7 C3                CLR     C
00C8 120000      E     LCALL   ?C?ULCMP
00CB 500B              JNC     ?C0172
00CD 900000      R     MOV     DPTR,#f
00D0 120000      R     LCALL   L?0279
00D3 120000      R     LCALL   L?0290
00D6 8006              SJMP    ?C0173
00D8         ?C0172:
00D8 900000      R     MOV     DPTR,#count
00DB 120000      R     LCALL   L?0256
00DE         ?C0173:
00DE 900000      R     MOV     DPTR,#cnt
00E1 EE                MOV     A,R6
00E2 F0                MOVX    @DPTR,A
00E3 A3                INC     DPTR
00E4 EF                MOV     A,R7
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 828
00E6 900000      R     MOV     DPTR,#f
00E9 120000      R     LCALL   L?0279
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 115 

00EC 120000      E     LCALL   ?C?LLDOPTR0
00EF C000              PUSH    AR0
00F1 C001              PUSH    AR1
00F3 C002              PUSH    AR2
00F5 C003              PUSH    AR3
00F7 120000      R     LCALL   L?0304
00FA D003              POP     AR3
00FC D002              POP     AR2
00FE D001              POP     AR1
0100 D000              POP     AR0
0102 120000      R     LCALL   L?0377
0105 900000      R     MOV     DPTR,#cnt
0108 120000      R     LCALL   L?0256
010B D3                SETB    C
010C 120000      E     LCALL   ?C?ULCMP
010F 4008              JC      ?C0174
0111 900000      R     MOV     DPTR,#cnt
0114 120000      R     LCALL   L?0256
0117 801F              SJMP    ?C0175
0119         ?C0174:
0119 900000      R     MOV     DPTR,#f
011C 120000      R     LCALL   L?0279
011F 120000      E     LCALL   ?C?LLDOPTR0
0122 C000              PUSH    AR0
0124 C001              PUSH    AR1
0126 C002              PUSH    AR2
0128 C003              PUSH    AR3
012A 120000      R     LCALL   L?0304
012D D003              POP     AR3
012F D002              POP     AR2
0131 D001              POP     AR1
0133 D000              POP     AR0
0135 120000      E     LCALL   ?C?LSUB
0138         ?C0175:
0138 900000      R     MOV     DPTR,#cnt
013B EE                MOV     A,R6
013C F0                MOVX    @DPTR,A
013D A3                INC     DPTR
013E EF                MOV     A,R7
013F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 830
0140 900000      R     MOV     DPTR,#cnt
0143 E0                MOVX    A,@DPTR
0144 FE                MOV     R6,A
0145 A3                INC     DPTR
0146 E0                MOVX    A,@DPTR
0147 FF                MOV     R7,A
0148 C006              PUSH    AR6
014A C007              PUSH    AR7
014C 900000      R     MOV     DPTR,#f
014F 120000      R     LCALL   L?0279
0152 120000      R     LCALL   L?0358
0155 FA                MOV     R2,A
0156 7B01              MOV     R3,#01H
0158 C003              PUSH    AR3
015A C002              PUSH    AR2
015C C001              PUSH    AR1
015E 900000      R     MOV     DPTR,#buffer
0161 120000      R     LCALL   L?0325
0164 D001              POP     AR1
0166 D002              POP     AR2
0168 D003              POP     AR3
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 116 

016A D007              POP     AR7
016C D006              POP     AR6
016E 120000      E     LCALL   ?C?MEMMOVE
                                           ; SOURCE LINE # 832
0171 900000      R     MOV     DPTR,#cnt
0174 120000      R     LCALL   L?0337
                                           ; SOURCE LINE # 833
0177 120000      R     LCALL   L?0353
017A 120000      R     LCALL   L?0378
017D C003              PUSH    AR3
017F C002              PUSH    AR2
0181 C001              PUSH    AR1
0183 120000      R     LCALL   L?0408
0186 D001              POP     AR1
0188 D002              POP     AR2
018A D003              POP     AR3
018C 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 834
018F 900000      R     MOV     DPTR,#cnt
0192 120000      R     LCALL   L?0322
0195 900000      R     MOV     DPTR,#count+01H
0198 E0                MOVX    A,@DPTR
0199 9F                SUBB    A,R7
019A F0                MOVX    @DPTR,A
019B 900000      R     MOV     DPTR,#count
019E E0                MOVX    A,@DPTR
019F 9E                SUBB    A,R6
01A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 835
01A1 900000      R     MOV     DPTR,#buffer+01H
01A4 120000      R     LCALL   L?0338
                                           ; SOURCE LINE # 836
01A7 020000      R     LJMP    ?C0170
01AA         ?C0171:
                                           ; SOURCE LINE # 838
01AA 900000      R     MOV     DPTR,#total_cnt
01AD E0                MOVX    A,@DPTR
01AE FE                MOV     R6,A
01AF A3                INC     DPTR
01B0 E0                MOVX    A,@DPTR
01B1 FF                MOV     R7,A
                                           ; SOURCE LINE # 839
01B2         ?C0166:
01B2 22                RET     
             ; FUNCTION _fread (END)

             ; FUNCTION _fwrite (BEGIN)
                                           ; SOURCE LINE # 853
0000 900000      R     MOV     DPTR,#f
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 854
                                           ; SOURCE LINE # 855
0006 E4                CLR     A
0007 900000      R     MOV     DPTR,#total_cnt
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 857
000D 120000      R     LCALL   L?0289
0010 120000      R     LCALL   L?0399
0013 600A              JZ      ?C0177
0015 900000      R     MOV     DPTR,#count
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 117 

0018 E0                MOVX    A,@DPTR
0019 7002              JNZ     ?C0244
001B A3                INC     DPTR
001C E0                MOVX    A,@DPTR
001D         ?C0244:
001D 7003              JNZ     ?C0176
001F         ?C0177:
001F 020000      R     LJMP    ?C0251
0022         ?C0176:
                                           ; SOURCE LINE # 861
0022 90000B            MOV     DPTR,#0BH
0025 120000      R     LCALL   L?0409
0028 120000      R     LCALL   L?0256
002B 120000      R     LCALL   L?0288
002E 90000F            MOV     DPTR,#0FH
0031 120000      E     LCALL   ?C?LLDOPTR0
0034 C3                CLR     C
0035 120000      E     LCALL   ?C?ULCMP
0038 4003              JC      $ + 5H
003A 020000      R     LJMP    ?C0185
                                           ; SOURCE LINE # 868
003D 120000      R     LCALL   L?0277
0040 120000      R     LCALL   L?0409
0043 120000      R     LCALL   L?0256
0046 120000      E     LCALL   ?C?LADD
0049 120000      R     LCALL   L?0299
004C C007              PUSH    AR7
004E 120000      R     LCALL   L?0330
0051 F9                MOV     R1,A
0052 F8                MOV     R0,A
0053 D007              POP     AR7
0055 120000      R     LCALL   L?0411
0058 900000      R     MOV     DPTR,#xtra
005B F0                MOVX    @DPTR,A
005C A3                INC     DPTR
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 869
005F 120000      R     LCALL   L?0289
0062 120000      R     LCALL   L?0306
0065 EC                MOV     A,R4
0066 4D                ORL     A,R5
0067 4E                ORL     A,R6
0068 4F                ORL     A,R7
0069 6020              JZ      ?C0180
                                           ; SOURCE LINE # 870
006B 120000      R     LCALL   L?0306
006E 120000      R     LCALL   L?0299
0071 C007              PUSH    AR7
0073 120000      R     LCALL   L?0330
0076 F9                MOV     R1,A
0077 F8                MOV     R0,A
0078 D007              POP     AR7
007A 120000      R     LCALL   L?0411
007D FE                MOV     R6,A
007E C3                CLR     C
007F 900000      R     MOV     DPTR,#xtra+01H
0082 E0                MOVX    A,@DPTR
0083 9F                SUBB    A,R7
0084 F0                MOVX    @DPTR,A
0085 900000      R     MOV     DPTR,#xtra
0088 E0                MOVX    A,@DPTR
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 118 

0089 9E                SUBB    A,R6
008A F0                MOVX    @DPTR,A
008B         ?C0180:
                                           ; SOURCE LINE # 873
008B 900000      R     MOV     DPTR,#xtra
008E E0                MOVX    A,@DPTR
008F 7002              JNZ     ?C0245
0091 A3                INC     DPTR
0092 E0                MOVX    A,@DPTR
0093         ?C0245:
0093 6032              JZ      ?C0181
                                           ; SOURCE LINE # 874
0095 120000      R     LCALL   L?0289
0098 900002            MOV     DPTR,#02H
009B 120000      E     LCALL   ?C?LLDOPTR
009E C007              PUSH    AR7
00A0 120000      R     LCALL   L?0330
00A3 F9                MOV     R1,A
00A4 F8                MOV     R0,A
00A5 D007              POP     AR7
00A7 120000      E     LCALL   ?C?ULDIV
00AA 900000      R     MOV     DPTR,#xtra
00AD E0                MOVX    A,@DPTR
00AE FC                MOV     R4,A
00AF A3                INC     DPTR
00B0 E0                MOVX    A,@DPTR
00B1 FD                MOV     R5,A
00B2 120000      R     LCALL   _fat_chain_alloc
00B5 900000      R     MOV     DPTR,#alloced
00B8 EE                MOV     A,R6
00B9 F0                MOVX    @DPTR,A
00BA A3                INC     DPTR
00BB EF                MOV     A,R7
00BC F0                MOVX    @DPTR,A
00BD BEFF07            CJNE    R6,#0FFH,?C0181
00C0 BFFF04            CJNE    R7,#0FFH,?C0181
                                           ; SOURCE LINE # 875
00C3         ?C0251:
00C3 E4                CLR     A
00C4 FE                MOV     R6,A
00C5 FF                MOV     R7,A
00C6 22                RET     
                                           ; SOURCE LINE # 876
00C7         ?C0181:
                                           ; SOURCE LINE # 879
00C7 120000      R     LCALL   L?0289
00CA 900006            MOV     DPTR,#06H
00CD 120000      R     LCALL   L?0266
00D0 E4                CLR     A
00D1 FC                MOV     R4,A
00D2 FD                MOV     R5,A
00D3 120000      E     LCALL   _Sect_Read
                                           ; SOURCE LINE # 880
00D6 120000      R     LCALL   L?0289
00D9 900008            MOV     DPTR,#08H
00DC 120000      R     LCALL   L?0381
00DF 900000      R     MOV     DPTR,#entry
00E2 120000      R     LCALL   L?0319
                                           ; SOURCE LINE # 881
00E5 90001C            MOV     DPTR,#01CH
00E8 120000      E     LCALL   ?C?LLDOPTR
00EB E4                CLR     A
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 119 

00EC 1B                DEC     R3
00ED FA                MOV     R2,A
00EE F9                MOV     R1,A
00EF F8                MOV     R0,A
00F0 C3                CLR     C
00F1 120000      E     LCALL   ?C?ULCMP
00F4 7039              JNZ     ?C0183
00F6 900000      R     MOV     DPTR,#entry
00F9 120000      R     LCALL   L?0265
00FC C3                CLR     C
00FD 9402              SUBB    A,#02H
00FF EE                MOV     A,R6
0100 9400              SUBB    A,#00H
0102 4008              JC      ?C0184
0104 EF                MOV     A,R7
0105 94F0              SUBB    A,#0F0H
0107 EE                MOV     A,R6
0108 94FF              SUBB    A,#0FFH
010A 4023              JC      ?C0183
010C         ?C0184:
                                           ; SOURCE LINE # 882
                                           ; SOURCE LINE # 883
010C 900000      R     MOV     DPTR,#alloced
010F E0                MOVX    A,@DPTR
0110 FE                MOV     R6,A
0111 A3                INC     DPTR
0112 E0                MOVX    A,@DPTR
0113 FF                MOV     R7,A
0114 120000      R     LCALL   L?0289
0117 EE                MOV     A,R6
0118 8FF0              MOV     B,R7
011A 120000      E     LCALL   ?C?ISTPTR
011D 120000      E     LCALL   _htons
0120 900000      R     MOV     DPTR,#entry
0123 120000      E     LCALL   ?C?PLDXDATA
0126 90001A            MOV     DPTR,#01AH
0129 EE                MOV     A,R6
012A 8FF0              MOV     B,R7
012C 120000      E     LCALL   ?C?ISTOPTR
                                           ; SOURCE LINE # 884
012F         ?C0183:
                                           ; SOURCE LINE # 885
012F 120000      R     LCALL   L?0277
0132 120000      R     LCALL   L?0410
0135 120000      R     LCALL   L?0256
0138 120000      R     LCALL   L?0288
013B 90000F            MOV     DPTR,#0FH
013E 120000      E     LCALL   ?C?LSTOPTR
0141 120000      E     LCALL   _htonl
0144 900000      R     MOV     DPTR,#entry
0147 120000      E     LCALL   ?C?PLDXDATA
014A 90001C            MOV     DPTR,#01CH
014D 120000      E     LCALL   ?C?LSTOPTR
                                           ; SOURCE LINE # 886
0150 120000      R     LCALL   L?0378
0153 120000      E     LCALL   ?C?CLDPTR
0156 4420              ORL     A,#020H
0158 FF                MOV     R7,A
0159 120000      E     LCALL   ?C?CSTPTR
015C 120000      R     LCALL   L?0289
015F 90000A            MOV     DPTR,#0AH
0162 EF                MOV     A,R7
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 120 

0163 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 887
0166 900006            MOV     DPTR,#06H
0169 120000      R     LCALL   L?0266
016C E4                CLR     A
016D FC                MOV     R4,A
016E FD                MOV     R5,A
016F 120000      E     LCALL   _Sect_Write
                                           ; SOURCE LINE # 888
0172         ?C0185:
                                           ; SOURCE LINE # 894
0172 900000      R     MOV     DPTR,#count
0175 E0                MOVX    A,@DPTR
0176 7002              JNZ     ?C0246
0178 A3                INC     DPTR
0179 E0                MOVX    A,@DPTR
017A         ?C0246:
017A 7003              JNZ     $ + 5H
017C 020000      R     LJMP    ?C0186
017F 120000      R     LCALL   L?0289
0182 120000      R     LCALL   _feof
0185 EF                MOV     A,R7
0186 4E                ORL     A,R6
0187 6003              JZ      $ + 5H
0189 020000      R     LJMP    ?C0186
                                           ; SOURCE LINE # 895
018C 120000      R     LCALL   L?0289
018F 120000      R     LCALL   L?0407
0192 C004              PUSH    AR4
0194 C005              PUSH    AR5
0196 C006              PUSH    AR6
0198 C007              PUSH    AR7
019A 120000      R     LCALL   L?0278
019D 120000      E     LCALL   ?C?LLDOPTR
01A0 120000      R     LCALL   L?0300
01A3 900000      R     MOV     DPTR,#?_fat_chain?BYTE+04H
01A6 EE                MOV     A,R6
01A7 F0                MOVX    @DPTR,A
01A8 A3                INC     DPTR
01A9 EF                MOV     A,R7
01AA F0                MOVX    @DPTR,A
01AB D007              POP     AR7
01AD D006              POP     AR6
01AF D005              POP     AR5
01B1 D004              POP     AR4
01B3 120000      R     LCALL   _fat_chain
01B6 120000      R     LCALL   L?0289
01B9 120000      R     LCALL   L?0397
                                           ; SOURCE LINE # 898
01BC 120000      E     LCALL   Sect_File_Data
01BF 120000      R     LCALL   L?0275
01C2 120000      R     LCALL   L?0354
01C5 120000      E     LCALL   _Sect_Read
                                           ; SOURCE LINE # 902
01C8 120000      R     LCALL   L?0278
01CB 120000      E     LCALL   ?C?LLDOPTR
01CE 900000      R     MOV     DPTR,#count
01D1 120000      R     LCALL   L?0255
01D4 C3                CLR     C
01D5 120000      E     LCALL   ?C?ULCMP
01D8 5008              JNC     ?C0187
01DA 120000      R     LCALL   L?0278
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 121 

01DD 120000      R     LCALL   L?0291
01E0 8006              SJMP    ?C0188
01E2         ?C0187:
01E2 900000      R     MOV     DPTR,#count
01E5 120000      R     LCALL   L?0256
01E8         ?C0188:
01E8 900000      R     MOV     DPTR,#cnt
01EB EE                MOV     A,R6
01EC F0                MOVX    @DPTR,A
01ED A3                INC     DPTR
01EE EF                MOV     A,R7
01EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 903
01F0 120000      R     LCALL   L?0278
01F3 120000      E     LCALL   ?C?LLDOPTR0
01F6 C000              PUSH    AR0
01F8 C001              PUSH    AR1
01FA C002              PUSH    AR2
01FC C003              PUSH    AR3
01FE 120000      R     LCALL   L?0289
0201 120000      R     LCALL   L?0306
0204 D003              POP     AR3
0206 D002              POP     AR2
0208 D001              POP     AR1
020A D000              POP     AR0
020C 120000      R     LCALL   L?0377
020F 900000      R     MOV     DPTR,#cnt
0212 120000      R     LCALL   L?0256
0215 D3                SETB    C
0216 120000      E     LCALL   ?C?ULCMP
0219 4008              JC      ?C0189
021B 900000      R     MOV     DPTR,#cnt
021E 120000      R     LCALL   L?0256
0221 801F              SJMP    ?C0190
0223         ?C0189:
0223 120000      R     LCALL   L?0278
0226 120000      E     LCALL   ?C?LLDOPTR0
0229 C000              PUSH    AR0
022B C001              PUSH    AR1
022D C002              PUSH    AR2
022F C003              PUSH    AR3
0231 120000      R     LCALL   L?0289
0234 120000      R     LCALL   L?0306
0237 D003              POP     AR3
0239 D002              POP     AR2
023B D001              POP     AR1
023D D000              POP     AR0
023F 120000      E     LCALL   ?C?LSUB
0242         ?C0190:
0242 900000      R     MOV     DPTR,#cnt
0245 EE                MOV     A,R6
0246 F0                MOVX    @DPTR,A
0247 A3                INC     DPTR
0248 EF                MOV     A,R7
0249 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 905
024A 900000      R     MOV     DPTR,#cnt
024D E0                MOVX    A,@DPTR
024E FE                MOV     R6,A
024F A3                INC     DPTR
0250 E0                MOVX    A,@DPTR
0251 FF                MOV     R7,A
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 122 

0252 C006              PUSH    AR6
0254 C007              PUSH    AR7
0256 120000      R     LCALL   L?0278
0259 120000      R     LCALL   L?0358
025C 900000      R     MOV     DPTR,#buffer
025F 120000      R     LCALL   L?0376
0262 D007              POP     AR7
0264 D006              POP     AR6
0266 120000      E     LCALL   ?C?MEMMOVE
                                           ; SOURCE LINE # 908
0269 120000      E     LCALL   Sect_File_Data
026C 120000      R     LCALL   L?0275
026F 120000      R     LCALL   L?0355
0272 120000      E     LCALL   _Sect_Write
                                           ; SOURCE LINE # 910
0275 900000      R     MOV     DPTR,#cnt
0278 120000      R     LCALL   L?0337
                                           ; SOURCE LINE # 911
027B 120000      R     LCALL   L?0289
027E 120000      R     LCALL   L?0379
0281 C003              PUSH    AR3
0283 C002              PUSH    AR2
0285 C001              PUSH    AR1
0287 120000      R     LCALL   L?0408
028A D001              POP     AR1
028C D002              POP     AR2
028E D003              POP     AR3
0290 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 912
0293 900000      R     MOV     DPTR,#cnt
0296 120000      R     LCALL   L?0322
0299 900000      R     MOV     DPTR,#count+01H
029C E0                MOVX    A,@DPTR
029D 9F                SUBB    A,R7
029E F0                MOVX    @DPTR,A
029F 900000      R     MOV     DPTR,#count
02A2 E0                MOVX    A,@DPTR
02A3 9E                SUBB    A,R6
02A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 913
02A5 900000      R     MOV     DPTR,#buffer+01H
02A8 120000      R     LCALL   L?0338
                                           ; SOURCE LINE # 914
02AB 020000      R     LJMP    ?C0185
02AE         ?C0186:
                                           ; SOURCE LINE # 916
02AE 900000      R     MOV     DPTR,#total_cnt
02B1 E0                MOVX    A,@DPTR
02B2 FE                MOV     R6,A
02B3 A3                INC     DPTR
02B4 E0                MOVX    A,@DPTR
02B5 FF                MOV     R7,A
                                           ; SOURCE LINE # 917
02B6         ?C0178:
02B6 22                RET     
             ; FUNCTION _fwrite (END)

             ; FUNCTION _fclose (BEGIN)
                                           ; SOURCE LINE # 930
;---- Variable 'f' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 931
                                           ; SOURCE LINE # 932
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 123 

0000 900013            MOV     DPTR,#013H
0003 E4                CLR     A
0004 020000      E     LJMP    ?C?CSTOPTR
             ; FUNCTION _fclose (END)

             ; FUNCTION _fdelete (BEGIN)
                                           ; SOURCE LINE # 946
0000 900000      R     MOV     DPTR,#name
                                           ; SOURCE LINE # 947
                                           ; SOURCE LINE # 948
0003 120000      R     LCALL   L?0283
0006 E4                CLR     A
0007 FD                MOV     R5,A
0008 120000      R     LCALL   _findfirst
000B         ?C0192:
                                           ; SOURCE LINE # 949
000B 120000      R     LCALL   L?0281
000E 900000      R     MOV     DPTR,#name
0011 120000      E     LCALL   ?C?PLDXDATA
0014 120000      R     LCALL   _file_name_match
0017 EF                MOV     A,R7
0018 700C              JNZ     ?C0193
                                           ; SOURCE LINE # 950
001A 120000      R     LCALL   L?0284
001D 120000      R     LCALL   _findnext
0020 EF                MOV     A,R7
0021 70E8              JNZ     ?C0192
                                           ; SOURCE LINE # 951
0023 FE                MOV     R6,A
0024 FF                MOV     R7,A
0025 22                RET     
                                           ; SOURCE LINE # 952
                                           ; SOURCE LINE # 953
0026         ?C0193:
                                           ; SOURCE LINE # 956
0026 900000      R     MOV     DPTR,#findinfo+07H
0029 120000      R     LCALL   L?0279
002C 120000      E     LCALL   ?C?CLDOPTR
002F 5418              ANL     A,#018H
0031 6004              JZ      ?C0196
0033 E4                CLR     A
0034 FE                MOV     R6,A
0035 FF                MOV     R7,A
0036 22                RET     
0037         ?C0196:
                                           ; SOURCE LINE # 961
                                           ; SOURCE LINE # 962
0037 120000      R     LCALL   L?0286
003A 120000      E     LCALL   _Sect_Write
                                           ; SOURCE LINE # 963
003D 120000      R     LCALL   L?0264
0040 120000      E     LCALL   _htons
0043 120000      R     LCALL   _fat_chain_free
                                           ; SOURCE LINE # 965
0046 7E00              MOV     R6,#00H
0048 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 966
004A         ?C0195:
004A 22                RET     
             ; FUNCTION _fdelete (END)

             ; FUNCTION _findvalid (BEGIN)
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 124 

                                           ; SOURCE LINE # 971
0000 900000      R     MOV     DPTR,#findinfo
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 972
                                           ; SOURCE LINE # 973
0006 120000      R     LCALL   L?0274
0009 120000      E     LCALL   ?C?CLDPTR
;---- Variable 'n0' assigned to Register 'R6' ----
000C FE                MOV     R6,A
                                           ; SOURCE LINE # 974
000D 900000      R     MOV     DPTR,#findinfo
0010 120000      E     LCALL   ?C?PLDXDATA
0013 900006            MOV     DPTR,#06H
0016 120000      E     LCALL   ?C?CLDOPTR
0019 600E              JZ      ?C0197
                                           ; SOURCE LINE # 975
001B EE                MOV     A,R6
001C 64E5              XRL     A,#0E5H
001E 6003              JZ      ?C0200
0020 EE                MOV     A,R6
0021 7003              JNZ     ?C0198
0023         ?C0200:
0023 7F01              MOV     R7,#01H
0025 22                RET     
0026         ?C0198:
0026 7F00              MOV     R7,#00H
0028         ?C0199:
0028 22                RET     
                                           ; SOURCE LINE # 976
0029         ?C0197:
                                           ; SOURCE LINE # 977
0029 EE                MOV     A,R6
002A 64E5              XRL     A,#0E5H
002C 6019              JZ      ?C0202
002E D3                SETB    C
002F EE                MOV     A,R6
0030 6480              XRL     A,#080H
0032 94A0              SUBB    A,#0A0H
0034 4011              JC      ?C0202
0036 120000      R     LCALL   L?0274
0039 90000B            MOV     DPTR,#0BH
003C 120000      E     LCALL   ?C?CLDOPTR
003F 640F              XRL     A,#0FH
0041 6004              JZ      ?C0202
0043 7F01              MOV     R7,#01H
0045 8002              SJMP    ?C0203
0047         ?C0202:
0047 7F00              MOV     R7,#00H
0049         ?C0203:
                                           ; SOURCE LINE # 978
0049         ?C0201:
0049 22                RET     
             ; FUNCTION _findvalid (END)

             ; FUNCTION _findfirst (BEGIN)
                                           ; SOURCE LINE # 981
0000 900000      R     MOV     DPTR,#findinfo
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#empty
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 982
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 125 

                                           ; SOURCE LINE # 983
000B 900000      R     MOV     DPTR,#Current_Dir_Block
000E 120000      E     LCALL   ?C?LLDXDATA
0011 120000      R     LCALL   L?0356
0014 120000      E     LCALL   ?C?LSTPTR
0017 120000      E     LCALL   _Sect_Read
                                           ; SOURCE LINE # 985
001A 900000      R     MOV     DPTR,#empty
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F 120000      R     LCALL   L?0356
0022 900006            MOV     DPTR,#06H
0025 EF                MOV     A,R7
0026 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 987
0029 7E00              MOV     R6,#00H
002B 7F00              MOV     R7,#00H
002D EE                MOV     A,R6
002E 120000      R     LCALL   L?0308
0031 EF                MOV     A,R7
0032 2400        E     ADD     A,#LOW Scratch
0034 F9                MOV     R1,A
0035 EE                MOV     A,R6
0036 3400        E     ADDC    A,#HIGH Scratch
0038 FA                MOV     R2,A
0039 7B01              MOV     R3,#01H
003B C003              PUSH    AR3
003D C002              PUSH    AR2
003F C001              PUSH    AR1
0041 120000      R     LCALL   L?0357
0044 900007            MOV     DPTR,#07H
0047 120000      E     LCALL   ?C?PSTOPTR
                                           ; SOURCE LINE # 988
004A 120000      R     LCALL   L?0357
004D 120000      R     LCALL   _findvalid
0050 EF                MOV     A,R7
0051 6003              JZ      ?C0204
                                           ; SOURCE LINE # 989
0053 7F01              MOV     R7,#01H
0055 22                RET     
0056         ?C0204:
                                           ; SOURCE LINE # 990
0056 120000      R     LCALL   L?0357
0059 120000      R     LCALL   _findnext
                                           ; SOURCE LINE # 991
005C         ?C0205:
005C 22                RET     
             ; FUNCTION _findfirst (END)

             ; FUNCTION _findnext (BEGIN)
                                           ; SOURCE LINE # 994
0000 900000      R     MOV     DPTR,#findinfo
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 995
                                           ; SOURCE LINE # 996
0006 120000      E     LCALL   Sect_Root_Dir
0009 120000      R     LCALL   L?0385
000C 120000      R     LCALL   L?0296
000F 7004              JNZ     ?C0206
0011 7F01              MOV     R7,#01H
0013 8002              SJMP    ?C0207
0015         ?C0206:
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 126 

0015 7F00              MOV     R7,#00H
0017         ?C0207:
0017 900000      R     MOV     DPTR,#bRoot
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
001C         ?C0210:
                                           ; SOURCE LINE # 999
                                           ; SOURCE LINE # 1000
001C 120000      R     LCALL   L?0339
001F 900004            MOV     DPTR,#04H
0022 E4                CLR     A
0023 75F020            MOV     B,#020H
0026 120000      E     LCALL   ?C?IILDOPTR
0029 C3                CLR     C
002A 9402              SUBB    A,#02H
002C 5003              JNC     $ + 5H
002E 020000      R     LJMP    ?C0211
                                           ; SOURCE LINE # 1001
0031 120000      E     LCALL   ?C?LLDPTR
0034 120000      R     LCALL   _Get_First_Block_Directory_Cluster
0037 900000      R     MOV     DPTR,#dir_next_cluster_block
003A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1003
003D 900000      R     MOV     DPTR,#bRoot
0040 E0                MOVX    A,@DPTR
0041 6015              JZ      ?C0212
0043 120000      E     LCALL   Sect_Root_Dir_Last
0046 900000      R     MOV     DPTR,#findinfo
0049 120000      R     LCALL   L?0320
004C 120000      E     LCALL   ?C?LLDPTR0
004F C3                CLR     C
0050 120000      E     LCALL   ?C?ULCMP
0053 4003              JC      ?C0212
                                           ; SOURCE LINE # 1004
                                           ; SOURCE LINE # 1006
0055 7F00              MOV     R7,#00H
0057 22                RET     
                                           ; SOURCE LINE # 1007
0058         ?C0212:
                                           ; SOURCE LINE # 1008
0058 900000      R     MOV     DPTR,#bRoot
005B E0                MOVX    A,@DPTR
005C 6003              JZ      $ + 5H
005E 020000      R     LJMP    ?C0215
0061 A3                INC     DPTR
0062 120000      R     LCALL   L?0295
0065 7003              JNZ     $ + 5H
0067 020000      R     LJMP    ?C0215
006A 120000      R     LCALL   L?0406
006D 900000      R     MOV     DPTR,#dir_next_cluster_block
0070 120000      E     LCALL   ?C?LLDXDATA0
0073 120000      E     LCALL   ?C?LADD
0076 EF                MOV     A,R7
0077 24FF              ADD     A,#0FFH
0079 FF                MOV     R7,A
007A EE                MOV     A,R6
007B 34FF              ADDC    A,#0FFH
007D FE                MOV     R6,A
007E ED                MOV     A,R5
007F 34FF              ADDC    A,#0FFH
0081 FD                MOV     R5,A
0082 EC                MOV     A,R4
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 127 

0083 34FF              ADDC    A,#0FFH
0085 FC                MOV     R4,A
0086 120000      R     LCALL   L?0339
0089 120000      E     LCALL   ?C?LLDPTR0
008C C3                CLR     C
008D 120000      E     LCALL   ?C?ULCMP
0090 407B              JC      ?C0215
                                           ; SOURCE LINE # 1010
                                           ; SOURCE LINE # 1012
0092 120000      R     LCALL   L?0412
0095 120000      R     LCALL   _Get_Cluster_From_Sector
0098 120000      R     LCALL   _Get_First_Block_Of_Next_Cluster
009B 900000      R     MOV     DPTR,#next_next_block
009E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1015
00A1 74FF              MOV     A,#0FFH
00A3 FF                MOV     R7,A
00A4 FE                MOV     R6,A
00A5 FD                MOV     R5,A
00A6 FC                MOV     R4,A
00A7 900000      R     MOV     DPTR,#next_next_block
00AA 120000      R     LCALL   L?0296
00AD 7047              JNZ     ?C0216
                                           ; SOURCE LINE # 1016
                                           ; SOURCE LINE # 1017
00AF 120000      R     LCALL   L?0340
00B2 900006            MOV     DPTR,#06H
00B5 120000      E     LCALL   ?C?CLDOPTR
00B8 7002              JNZ     ?C0217
                                           ; SOURCE LINE # 1018
00BA FF                MOV     R7,A
00BB 22                RET     
00BC         ?C0217:
                                           ; SOURCE LINE # 1020
                                           ; SOURCE LINE # 1021
00BC 120000      R     LCALL   L?0412
00BF 120000      R     LCALL   _Get_Cluster_From_Sector
00C2 7D01              MOV     R5,#01H
00C4 7C00              MOV     R4,#00H
00C6 120000      R     LCALL   _fat_chain_alloc
00C9 900000      R     MOV     DPTR,#new_cluster
00CC EE                MOV     A,R6
00CD F0                MOVX    @DPTR,A
00CE A3                INC     DPTR
00CF EF                MOV     A,R7
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1023
00D1 BEFF06            CJNE    R6,#0FFH,?C0219
00D4 BFFF03            CJNE    R7,#0FFH,?C0219
                                           ; SOURCE LINE # 1024
00D7 7F00              MOV     R7,#00H
00D9 22                RET     
00DA         ?C0219:
                                           ; SOURCE LINE # 1025
00DA 900000      R     MOV     DPTR,#new_cluster
00DD E0                MOVX    A,@DPTR
00DE FE                MOV     R6,A
00DF A3                INC     DPTR
00E0 E0                MOVX    A,@DPTR
00E1 FF                MOV     R7,A
00E2 120000      R     LCALL   _Get_First_Sector
00E5 900000      R     MOV     DPTR,#next_next_block
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 128 

00E8 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1026
00EB 900000      R     MOV     DPTR,#new_cluster
00EE E0                MOVX    A,@DPTR
00EF FE                MOV     R6,A
00F0 A3                INC     DPTR
00F1 E0                MOVX    A,@DPTR
00F2 FF                MOV     R7,A
00F3 120000      R     LCALL   _Clear_Cluster
                                           ; SOURCE LINE # 1027
                                           ; SOURCE LINE # 1028
00F6         ?C0216:
                                           ; SOURCE LINE # 1030
00F6 900000      R     MOV     DPTR,#next_next_block
00F9 120000      E     LCALL   ?C?LLDXDATA
00FC 900000      R     MOV     DPTR,#dir_next_cluster_block
00FF 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1031
0102 120000      R     LCALL   L?0307
                                           ; SOURCE LINE # 1032
0105 120000      R     LCALL   L?0413
0108 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 1033
010B 800E              SJMP    ?C0252
010D         ?C0215:
                                           ; SOURCE LINE # 1034
                                           ; SOURCE LINE # 1035
010D 120000      R     LCALL   L?0307
                                           ; SOURCE LINE # 1036
0110 7F01              MOV     R7,#01H
0112 7E00              MOV     R6,#00H
0114 7D00              MOV     R5,#00H
0116 7C00              MOV     R4,#00H
0118 120000      E     LCALL   ?C?LILDPTR
011B         ?C0252:
011B 120000      E     LCALL   _Sect_Read
                                           ; SOURCE LINE # 1038
                                           ; SOURCE LINE # 1039
011E         ?C0211:
                                           ; SOURCE LINE # 1042
011E 120000      R     LCALL   L?0340
0121 900004            MOV     DPTR,#04H
0124 120000      R     LCALL   L?0381
0127 FA                MOV     R2,A
0128 7B01              MOV     R3,#01H
012A C003              PUSH    AR3
012C C002              PUSH    AR2
012E C001              PUSH    AR1
0130 120000      R     LCALL   L?0340
0133 900007            MOV     DPTR,#07H
0136 120000      E     LCALL   ?C?PSTOPTR
                                           ; SOURCE LINE # 1043
0139 120000      R     LCALL   L?0340
013C 120000      R     LCALL   _findvalid
013F EF                MOV     A,R7
0140 7003              JNZ     $ + 5H
0142 020000      R     LJMP    ?C0210
                                           ; SOURCE LINE # 1045
0145 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1046
0147         ?C0213:
0147 22                RET     
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 129 

             ; FUNCTION _findnext (END)

C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 130 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
_rmdir . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dir_name . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  dir_deep . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0003H  2
  prev_dir_block . . . . . . . . . . .  AUTO     XDATA  ARRAY    0005H  240
  first_part_of_dir. . . . . . . . . .  AUTO     XDATA  ARRAY    00F5H  20
  dir_tmp_name . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0109H  20
  tmp. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      011DH  3
_feof. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  f. . . . . . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
_fat_chain . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  from . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0000H  4
  nr . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  fat_table. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0006H  3
  sect . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  sect_prev. . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0009H  2
  cluster. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000BH  2
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
_fat_chain_free. . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  from . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  fat_table. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0002H  3
  sect . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0005H  2
  sect_prev. . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0007H  2
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0009H  2
_htonl . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_htons . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Sect_Root_Dir_Last . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Clear_Cluster . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  cluster. . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  sector . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0000H  4
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
_Get_Cluster_From_Sector . . . . . . .  STATIC   CODE   PROC     0000H  -----
  sector . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0000H  4
_strstr. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_findvalid . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  findinfo . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  n0 . . . . . . . . . . . . . . . . .  * REG *  DATA   CHAR     0006H  1
Sect_Root_Dir. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Get_First_Block_Of_Next_Cluster . . .  STATIC   CODE   PROC     0000H  -----
  cluster. . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0000H  4
_Get_First_Block_Directory_Cluster . .  STATIC   CODE   PROC     0000H  -----
  sector . . . . . . . . . . . . . . .  * REG *  DATA   U_LONG   0004H  4
  cluster. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  next_dir_cluster . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_FillDirEntry. . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  direntry . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  dir_name . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
FILE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  20
  cluster_start. . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  sector_current . . . . . . . . . . .  MEMBER   -----  U_LONG   0002H  4
  sector_direntry. . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  offset_direntry. . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  attrib . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 131 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  pos. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   000BH  4
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   000FH  4
  isopen . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0013H  1
bootrecord_large . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  512
  jmp. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  oem_name . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0003H  8
  bytes_per_sector . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  sectors_per_cluster. . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  reserved_sectors . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  fat_copies . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  root_directory_entries . . . . . . .  MEMBER   -----  U_INT    0011H  2
  number_of_sectors. . . . . . . . . .  MEMBER   -----  U_INT    0013H  2
  media_descriptor . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  sectors_per_fat. . . . . . . . . . .  MEMBER   -----  U_INT    0016H  2
  sectors_per_track. . . . . . . . . .  MEMBER   -----  U_INT    0018H  2
  heads. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    001AH  2
  hidden_sectors . . . . . . . . . . .  MEMBER   -----  U_LONG   001CH  4
  total_sectors. . . . . . . . . . . .  MEMBER   -----  U_LONG   0020H  4
  drive_number . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0024H  1
  reserved . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0025H  1
  extended_signature . . . . . . . . .  MEMBER   -----  U_CHAR   0026H  1
  serial_number. . . . . . . . . . . .  MEMBER   -----  ARRAY    0027H  4
  volume_label . . . . . . . . . . . .  MEMBER   -----  ARRAY    002BH  11
  filesystem . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0036H  8
  bootstrap. . . . . . . . . . . . . .  MEMBER   -----  ARRAY    003EH  448
  signature. . . . . . . . . . . . . .  MEMBER   -----  ARRAY    01FEH  2
_findfirst . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  findinfo . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  empty. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
find_info. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  10
  block. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  offset . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  findempty. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  direntry . . . . . . . . . . . . . .  MEMBER   -----  PTR      0007H  3
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
Current_Dir_Block. . . . . . . . . . .  PUBLIC   XDATA  U_LONG   0000H  4
bootrecord_small . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  17
  valid. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  fat_copies . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  root_directory_entries . . . . . . .  MEMBER   -----  U_INT    0002H  2
  number_of_sectors. . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  sectors_per_fat. . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  total_sectors. . . . . . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  reserved_sectors . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  hidden_sectors . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  sectors_per_cluster. . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
write_current_dir. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
FileSys_Init . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_fdelete . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  name . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  i. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  c. . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
_fcreate . . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  findinfo . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  filename . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 132 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
Sect_Fat1. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Sect_Fat2. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Get_First_Sector. . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  cluster. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
_chngdir . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dirname. . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  next . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  pos. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0006H  3
  len. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0003H  2
_findnext. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  findinfo . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  new_cluster. . . . . . . . . . . . .  AUTO     XDATA  INT      000CH  2
  next_next_block. . . . . . . . . . .  AUTO     XDATA  U_LONG   0008H  4
  dir_next_cluster_block . . . . . . .  AUTO     XDATA  U_LONG   0004H  4
  bRoot. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
_Get_File_Name . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  direntry_name. . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  file_name. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0008H  2
  k. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000AH  2
_Get_Next_Cluster. . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  cluster. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  fat_table. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0002H  3
_Sect_Write_Multi_Fat. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Scratch. . . . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  -----
_Sect_Read . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Sect_File_Data . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
findinfo . . . . . . . . . . . . . . .  STATIC   XDATA  STRUCT   0004H  10
dir_entry. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  32
  lfn. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  32
  sfn. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  32
PREV_SEARCH. . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  block. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  offset . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
_Sect_Write. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_fclose. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  f. . . . . . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
MBR. . . . . . . . . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  17
_fread . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  f. . . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  buffer . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  count. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  cnt. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0008H  2
  total_cnt. . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000AH  2
GetClusterOfParentDirectory. . . . . .  STATIC   CODE   PROC     0000H  -----
UNI. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  i. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  c. . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
_tolower . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_fat_chain_alloc . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  from . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  nr . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  fat_table. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0004H  3
  sect . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0007H  2
  sect_prev. . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0009H  2
C51 COMPILER V8.02   F34X_MSD_FILE_SYSTEM          07/24/2007 22:07:36 PAGE 133 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000BH  2
  alloced. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000DH  2
Path_Name. . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    000EH  200
_toupper . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_fwrite. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  f. . . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  buffer . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  count. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  cnt. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0008H  2
  total_cnt. . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000AH  2
  xtra . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000CH  2
  alloced. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000EH  2
  entry. . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0010H  3
_file_name_match . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  filename . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  direntryname . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
_printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_mkdir . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dir_name . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  dir_sectors. . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0003H  4
  entry. . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0007H  3
  start_cluster. . . . . . . . . . . .  AUTO     XDATA  U_INT    000AH  2
  max_len. . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_fopen . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  f. . . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  filename . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  mode . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0006H  3
_strlen. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5912    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =    214     470
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
