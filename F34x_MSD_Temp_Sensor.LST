C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE F34X_MSD_TEMP_SENSOR
OBJECT MODULE PLACED IN F34x_MSD_Temp_Sensor.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe F34x_MSD_Temp_Sensor.c PW(80) SB LC
                    - OT(9,SIZE) CD DB OE DF(__F340_VER__) LARGE

line level    source

   1          //----------------------------------------------------------------
             --------------
   2          // F34x_MSD_Temp_Sensor.c
   3          //----------------------------------------------------------------
             --------------
   4          // Copyright 2006 Silicon Laboratories, Inc.
   5          // http://www.silabs.com
   6          //
   7          // Program Description:
   8          //
   9          // This file contains a functions for temperature sensor. These fu
             -nctions are
  10          // used to reading the temperature value from AD converter and rec
             -alculate it
  11          // to the value in celcius [C] to boot. In addition some of them a
             -re used to 
  12          // creating and updating the Log file.
  13          //
  14          //
  15          //
  16          // How To Test:    See Readme.txt
  17          //
  18          //
  19          // FID:            34X000055
  20          // Target:         C8051F34x
  21          // Tool chain:     Keil
  22          // Command Line:   See Readme.txt
  23          // Project Name:   F34x_USB_MSD
  24          //
  25          // Release 1.1
  26          //    -All changes by PKC
  27          //    -09 JUN 2006
  28          //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  29          //
  30          // Release 1.0
  31          //    -Initial Release
  32          //
  33          
  34          //----------------------------------------------------------------
             --------------
  35          // Includes
  36          //----------------------------------------------------------------
             --------------
  37          
  38          #include "c8051f340.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // C8051F340.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2005 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 2   

   7      =1  // Program Description:
   8      =1  //
   9      =1  // Register/bit definitions for the C8051F34x family.
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000002
  13      =1  // Target:         C8051F340, 'F341, 'F342, 'F343, 'F344, 'F345, '
             -F346, 'F347
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   None
  16      =1  //
  17      =1  // Release 1.0
  18      =1  //    -Initial Release (GP\PKC)
  19      =1  //    -13 DEC 2005
  20      =1  
  21      =1  //----------------------------------------------------------------
             --------------
  22      =1  // Header File Preprocessor Directive
  23      =1  //----------------------------------------------------------------
             --------------
  24      =1  
  25      =1  #ifndef C8051F340_H
  26      =1  #define C8051F340_H
  27      =1  
  28      =1  //----------------------------------------------------------------
             --------------
  29      =1  // Byte Registers
  30      =1  //----------------------------------------------------------------
             --------------
  31      =1  
  32      =1  sfr  P0           =  0x80;             // Port 0 Latch
  33      =1  sfr  SP           =  0x81;             // Stack Pointer
  34      =1  sfr  DPL          =  0x82;             // Data Pointer Low
  35      =1  sfr  DPH          =  0x83;             // Data Pointer High
  36      =1  sfr  EMI0TC       =  0x84;             // EMIF Timing
  37      =1  sfr  EMI0CF       =  0x85;             // EMIF Configuration
  38      =1  sfr  OSCLCN       =  0x86;             // Internal Low-Freq Oscill
             -ator Control
  39      =1  sfr  PCON         =  0x87;             // Power Control
  40      =1  sfr  TCON         =  0x88;             // Timer/Counter Control
  41      =1  sfr  TMOD         =  0x89;             // Timer/Counter Mode
  42      =1  sfr  TL0          =  0x8A;             // Timer/Counter 0 Low
  43      =1  sfr  TL1          =  0x8B;             // Timer/Counter 1 Low
  44      =1  sfr  TH0          =  0x8C;             // Timer/Counter 0 High
  45      =1  sfr  TH1          =  0x8D;             // Timer/Counter 1 High
  46      =1  sfr  CKCON        =  0x8E;             // Clock Control
  47      =1  sfr  PSCTL        =  0x8F;             // Program Store R/W Contro
             -l
  48      =1  sfr  P1           =  0x90;             // Port 1 Latch
  49      =1  sfr  TMR3CN       =  0x91;             // Timer/Counter 3Control
  50      =1  sfr  TMR3RLL      =  0x92;             // Timer/Counter 3 Reload L
             -ow
  51      =1  sfr  TMR3RLH      =  0x93;             // Timer/Counter 3 Reload H
             -igh
  52      =1  sfr  TMR3L        =  0x94;             // Timer/Counter 3Low
  53      =1  sfr  TMR3H        =  0x95;             // Timer/Counter 3 High
  54      =1  sfr  USB0ADR      =  0x96;             // USB0 Indirect Address Re
             -gister
  55      =1  sfr  USB0DAT      =  0x97;             // USB0 Data Register
  56      =1  sfr  SCON0        =  0x98;             // UART0 Control
  57      =1  sfr  SBUF0        =  0x99;             // UART0 Data Buffer
  58      =1  sfr  CPT1CN       =  0x9A;             // Comparator1 Control
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 3   

  59      =1  sfr  CPT0CN       =  0x9B;             // Comparator0 Control
  60      =1  sfr  CPT1MD       =  0x9C;             // Comparator1 Mode Selecti
             -on
  61      =1  sfr  CPT0MD       =  0x9D;             // Comparator0 Mode Selecti
             -on
  62      =1  sfr  CPT1MX       =  0x9E;             // Comparator1 MUX Selectio
             -n
  63      =1  sfr  CPT0MX       =  0x9F;             // Comparator0 MUX Selectio
             -n
  64      =1  sfr  P2           =  0xA0;             // Port 2 Latch
  65      =1  sfr  SPI0CFG      =  0xA1;             // SPI Configuration
  66      =1  sfr  SPI0CKR      =  0xA2;             // SPI Clock Rate Control
  67      =1  sfr  SPI0DAT      =  0xA3;             // SPI Data
  68      =1  sfr  P0MDOUT      =  0xA4;             // Port 0 Output Mode Confi
             -guration
  69      =1  sfr  P1MDOUT      =  0xA5;             // Port 1 Output Mode Confi
             -guration
  70      =1  sfr  P2MDOUT      =  0xA6;             // Port 2 Output Mode Confi
             -guration
  71      =1  sfr  P3MDOUT      =  0xA7;             // Port 3 Output Mode Confi
             -guration
  72      =1  sfr  IE           =  0xA8;             // Interrupt Enable
  73      =1  sfr  CLKSEL       =  0xA9;             // Clock Select
  74      =1  sfr  EMI0CN       =  0xAA;             // External Memory Interfac
             -e Control
  75      =1  sfr  SBCON1       =  0xAC;             // UART1 Baud Rate Generato
             -r Control
  76      =1  sfr  P4MDOUT      =  0xAE;             // Port 4 Output Mode Confi
             -guration
  77      =1  sfr  PFE0CN       =  0xAF;             // Prefetch Engine Control
  78      =1  sfr  P3           =  0xB0;             // Port 3 Latch
  79      =1  sfr  OSCXCN       =  0xB1;             // External Oscillator Cont
             -rol
  80      =1  sfr  OSCICN       =  0xB2;             // Internal Oscillator Cont
             -rol
  81      =1  sfr  OSCICL       =  0xB3;             // Internal Oscillator Cali
             -bration
  82      =1  sfr  SBRLL1       =  0xB4;             // UART1 Baud Rate Generato
             -r Low
  83      =1  sfr  SBRLH1       =  0xB5;             // UART1 Baud Rate Generato
             -r High
  84      =1  sfr  FLSCL        =  0xB6;             // Flash Scale
  85      =1  sfr  FLKEY        =  0xB7;             // Flash Lock and Key
  86      =1  sfr  IP           =  0xB8;             // Interrupt Priority
  87      =1  sfr  CLKMUL       =  0xB9;             // Clock Multiplier
  88      =1  sfr  AMX0N        =  0xBA;             // AMUX0 Negative Channel S
             -elect
  89      =1  sfr  AMX0P        =  0xBB;             // AMUX0 Positive Channel S
             -elect
  90      =1  sfr  ADC0CF       =  0xBC;             // ADC0 Configuration
  91      =1  sfr  ADC0L        =  0xBD;             // ADC0 Low
  92      =1  sfr  ADC0H        =  0xBE;             // ADC0 High
  93      =1  sfr  SMB0CN       =  0xC0;             // SMBus Control
  94      =1  sfr  SMB0CF       =  0xC1;             // SMBus Configuration
  95      =1  sfr  SMB0DAT      =  0xC2;             // SMBus Data
  96      =1  sfr  ADC0GTL      =  0xC3;             // ADC0 Greater-Than Compar
             -e Low
  97      =1  sfr  ADC0GTH      =  0xC4;             // ADC0 Greater-Than Compar
             -e High
  98      =1  sfr  ADC0LTL      =  0xC5;             // ADC0 Less-Than Compare W
             -ord Low
  99      =1  sfr  ADC0LTH      =  0xC6;             // ADC0 Less-Than Compare W
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 4   

             -ord High
 100      =1  sfr  P4           =  0xC7;             // Port 4 Latch
 101      =1  sfr  TMR2CN       =  0xC8;             // Timer/Counter 2 Control
 102      =1  sfr  REG0CN       =  0xC9;             // Voltage Regulator Contro
             -l
 103      =1  sfr  TMR2RLL      =  0xCA;             // Timer/Counter 2 Reload L
             -ow
 104      =1  sfr  TMR2RLH      =  0xCB;             // Timer/Counter 2 Reload H
             -igh
 105      =1  sfr  TMR2L        =  0xCC;             // Timer/Counter 2 Low
 106      =1  sfr  TMR2H        =  0xCD;             // Timer/Counter 2 High
 107      =1  sfr  PSW          =  0xD0;             // Program Status Word
 108      =1  sfr  REF0CN       =  0xD1;             // Voltage Reference Contro
             -l
 109      =1  sfr  SCON1        =  0xD2;             // UART1 Control
 110      =1  sfr  SBUF1        =  0xD3;             // UART1 Data Buffer
 111      =1  sfr  P0SKIP       =  0xD4;             // Port 0 Skip
 112      =1  sfr  P1SKIP       =  0xD5;             // Port 1 Skip
 113      =1  sfr  P2SKIP       =  0xD6;             // Port 2 Skip
 114      =1  sfr  USB0XCN      =  0xD7;             // USB0 Transceiver Control
 115      =1  sfr  PCA0CN       =  0xD8;             // PCA0 Control
 116      =1  sfr  PCA0MD       =  0xD9;             // PCA0 Mode
 117      =1  sfr  PCA0CPM0     =  0xDA;             // PCA0 Module 0 Mode Regis
             -ter
 118      =1  sfr  PCA0CPM1     =  0xDB;             // PCA0 Module 1 Mode Regis
             -ter
 119      =1  sfr  PCA0CPM2     =  0xDC;             // PCA0 Module 2 Mode Regis
             -ter
 120      =1  sfr  PCA0CPM3     =  0xDD;             // PCA0 Module 3 Mode Regis
             -ter
 121      =1  sfr  PCA0CPM4     =  0xDE;             // PCA0 Module 4 Mode Regis
             -ter
 122      =1  sfr  P3SKIP       =  0xDF;             // Port 3 Skip
 123      =1  sfr  ACC          =  0xE0;             // Accumulator
 124      =1  sfr  XBR0         =  0xE1;             // Port I/O Crossbar Contro
             -l 0
 125      =1  sfr  XBR1         =  0xE2;             // Port I/O Crossbar Contro
             -l 1
 126      =1  sfr  XBR2         =  0xE3;             // Port I/O Crossbar Contro
             -l 2
 127      =1  sfr  IT01CF       =  0xE4;             // INT0/INT1 Configuration
 128      =1  sfr  SMOD1        =  0xE5;             // UART1 Mode
 129      =1  sfr  EIE1         =  0xE6;             // Extended Interrupt Enabl
             -e 1
 130      =1  sfr  EIE2         =  0xE7;             // Extended Interrupt Enabl
             -e 2
 131      =1  sfr  ADC0CN       =  0xE8;             // ADC0 Control
 132      =1  sfr  PCA0CPL1     =  0xE9;             // PCA0 Capture 1 Low
 133      =1  sfr  PCA0CPH1     =  0xEA;             // PCA0 Capture 1 High
 134      =1  sfr  PCA0CPL2     =  0xEB;             // PCA0 Capture 2 Low
 135      =1  sfr  PCA0CPH2     =  0xEC;             // PCA0 Capture 2 High
 136      =1  sfr  PCA0CPL3     =  0xED;             // PCA0 Capture 3 Low
 137      =1  sfr  PCA0CPH3     =  0xEE;             // PCA0 Capture 3 High
 138      =1  sfr  RSTSRC       =  0xEF;             // Reset Source Configurati
             -on/Status
 139      =1  sfr  B            =  0xF0;             // B Register
 140      =1  sfr  P0MDIN       =  0xF1;             // Port 0 Input Mode Config
             -uration
 141      =1  sfr  P1MDIN       =  0xF2;             // Port 1 Input Mode Config
             -uration
 142      =1  sfr  P2MDIN       =  0xF3;             // Port 2 Input Mode Config
             -uration
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 5   

 143      =1  sfr  P3MDIN       =  0xF4;             // Port 3 Input Mode Config
             -uration
 144      =1  sfr  P4MDIN       =  0xF5;             // Port 4 Input Mode Config
             -uration
 145      =1  sfr  EIP1         =  0xF6;             // Extended Interrupt Prior
             -ity 1
 146      =1  sfr  EIP2         =  0xF7;             // Extended Interrupt Prior
             -ity 2
 147      =1  sfr  SPI0CN       =  0xF8;             // SPI0 Control
 148      =1  sfr  PCA0L        =  0xF9;             // PCA0 Counter Low
 149      =1  sfr  PCA0H        =  0xFA;             // PCA0 Counter High
 150      =1  sfr  PCA0CPL0     =  0xFB;             // PCA0 Capture 0 Low
 151      =1  sfr  PCA0CPH0     =  0xFC;             // PCA0 Capture 0 High
 152      =1  sfr  PCA0CPL4     =  0xFD;             // PCA0 Capture 4 Low
 153      =1  sfr  PCA0CPH4     =  0xFE;             // PCA0 Capture 4 High
 154      =1  sfr  VDM0CN       =  0xFF;             // VDD Monitor Control
 155      =1  
 156      =1  
 157      =1  //----------------------------------------------------------------
             --------------
 158      =1  // Bit Definitions
 159      =1  //----------------------------------------------------------------
             --------------
 160      =1  
 161      =1  // TCON 0x88
 162      =1  sbit TF1     = 0x8F;                   // Timer1 overflow flag
 163      =1  sbit TR1     = 0x8E;                   // Timer1 on/off control
 164      =1  sbit TF0     = 0x8D;                   // Timer0 overflow flag
 165      =1  sbit TR0     = 0x8C;                   // Timer0 on/off control
 166      =1  sbit IE1     = 0x8B;                   // Ext interrupt 1 edge fla
             -g
 167      =1  sbit IT1     = 0x8A;                   // Ext interrupt 1 type
 168      =1  sbit IE0     = 0x89;                   // Ext interrupt 0 edge fla
             -g
 169      =1  sbit IT0     = 0x88;                   // Ext interrupt 0 type
 170      =1  
 171      =1  // SCON0 0x98
 172      =1  sbit S0MODE  = 0x9F;                   // Serial mode control bit 
             -0
 173      =1                                         // Bit6 UNUSED
 174      =1  sbit MCE0    = 0x9D;                   // Multiprocessor communica
             -tion enable
 175      =1  sbit REN0    = 0x9C;                   // Receive enable
 176      =1  sbit TB80    = 0x9B;                   // Transmit bit 8
 177      =1  sbit RB80    = 0x9A;                   // Receive bit 8
 178      =1  sbit TI0     = 0x99;                   // Transmit interrupt flag
 179      =1  sbit RI0     = 0x98;                   // Receive interrupt flag
 180      =1  
 181      =1  // IE 0xA8
 182      =1  sbit EA      = 0xAF;                   // Global interrupt enable
 183      =1  sbit ESPI0   = 0xAE;                   // SPI0 interrupt enable
 184      =1  sbit ET2     = 0xAD;                   // Timer2 interrupt enable
 185      =1  sbit ES0     = 0xAC;                   // UART0 interrupt enable
 186      =1  sbit ET1     = 0xAB;                   // Timer1 interrupt enable
 187      =1  sbit EX1     = 0xAA;                   // External interrupt 1 ena
             -ble
 188      =1  sbit ET0     = 0xA9;                   // Timer0 interrupt enable
 189      =1  sbit EX0     = 0xA8;                   // External interrupt 0 ena
             -ble
 190      =1  
 191      =1  // IP 0xB8
 192      =1                                         // Bit7 UNUSED
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 6   

 193      =1  sbit PSPI0   = 0xBE;                   // SPI0 interrupt priority
 194      =1  sbit PT2     = 0xBD;                   // Timer2 priority
 195      =1  sbit PS0     = 0xBC;                   // UART0 priority
 196      =1  sbit PT1     = 0xBB;                   // Timer1 priority
 197      =1  sbit PX1     = 0xBA;                   // External interrupt 1 pri
             -ority
 198      =1  sbit PT0     = 0xB9;                   // Timer0 priority
 199      =1  sbit PX0     = 0xB8;                   // External interrupt 0 pri
             -ority
 200      =1  
 201      =1  // SMB0CN 0xC0
 202      =1  sbit MASTER  = 0xC7;                   // Master/slave indicator
 203      =1  sbit TXMODE  = 0xC6;                   // Transmit mode indicator
 204      =1  sbit STA     = 0xC5;                   // Start flag
 205      =1  sbit STO     = 0xC4;                   // Stop flag
 206      =1  sbit ACKRQ   = 0xC3;                   // Acknowledge request
 207      =1  sbit ARBLOST = 0xC2;                   // Arbitration lost indicat
             -or
 208      =1  sbit ACK     = 0xC1;                   // Acknowledge flag
 209      =1  sbit SI      = 0xC0;                   // SMBus interrupt flag
 210      =1  
 211      =1  // TMR2CN 0xC8
 212      =1  sbit TF2H    = 0xCF;                   // Timer2 high byte overflo
             -w flag
 213      =1  sbit TF2L    = 0xCE;                   // Timer2 low byte overflow
             - flag
 214      =1  sbit TF2LEN  = 0xCD;                   // Timer2 low byte interrup
             -t enable
 215      =1  sbit T2CE    = 0xCC;                   // Timer2 capture enable
 216      =1  sbit T2SPLIT = 0xCB;                   // Timer2 split mode enable
 217      =1  sbit TR2     = 0xCA;                   // Timer2 on/off control
 218      =1  sbit T2CSS   = 0xC9;                   // Timer 2 Capture Source s
             -elect
 219      =1  sbit T2XCLK  = 0xC8;                   // Timer2 external clock se
             -lect
 220      =1  
 221      =1  // PSW 0xD0
 222      =1  sbit CY      = 0xD7;                   // Carry flag
 223      =1  sbit AC      = 0xD6;                   // Auxiliary carry flag
 224      =1  sbit F0      = 0xD5;                   // User flag 0
 225      =1  sbit RS1     = 0xD4;                   // Register bank select 1
 226      =1  sbit RS0     = 0xD3;                   // Register bank select 0
 227      =1  sbit OV      = 0xD2;                   // Overflow flag
 228      =1  sbit F1      = 0xD1;                   // User flag 1
 229      =1  sbit P       = 0xD0;                   // Accumulator parity flag
 230      =1  
 231      =1  // PCA0CN 0xD8
 232      =1  sbit CF      = 0xDF;                   // PCA0 counter overflow fl
             -ag
 233      =1  sbit CR      = 0xDE;                   // PCA0 counter run control
 234      =1                                         // Bit5 UNUSED
 235      =1  sbit CCF4    = 0xDC;                   // PCA0 module4 capture/com
             -pare flag
 236      =1  sbit CCF3    = 0xDB;                   // PCA0 module3 capture/com
             -pare flag
 237      =1  sbit CCF2    = 0xDA;                   // PCA0 module2 capture/com
             -pare flag
 238      =1  sbit CCF1    = 0xD9;                   // PCA0 module1 capture/com
             -pare flag
 239      =1  sbit CCF0    = 0xD8;                   // PCA0 module0 capture/com
             -pare flag
 240      =1  
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 7   

 241      =1  // ADC0CN 0xE8
 242      =1  sbit AD0EN   = 0xEF;                   // ADC0 enable
 243      =1  sbit AD0TM   = 0xEE;                   // ADC0 track mode
 244      =1  sbit AD0INT  = 0xED;                   // ADC0 conversion complete
             - interrupt flag
 245      =1  sbit AD0BUSY = 0xEC;                   // ADC0 busy flag
 246      =1  sbit AD0WINT = 0xEB;                   // ADC0 window compare inte
             -rrupt flag
 247      =1  sbit AD0CM2  = 0xEA;                   // ADC0 conversion mode sel
             -ect 2
 248      =1  sbit AD0CM1  = 0xE9;                   // ADC0 conversion mode sel
             -ect 1
 249      =1  sbit AD0CM0  = 0xE8;                   // ADC0 conversion mode sel
             -ect 0
 250      =1  
 251      =1  // SPI0CN 0xF8
 252      =1  sbit SPIF    = 0xFF;                   // SPI0 interrupt flag
 253      =1  sbit WCOL    = 0xFE;                   // SPI0 write collision fla
             -g
 254      =1  sbit MODF    = 0xFD;                   // SPI0 mode fault flag
 255      =1  sbit RXOVRN  = 0xFC;                   // SPI0 rx overrun flag
 256      =1  sbit NSSMD1  = 0xFB;                   // SPI0 slave select mode 1
 257      =1  sbit NSSMD0  = 0xFA;                   // SPI0 slave select mode 0
 258      =1  sbit TXBMT   = 0xF9;                   // SPI0 transmit buffer emp
             -ty
 259      =1  sbit SPIEN   = 0xF8;                   // SPI0 SPI enable
 260      =1  
 261      =1  
 262      =1  //----------------------------------------------------------------
             --------------
 263      =1  // Interrupt Priorities
 264      =1  //----------------------------------------------------------------
             --------------
 265      =1  
 266      =1  #define INTERRUPT_INT0             0   // External Interrupt 0
 267      =1  #define INTERRUPT_TIMER0           1   // Timer0 Overflow
 268      =1  #define INTERRUPT_INT1             2   // External Interrupt 1
 269      =1  #define INTERRUPT_TIMER1           3   // Timer1 Overflow
 270      =1  #define INTERRUPT_UART0            4   // Serial Port 0
 271      =1  #define INTERRUPT_TIMER2           5   // Timer2 Overflow
 272      =1  #define INTERRUPT_SPI0             6   // Serial Peripheral Interf
             -ace 0
 273      =1  #define INTERRUPT_SMBUS0           7   // SMBus0 Interface
 274      =1  #define INTERRUPT_USB0             8   // USB Interface
 275      =1  #define INTERRUPT_ADC0_WINDOW      9   // ADC0 Window Comparison
 276      =1  #define INTERRUPT_ADC0_EOC         10  // ADC0 End Of Conversion
 277      =1  #define INTERRUPT_PCA0             11  // PCA0 Peripheral
 278      =1  #define INTERRUPT_COMPARATOR0      12  // Comparator0
 279      =1  #define INTERRUPT_COMPARATOR1      13  // Comparator1
 280      =1  #define INTERRUPT_TIMER3           14  // Timer3 Overflow
 281      =1  #define INTERRUPT_VBUS_LEVEL       15  // VBUS level-triggered int
             -errupt
 282      =1  #define INTERRUPT_UART1            16  // Serial Port 1
 283      =1  
 284      =1  //----------------------------------------------------------------
             --------------
 285      =1  // Header File PreProcessor Directive
 286      =1  //----------------------------------------------------------------
             --------------
 287      =1  
 288      =1  #endif                                 // #define C8051F340_H
 289      =1  
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 8   

 290      =1  //----------------------------------------------------------------
             --------------
 291      =1  // End Of File
 292      =1  //----------------------------------------------------------------
             --------------
  39          #include "F34x_MSD_Temp_Sensor.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Temp_Sensor.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_Temp_Sens
             -or.c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000056
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef __TEMP_SENSOR_H__
  32      =1  #define __TEMP_SENSOR_H__
  33      =1  
  34      =1  
  35      =1  //----------------------------------------------------------------
             --------------
  36      =1  // Function Prototypes
  37      =1  //----------------------------------------------------------------
             --------------
  38      =1  
  39      =1  void Init_Temp_Sensor();
  40      =1  void Calibrate(int temp_value);
  41      =1  int GetTemp();
  42      =1  void Temp_Log_Step(void);
  43      =1  void Temp_Log(char* filename);
  44      =1  void Temp_Sensor_Stop_Logging();
  45      =1  #endif
  40          #include "F34x_MSD_File_System.h"
   1      =1  //----------------------------------------------------------------
             --------------
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 9   

   2      =1  // F34x_MSD_File_System.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_File_Syst
             -em..c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000036
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef _FILESYS_H_
  32      =1  #define _FILESYS_H_
  33      =1  
  34      =1  #include "F34x_MSD_USB_Main.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_USB_Main.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Main header file for USB firmware. Includes function prototypes
             -,
  10      =2  // standard constants, and configuration constants.//
  11      =2  //
  12      =2  // FID:            34X000063
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -No changes; incremented revision number to match project re
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 10  

             -vision
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  // 11/22/02 - DM: 1. Updated function prototypes and added constan
             -ts
  27      =2  //                to F34x_USB_Main.h with sample interrupt firmwar
             -e.
  28      =2  
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  // Header File Preprocessor Directive
  31      =2  //----------------------------------------------------------------
             --------------
  32      =2  
  33      =2  #ifndef _USB_MAIN_H_
  34      =2  #define _USB_MAIN_H_
  35      =2  
  36      =2  #include "F34x_MSD_Definitions.h"
   1      =3  //----------------------------------------------------------------
             --------------
   2      =3  // F34x_MSD_Definitions.h
   3      =3  //----------------------------------------------------------------
             --------------
   4      =3  // Copyright 2006 Silicon Laboratories, Inc.
   5      =3  // http://www.silabs.com
   6      =3  //
   7      =3  // Program Description:
   8      =3  //
   9      =3  // Header file with all definitions.
  10      =3  //
  11      =3  //
  12      =3  // FID:            34X000032
  13      =3  // Target:         C8051F34x
  14      =3  // Tool chain:     Keil
  15      =3  // Command Line:   See Readme.txt
  16      =3  // Project Name:   F34x_USB_MSD
  17      =3  //
  18      =3  // Release 1.1
  19      =3  //    -All changes by PKC
  20      =3  //    -09 JUN 2006
  21      =3  //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  22      =3  //
  23      =3  // Release 1.0
  24      =3  //    -Initial Release
  25      =3  //
  26      =3  
  27      =3  //----------------------------------------------------------------
             --------------
  28      =3  // Header File Preprocessor Directive
  29      =3  //----------------------------------------------------------------
             --------------
  30      =3  
  31      =3  #ifndef __DEFINITIONS_H__
  32      =3  #define __DEFINITIONS_H__
  33      =3  
  34      =3  #define DEBUG_TIMEOUTS
  35      =3  #include "c8051f340.h"
   1      =4  //----------------------------------------------------------------
             --------------
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 11  

   2      =4  // C8051F340.h
   3      =4  //----------------------------------------------------------------
             --------------
   4      =4  // Copyright 2005 Silicon Laboratories, Inc.
   5      =4  // http://www.silabs.com
   6      =4  //
   7      =4  // Program Description:
   8      =4  //
   9      =4  // Register/bit definitions for the C8051F34x family.
  10      =4  //
  11      =4  //
  12      =4  // FID:            34X000002
  13      =4  // Target:         C8051F340, 'F341, 'F342, 'F343, 'F344, 'F345, '
             -F346, 'F347
  14      =4  // Tool chain:     Keil
  15      =4  // Command Line:   None
  16      =4  //
  17      =4  // Release 1.0
  18      =4  //    -Initial Release (GP\PKC)
  19      =4  //    -13 DEC 2005
  20      =4  
  21      =4  //----------------------------------------------------------------
             --------------
  22      =4  // Header File Preprocessor Directive
  23      =4  //----------------------------------------------------------------
             --------------
  24      =4  
  25      =4  #ifndef C8051F340_H
           =4 #define C8051F340_H
           =4 
           =4 //----------------------------------------------------------------
             --------------
           =4 // Byte Registers
           =4 //----------------------------------------------------------------
             --------------
           =4 
           =4 sfr  P0           =  0x80;             // Port 0 Latch
           =4 sfr  SP           =  0x81;             // Stack Pointer
           =4 sfr  DPL          =  0x82;             // Data Pointer Low
           =4 sfr  DPH          =  0x83;             // Data Pointer High
           =4 sfr  EMI0TC       =  0x84;             // EMIF Timing
           =4 sfr  EMI0CF       =  0x85;             // EMIF Configuration
           =4 sfr  OSCLCN       =  0x86;             // Internal Low-Freq Oscill
             -ator Control
           =4 sfr  PCON         =  0x87;             // Power Control
           =4 sfr  TCON         =  0x88;             // Timer/Counter Control
           =4 sfr  TMOD         =  0x89;             // Timer/Counter Mode
           =4 sfr  TL0          =  0x8A;             // Timer/Counter 0 Low
           =4 sfr  TL1          =  0x8B;             // Timer/Counter 1 Low
           =4 sfr  TH0          =  0x8C;             // Timer/Counter 0 High
           =4 sfr  TH1          =  0x8D;             // Timer/Counter 1 High
           =4 sfr  CKCON        =  0x8E;             // Clock Control
           =4 sfr  PSCTL        =  0x8F;             // Program Store R/W Contro
             -l
           =4 sfr  P1           =  0x90;             // Port 1 Latch
           =4 sfr  TMR3CN       =  0x91;             // Timer/Counter 3Control
           =4 sfr  TMR3RLL      =  0x92;             // Timer/Counter 3 Reload L
             -ow
           =4 sfr  TMR3RLH      =  0x93;             // Timer/Counter 3 Reload H
             -igh
           =4 sfr  TMR3L        =  0x94;             // Timer/Counter 3Low
           =4 sfr  TMR3H        =  0x95;             // Timer/Counter 3 High
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 12  

           =4 sfr  USB0ADR      =  0x96;             // USB0 Indirect Address Re
             -gister
           =4 sfr  USB0DAT      =  0x97;             // USB0 Data Register
           =4 sfr  SCON0        =  0x98;             // UART0 Control
           =4 sfr  SBUF0        =  0x99;             // UART0 Data Buffer
           =4 sfr  CPT1CN       =  0x9A;             // Comparator1 Control
           =4 sfr  CPT0CN       =  0x9B;             // Comparator0 Control
           =4 sfr  CPT1MD       =  0x9C;             // Comparator1 Mode Selecti
             -on
           =4 sfr  CPT0MD       =  0x9D;             // Comparator0 Mode Selecti
             -on
           =4 sfr  CPT1MX       =  0x9E;             // Comparator1 MUX Selectio
             -n
           =4 sfr  CPT0MX       =  0x9F;             // Comparator0 MUX Selectio
             -n
           =4 sfr  P2           =  0xA0;             // Port 2 Latch
           =4 sfr  SPI0CFG      =  0xA1;             // SPI Configuration
           =4 sfr  SPI0CKR      =  0xA2;             // SPI Clock Rate Control
           =4 sfr  SPI0DAT      =  0xA3;             // SPI Data
           =4 sfr  P0MDOUT      =  0xA4;             // Port 0 Output Mode Confi
             -guration
           =4 sfr  P1MDOUT      =  0xA5;             // Port 1 Output Mode Confi
             -guration
           =4 sfr  P2MDOUT      =  0xA6;             // Port 2 Output Mode Confi
             -guration
           =4 sfr  P3MDOUT      =  0xA7;             // Port 3 Output Mode Confi
             -guration
           =4 sfr  IE           =  0xA8;             // Interrupt Enable
           =4 sfr  CLKSEL       =  0xA9;             // Clock Select
           =4 sfr  EMI0CN       =  0xAA;             // External Memory Interfac
             -e Control
           =4 sfr  SBCON1       =  0xAC;             // UART1 Baud Rate Generato
             -r Control
           =4 sfr  P4MDOUT      =  0xAE;             // Port 4 Output Mode Confi
             -guration
           =4 sfr  PFE0CN       =  0xAF;             // Prefetch Engine Control
           =4 sfr  P3           =  0xB0;             // Port 3 Latch
           =4 sfr  OSCXCN       =  0xB1;             // External Oscillator Cont
             -rol
           =4 sfr  OSCICN       =  0xB2;             // Internal Oscillator Cont
             -rol
           =4 sfr  OSCICL       =  0xB3;             // Internal Oscillator Cali
             -bration
           =4 sfr  SBRLL1       =  0xB4;             // UART1 Baud Rate Generato
             -r Low
           =4 sfr  SBRLH1       =  0xB5;             // UART1 Baud Rate Generato
             -r High
           =4 sfr  FLSCL        =  0xB6;             // Flash Scale
           =4 sfr  FLKEY        =  0xB7;             // Flash Lock and Key
           =4 sfr  IP           =  0xB8;             // Interrupt Priority
           =4 sfr  CLKMUL       =  0xB9;             // Clock Multiplier
           =4 sfr  AMX0N        =  0xBA;             // AMUX0 Negative Channel S
             -elect
           =4 sfr  AMX0P        =  0xBB;             // AMUX0 Positive Channel S
             -elect
           =4 sfr  ADC0CF       =  0xBC;             // ADC0 Configuration
           =4 sfr  ADC0L        =  0xBD;             // ADC0 Low
           =4 sfr  ADC0H        =  0xBE;             // ADC0 High
           =4 sfr  SMB0CN       =  0xC0;             // SMBus Control
           =4 sfr  SMB0CF       =  0xC1;             // SMBus Configuration
           =4 sfr  SMB0DAT      =  0xC2;             // SMBus Data
           =4 sfr  ADC0GTL      =  0xC3;             // ADC0 Greater-Than Compar
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 13  

             -e Low
           =4 sfr  ADC0GTH      =  0xC4;             // ADC0 Greater-Than Compar
             -e High
           =4 sfr  ADC0LTL      =  0xC5;             // ADC0 Less-Than Compare W
             -ord Low
           =4 sfr  ADC0LTH      =  0xC6;             // ADC0 Less-Than Compare W
             -ord High
           =4 sfr  P4           =  0xC7;             // Port 4 Latch
           =4 sfr  TMR2CN       =  0xC8;             // Timer/Counter 2 Control
           =4 sfr  REG0CN       =  0xC9;             // Voltage Regulator Contro
             -l
           =4 sfr  TMR2RLL      =  0xCA;             // Timer/Counter 2 Reload L
             -ow
           =4 sfr  TMR2RLH      =  0xCB;             // Timer/Counter 2 Reload H
             -igh
           =4 sfr  TMR2L        =  0xCC;             // Timer/Counter 2 Low
           =4 sfr  TMR2H        =  0xCD;             // Timer/Counter 2 High
           =4 sfr  PSW          =  0xD0;             // Program Status Word
           =4 sfr  REF0CN       =  0xD1;             // Voltage Reference Contro
             -l
           =4 sfr  SCON1        =  0xD2;             // UART1 Control
           =4 sfr  SBUF1        =  0xD3;             // UART1 Data Buffer
           =4 sfr  P0SKIP       =  0xD4;             // Port 0 Skip
           =4 sfr  P1SKIP       =  0xD5;             // Port 1 Skip
           =4 sfr  P2SKIP       =  0xD6;             // Port 2 Skip
           =4 sfr  USB0XCN      =  0xD7;             // USB0 Transceiver Control
           =4 sfr  PCA0CN       =  0xD8;             // PCA0 Control
           =4 sfr  PCA0MD       =  0xD9;             // PCA0 Mode
           =4 sfr  PCA0CPM0     =  0xDA;             // PCA0 Module 0 Mode Regis
             -ter
           =4 sfr  PCA0CPM1     =  0xDB;             // PCA0 Module 1 Mode Regis
             -ter
           =4 sfr  PCA0CPM2     =  0xDC;             // PCA0 Module 2 Mode Regis
             -ter
           =4 sfr  PCA0CPM3     =  0xDD;             // PCA0 Module 3 Mode Regis
             -ter
           =4 sfr  PCA0CPM4     =  0xDE;             // PCA0 Module 4 Mode Regis
             -ter
           =4 sfr  P3SKIP       =  0xDF;             // Port 3 Skip
           =4 sfr  ACC          =  0xE0;             // Accumulator
           =4 sfr  XBR0         =  0xE1;             // Port I/O Crossbar Contro
             -l 0
           =4 sfr  XBR1         =  0xE2;             // Port I/O Crossbar Contro
             -l 1
           =4 sfr  XBR2         =  0xE3;             // Port I/O Crossbar Contro
             -l 2
           =4 sfr  IT01CF       =  0xE4;             // INT0/INT1 Configuration
           =4 sfr  SMOD1        =  0xE5;             // UART1 Mode
           =4 sfr  EIE1         =  0xE6;             // Extended Interrupt Enabl
             -e 1
           =4 sfr  EIE2         =  0xE7;             // Extended Interrupt Enabl
             -e 2
           =4 sfr  ADC0CN       =  0xE8;             // ADC0 Control
           =4 sfr  PCA0CPL1     =  0xE9;             // PCA0 Capture 1 Low
           =4 sfr  PCA0CPH1     =  0xEA;             // PCA0 Capture 1 High
           =4 sfr  PCA0CPL2     =  0xEB;             // PCA0 Capture 2 Low
           =4 sfr  PCA0CPH2     =  0xEC;             // PCA0 Capture 2 High
           =4 sfr  PCA0CPL3     =  0xED;             // PCA0 Capture 3 Low
           =4 sfr  PCA0CPH3     =  0xEE;             // PCA0 Capture 3 High
           =4 sfr  RSTSRC       =  0xEF;             // Reset Source Configurati
             -on/Status
           =4 sfr  B            =  0xF0;             // B Register
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 14  

           =4 sfr  P0MDIN       =  0xF1;             // Port 0 Input Mode Config
             -uration
           =4 sfr  P1MDIN       =  0xF2;             // Port 1 Input Mode Config
             -uration
           =4 sfr  P2MDIN       =  0xF3;             // Port 2 Input Mode Config
             -uration
           =4 sfr  P3MDIN       =  0xF4;             // Port 3 Input Mode Config
             -uration
           =4 sfr  P4MDIN       =  0xF5;             // Port 4 Input Mode Config
             -uration
           =4 sfr  EIP1         =  0xF6;             // Extended Interrupt Prior
             -ity 1
           =4 sfr  EIP2         =  0xF7;             // Extended Interrupt Prior
             -ity 2
           =4 sfr  SPI0CN       =  0xF8;             // SPI0 Control
           =4 sfr  PCA0L        =  0xF9;             // PCA0 Counter Low
           =4 sfr  PCA0H        =  0xFA;             // PCA0 Counter High
           =4 sfr  PCA0CPL0     =  0xFB;             // PCA0 Capture 0 Low
           =4 sfr  PCA0CPH0     =  0xFC;             // PCA0 Capture 0 High
           =4 sfr  PCA0CPL4     =  0xFD;             // PCA0 Capture 4 Low
           =4 sfr  PCA0CPH4     =  0xFE;             // PCA0 Capture 4 High
           =4 sfr  VDM0CN       =  0xFF;             // VDD Monitor Control
           =4 
           =4 
           =4 //----------------------------------------------------------------
             --------------
           =4 // Bit Definitions
           =4 //----------------------------------------------------------------
             --------------
           =4 
           =4 // TCON 0x88
           =4 sbit TF1     = 0x8F;                   // Timer1 overflow flag
           =4 sbit TR1     = 0x8E;                   // Timer1 on/off control
           =4 sbit TF0     = 0x8D;                   // Timer0 overflow flag
           =4 sbit TR0     = 0x8C;                   // Timer0 on/off control
           =4 sbit IE1     = 0x8B;                   // Ext interrupt 1 edge fla
             -g
           =4 sbit IT1     = 0x8A;                   // Ext interrupt 1 type
           =4 sbit IE0     = 0x89;                   // Ext interrupt 0 edge fla
             -g
           =4 sbit IT0     = 0x88;                   // Ext interrupt 0 type
           =4 
           =4 // SCON0 0x98
           =4 sbit S0MODE  = 0x9F;                   // Serial mode control bit 
             -0
           =4                                        // Bit6 UNUSED
           =4 sbit MCE0    = 0x9D;                   // Multiprocessor communica
             -tion enable
           =4 sbit REN0    = 0x9C;                   // Receive enable
           =4 sbit TB80    = 0x9B;                   // Transmit bit 8
           =4 sbit RB80    = 0x9A;                   // Receive bit 8
           =4 sbit TI0     = 0x99;                   // Transmit interrupt flag
           =4 sbit RI0     = 0x98;                   // Receive interrupt flag
           =4 
           =4 // IE 0xA8
           =4 sbit EA      = 0xAF;                   // Global interrupt enable
           =4 sbit ESPI0   = 0xAE;                   // SPI0 interrupt enable
           =4 sbit ET2     = 0xAD;                   // Timer2 interrupt enable
           =4 sbit ES0     = 0xAC;                   // UART0 interrupt enable
           =4 sbit ET1     = 0xAB;                   // Timer1 interrupt enable
           =4 sbit EX1     = 0xAA;                   // External interrupt 1 ena
             -ble
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 15  

           =4 sbit ET0     = 0xA9;                   // Timer0 interrupt enable
           =4 sbit EX0     = 0xA8;                   // External interrupt 0 ena
             -ble
           =4 
           =4 // IP 0xB8
           =4                                        // Bit7 UNUSED
           =4 sbit PSPI0   = 0xBE;                   // SPI0 interrupt priority
           =4 sbit PT2     = 0xBD;                   // Timer2 priority
           =4 sbit PS0     = 0xBC;                   // UART0 priority
           =4 sbit PT1     = 0xBB;                   // Timer1 priority
           =4 sbit PX1     = 0xBA;                   // External interrupt 1 pri
             -ority
           =4 sbit PT0     = 0xB9;                   // Timer0 priority
           =4 sbit PX0     = 0xB8;                   // External interrupt 0 pri
             -ority
           =4 
           =4 // SMB0CN 0xC0
           =4 sbit MASTER  = 0xC7;                   // Master/slave indicator
           =4 sbit TXMODE  = 0xC6;                   // Transmit mode indicator
           =4 sbit STA     = 0xC5;                   // Start flag
           =4 sbit STO     = 0xC4;                   // Stop flag
           =4 sbit ACKRQ   = 0xC3;                   // Acknowledge request
           =4 sbit ARBLOST = 0xC2;                   // Arbitration lost indicat
             -or
           =4 sbit ACK     = 0xC1;                   // Acknowledge flag
           =4 sbit SI      = 0xC0;                   // SMBus interrupt flag
           =4 
           =4 // TMR2CN 0xC8
           =4 sbit TF2H    = 0xCF;                   // Timer2 high byte overflo
             -w flag
           =4 sbit TF2L    = 0xCE;                   // Timer2 low byte overflow
             - flag
           =4 sbit TF2LEN  = 0xCD;                   // Timer2 low byte interrup
             -t enable
           =4 sbit T2CE    = 0xCC;                   // Timer2 capture enable
           =4 sbit T2SPLIT = 0xCB;                   // Timer2 split mode enable
           =4 sbit TR2     = 0xCA;                   // Timer2 on/off control
           =4 sbit T2CSS   = 0xC9;                   // Timer 2 Capture Source s
             -elect
           =4 sbit T2XCLK  = 0xC8;                   // Timer2 external clock se
             -lect
           =4 
           =4 // PSW 0xD0
           =4 sbit CY      = 0xD7;                   // Carry flag
           =4 sbit AC      = 0xD6;                   // Auxiliary carry flag
           =4 sbit F0      = 0xD5;                   // User flag 0
           =4 sbit RS1     = 0xD4;                   // Register bank select 1
           =4 sbit RS0     = 0xD3;                   // Register bank select 0
           =4 sbit OV      = 0xD2;                   // Overflow flag
           =4 sbit F1      = 0xD1;                   // User flag 1
           =4 sbit P       = 0xD0;                   // Accumulator parity flag
           =4 
           =4 // PCA0CN 0xD8
           =4 sbit CF      = 0xDF;                   // PCA0 counter overflow fl
             -ag
           =4 sbit CR      = 0xDE;                   // PCA0 counter run control
           =4                                        // Bit5 UNUSED
           =4 sbit CCF4    = 0xDC;                   // PCA0 module4 capture/com
             -pare flag
           =4 sbit CCF3    = 0xDB;                   // PCA0 module3 capture/com
             -pare flag
           =4 sbit CCF2    = 0xDA;                   // PCA0 module2 capture/com
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 16  

             -pare flag
           =4 sbit CCF1    = 0xD9;                   // PCA0 module1 capture/com
             -pare flag
           =4 sbit CCF0    = 0xD8;                   // PCA0 module0 capture/com
             -pare flag
           =4 
           =4 // ADC0CN 0xE8
           =4 sbit AD0EN   = 0xEF;                   // ADC0 enable
           =4 sbit AD0TM   = 0xEE;                   // ADC0 track mode
           =4 sbit AD0INT  = 0xED;                   // ADC0 conversion complete
             - interrupt flag
           =4 sbit AD0BUSY = 0xEC;                   // ADC0 busy flag
           =4 sbit AD0WINT = 0xEB;                   // ADC0 window compare inte
             -rrupt flag
           =4 sbit AD0CM2  = 0xEA;                   // ADC0 conversion mode sel
             -ect 2
           =4 sbit AD0CM1  = 0xE9;                   // ADC0 conversion mode sel
             -ect 1
           =4 sbit AD0CM0  = 0xE8;                   // ADC0 conversion mode sel
             -ect 0
           =4 
           =4 // SPI0CN 0xF8
           =4 sbit SPIF    = 0xFF;                   // SPI0 interrupt flag
           =4 sbit WCOL    = 0xFE;                   // SPI0 write collision fla
             -g
           =4 sbit MODF    = 0xFD;                   // SPI0 mode fault flag
           =4 sbit RXOVRN  = 0xFC;                   // SPI0 rx overrun flag
           =4 sbit NSSMD1  = 0xFB;                   // SPI0 slave select mode 1
           =4 sbit NSSMD0  = 0xFA;                   // SPI0 slave select mode 0
           =4 sbit TXBMT   = 0xF9;                   // SPI0 transmit buffer emp
             -ty
           =4 sbit SPIEN   = 0xF8;                   // SPI0 SPI enable
           =4 
           =4 
           =4 //----------------------------------------------------------------
             --------------
           =4 // Interrupt Priorities
           =4 //----------------------------------------------------------------
             --------------
           =4 
           =4 #define INTERRUPT_INT0             0   // External Interrupt 0
           =4 #define INTERRUPT_TIMER0           1   // Timer0 Overflow
           =4 #define INTERRUPT_INT1             2   // External Interrupt 1
           =4 #define INTERRUPT_TIMER1           3   // Timer1 Overflow
           =4 #define INTERRUPT_UART0            4   // Serial Port 0
           =4 #define INTERRUPT_TIMER2           5   // Timer2 Overflow
           =4 #define INTERRUPT_SPI0             6   // Serial Peripheral Interf
             -ace 0
           =4 #define INTERRUPT_SMBUS0           7   // SMBus0 Interface
           =4 #define INTERRUPT_USB0             8   // USB Interface
           =4 #define INTERRUPT_ADC0_WINDOW      9   // ADC0 Window Comparison
           =4 #define INTERRUPT_ADC0_EOC         10  // ADC0 End Of Conversion
           =4 #define INTERRUPT_PCA0             11  // PCA0 Peripheral
           =4 #define INTERRUPT_COMPARATOR0      12  // Comparator0
           =4 #define INTERRUPT_COMPARATOR1      13  // Comparator1
           =4 #define INTERRUPT_TIMER3           14  // Timer3 Overflow
           =4 #define INTERRUPT_VBUS_LEVEL       15  // VBUS level-triggered int
             -errupt
           =4 #define INTERRUPT_UART1            16  // Serial Port 1
           =4 
           =4 //----------------------------------------------------------------
             --------------
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 17  

           =4 // Header File PreProcessor Directive
           =4 //----------------------------------------------------------------
             --------------
           =4 
           =4 #endif                                 // #define C8051F340_H
 289      =4  
 290      =4  //----------------------------------------------------------------
             --------------
 291      =4  // End Of File
 292      =4  //----------------------------------------------------------------
             --------------
  36      =3  #ifdef DEBUG_TIMEOUTS
  37      =3  sbit START_STOP_SPI = P3^0 ;
  38      =3  sbit START_STOP_READ_TO = P3^1;
  39      =3  sbit START_STOP_WRITE_TO = P3^2;
  40      =3  
  41      =3  #define START_SPI_TIMEOUT (START_STOP_SPI = 1)
  42      =3  #define STOP_SPI_TIME_OUT (START_STOP_SPI = 0)
  43      =3  #define START_READ_COPY (START_STOP_READ_TO = 1)
  44      =3  #define STOP_READ_COPY (START_STOP_READ_TO = 0)
  45      =3  #define START_WRITE_COPY (START_STOP_WRITE_TO = 1)
  46      =3  #define STOP_WRITE_COPY (START_STOP_WRITE_TO = 0)
  47      =3  #else
           =3 
           =3 #define START_SPI_TIMEOUT /\
           =3 /
           =3 #define STOP_SPI_TIME_OUT /\
           =3 /
           =3 #define START_READ_COPY /\
           =3 /
           =3 #define STOP_READ_COPY /\
           =3 /
           =3 #define START_WRITE_COPY /\
           =3 /
           =3 #define STOP_WRITE_COPY /\
           =3 /
           =3 
           =3 #endif
  63      =3  
  64      =3  #define ENDLINE         "\r\n"
  65      =3  #define ENDLINE_SGN '\r'
  66      =3  
  67      =3  #endif
  37      =2  //#define _USB_LOW_SPEED_                      // Change this comm
             -ent to make Full/Low speed
  38      =2  
  39      =2  #define SYSCLK                   12000000    // SYSCLK frequency i
             -n Hz
  40      =2  
  41      =2  // USB clock selections (SFR CLKSEL)
  42      =2  #define USB_4X_CLOCK             0x00        // Select 4x clock mu
             -ltiplier, for USB Full Speed
  43      =2  #define USB_INT_OSC_DIV_2        0x10        // See Data Sheet sec
             -tion 13. Oscillators
  44      =2  #define USB_EXT_OSC              0x20
  45      =2  #define USB_EXT_OSC_DIV_2        0x30
  46      =2  #define USB_EXT_OSC_DIV_3        0x40
  47      =2  #define USB_EXT_OSC_DIV_4        0x50
  48      =2  
  49      =2  // System clock selections (SFR CLKSEL)
  50      =2  #define SYS_INT_OSC              0x00        // Select to use inte
             -rnal oscillator
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 18  

  51      =2  #define SYS_4X_MUL               0x03        // Select to use inte
             -rnal oscillator
  52      =2  #define SYS_EXT_OSC              0x01        // Select to use an e
             -xternal oscillator
  53      =2  #define SYS_4X_DIV_2             0x02
  54      =2  
  55      =2  // BYTE type definition
  56      =2  #ifndef _BYTE_DEF_
  57      =2  #define _BYTE_DEF_
  58      =2  typedef unsigned char BYTE;
  59      =2  #endif   /* _BYTE_DEF_ */
  60      =2  
  61      =2  // WORD type definition, for KEIL Compiler
  62      =2  #ifndef _WORD_DEF_                           // Compiler Specific,
             - written for Little Endian
  63      =2  #define _WORD_DEF_
  64      =2  typedef union {unsigned int i; unsigned char c[2];} WORD;
  65      =2  #define LSB 1                                // All words sent to 
             -and received from the host are
  66      =2  #define MSB 0                                // little endian, thi
             -s is switched by software when
  67      =2                                               // neccessary.  These
             - sections of code have been marked
  68      =2                                                                                           // with "Compiler Specific" as above for easier modifi
             -cation
  69      =2  #endif   /* _WORD_DEF_ */
  70      =2  
  71      =2  // DWORD type definition
  72      =2  #ifndef _DWORD_DEF_
  73      =2  #define _DWORD_DEF_
  74      =2  typedef unsigned long DWORD;
  75      =2  #endif /* _DWORD_DEF_ */
  76      =2  
  77      =2  extern volatile DWORD xdata tickcount;
  78      =2  
  79      =2  // Define Endpoint Packet Sizes
  80      =2  #ifdef _USB_LOW_SPEED_
           =2 #define  EP0_PACKET_SIZE         0x40        // This value can be 
             -8,16,32,64 depending on device speed, see USB spec
           =2 #else
  83      =2  #define  EP0_PACKET_SIZE         0x40
  84      =2  #endif /* _USB_LOW_SPEED_ */ 
  85      =2  
  86      =2  #define  EP1_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type  
  87      =2  #define  EP1_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP1_PACKET_SIZE
  88      =2  #define  EP2_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type
  89      =2  #define  EP2_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP2_PACKET_SIZE
  90      =2  
  91      =2  // Standard Descriptor Types
  92      =2  #define  DSC_DEVICE              0x01        // Device Descriptor
  93      =2  #define  DSC_CONFIG              0x02        // Configuration Desc
             -riptor
  94      =2  #define  DSC_STRING              0x03        // String Descriptor
  95      =2  #define  DSC_INTERFACE           0x04        // Interface Descript
             -or
  96      =2  #define  DSC_ENDPOINT            0x05        // Endpoint Descripto
             -r
  97      =2  
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 19  

  98      =2  // HID Descriptor Types
  99      =2  #define DSC_HID                                 0x21            // HID Class Descriptor
 100      =2  #define DSC_HID_REPORT                  0x22            // HID Report Descriptor
 101      =2  
 102      =2  // Standard Request Codes
 103      =2  #define  GET_STATUS             0x00        // Code for Get Status
 104      =2  #define  CLEAR_FEATURE          0x01        // Code for Clear Feat
             -ure
 105      =2  #define  SET_FEATURE            0x03        // Code for Set Featur
             -e
 106      =2  #define  SET_ADDRESS            0x05        // Code for Set Addres
             -s
 107      =2  #define  GET_DESCRIPTOR         0x06        // Code for Get Descri
             -ptor
 108      =2  #define  SET_DESCRIPTOR         0x07        // Code for Set Descri
             -ptor(not used)
 109      =2  #define  GET_CONFIGURATION      0x08        // Code for Get Config
             -uration
 110      =2  #define  SET_CONFIGURATION      0x09        // Code for Set Config
             -uration
 111      =2  #define  GET_INTERFACE          0x0A        // Code for Get Interf
             -ace
 112      =2  #define  SET_INTERFACE          0x0B        // Code for Set Interf
             -ace
 113      =2  #define  SYNCH_FRAME            0x0C        // Code for Synch Fram
             -e(not used)
 114      =2  #define  MSD_RESET                              0xFF            // Mass-storage device Reset
 115      =2  #define  MSD_GET_MAX_LUN                0xFE            // Mass-storage device Get Max LU
             -N
 116      =2  
 117      =2  // HID Request Codes
 118      =2  #define GET_REPORT                              0x01            // Code for Get Report
 119      =2  #define GET_IDLE                                0x02            // Code for Get Idle
 120      =2  #define GET_PROTOCOL                    0x03            // Code for Get Protocol
 121      =2  #define SET_REPORT                              0x09            // Code for Set Report
 122      =2  #define SET_IDLE                                0x0A            // Code for Set Idle
 123      =2  #define SET_PROTOCOL                    0x0B            // Code for Set Protocol
 124      =2  
 125      =2  // Define device states
 126      =2  #define  DEV_ATTACHED            0x00        // Device is in Attac
             -hed State
 127      =2  #define  DEV_POWERED             0x01        // Device is in Power
             -ed State
 128      =2  #define  DEV_DEFAULT             0x02        // Device is in Defau
             -lt State
 129      =2  #define  DEV_ADDRESS             0x03        // Device is in Addre
             -ssed State
 130      =2  #define  DEV_CONFIGURED          0x04        // Device is in Confi
             -gured State
 131      =2  #define  DEV_SUSPENDED           0x05        // Device is in Suspe
             -nded State
 132      =2  
 133      =2  // Define bmRequestType bitmaps
 134      =2  #define  IN_DEVICE               0x00        // Request made to de
             -vice, direction is IN 
 135      =2  #define  OUT_DEVICE              0x80        // Request made to de
             -vice, direction is OUT
 136      =2  #define  IN_INTERFACE            0x01        // Request made to in
             -terface, direction is IN
 137      =2  #define  OUT_INTERFACE           0x81        // Request made to in
             -terface, direction is OUT
 138      =2  #define  IN_ENDPOINT             0x02        // Request made to en
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 20  

             -dpoint, direction is IN
 139      =2  #define  OUT_ENDPOINT            0x82        // Request made to en
             -dpoint, direction is OUT
 140      =2  
 141      =2  // Define wIndex bitmaps
 142      =2  #define  IN_EP1                  0x81        // Index values used 
             -by Set and Clear feature
 143      =2  #define  OUT_EP1                 0x01        // commands for Endpo
             -int_Halt
 144      =2  #define  IN_EP2                  0x82
 145      =2  #ifdef __F326_VER__
           =2 #define  OUT_EP2                                 0x01           
           =2 #else
 148      =2  #define  OUT_EP2                                 0x01           
 149      =2  #endif
 150      =2  
 151      =2  // Define wValue bitmaps for Standard Feature Selectors
 152      =2  #define  DEVICE_REMOTE_WAKEUP    0x01        // Remote wakeup feat
             -ure(not used)
 153      =2  #define  ENDPOINT_HALT           0x00        // Endpoint_Halt feat
             -ure selector
 154      =2  
 155      =2  // Define Endpoint States
 156      =2  #define  EP_IDLE                 0x00        // This signifies End
             -point Idle State
 157      =2  #define  EP_TX                   0x01        // Endpoint Transmit 
             -State
 158      =2  #define  EP_RX                   0x02        // Endpoint Receive S
             -tate
 159      =2  #define  EP_HALT                 0x03        // Endpoint Halt Stat
             -e (return stalls)
 160      =2  #define  EP_STALL                0x04        // Endpoint Stall (se
             -nd procedural stall next status phase)
 161      =2  #define  EP_ADDRESS              0x05        // Endpoint Address (
             -change FADDR during next status phase)
 162      =2  
 163      =2  // Function prototypes
 164      =2  // USB Routines
 165      =2  void USB_Resume(void);                       // This routine resum
             -es USB operation
 166      =2  void USB_Reset(void);                        // Called after USB b
             -us reset
 167      =2  void Handle_Setup(void);                     // Handle setup packe
             -t on Endpoint 0
 168      =2  void Handle_In1(BYTE* ptr_buf);                       // Handle in
             - packet on Endpoint 1
 169      =2  void Handle_Out2(void);                      // Handle out packet 
             -on Endpoint 2
 170      =2  void USB_Suspend(void);                      // This routine calle
             -d when suspend signalling on bus
 171      =2  void Out2_Get_Data(BYTE* ptr_buf);                               // Copies from FIFO to ptr_
             -buf, clears FIFO-full flag.
 172      =2  void Out2_Done(void);                                            // Call this when finished with the d
             -ata
 173      =2  
 174      =2  // Standard Requests
 175      =2  void Get_Status(void);                       // These are called f
             -or each specific standard request
 176      =2  void Clear_Feature(void);
 177      =2  void Set_Feature(void);
 178      =2  void Set_Address(void);
 179      =2  void Get_Descriptor(void);
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 21  

 180      =2  void Get_Configuration(void);
 181      =2  void Set_Configuration(void);
 182      =2  void Get_Interface(void);
 183      =2  void Set_Interface(void);
 184      =2  
 185      =2  // MSD Specific Requests
 186      =2  // void Reset_Msd(void);
 187      =2  // void Get_MaxLUN(void);
 188      =2  
 189      =2  // Initialization Routines
 190      =2  void Sys_Clk_Init(void);                      // Initialize the sy
             -stem clock(depends on Full/Low speed)
 191      =2  void Port_Init(void);                        // Configure ports fo
             -r this specific application
 192      =2  void USB0_Init(void);                        // Configure USB core
             - for either Full/Low speed
 193      =2  void Timer_Init(void);                       // Start timer 2 for 
             -use by ADC and to check switches
 194      =2  void Adc_Init(void);                         // Configure ADC for 
             -continuous conversion, low-power mode
 195      =2  
 196      =2  // Other Routines
 197      =2  void Timer2_ISR(void);                       // Called when Timer 
             -2 overflows, see if switches are pressed
 198      =2  void Adc_ConvComple_ISR(void);               // When a conversion 
             -completes, switch ADC multiplexor
 199      =2  void USB_ISR(void);                          // Called to determin
             -e type of USB interrupt
 200      =2  void Fifo_ReadC(BYTE, unsigned int, BYTE *) ;
 201      =2  extern void Fifo_Read (BYTE, unsigned int, BYTE *) ; // Used for m
             -ultiple byte reads of Endpoint fifos
 202      =2  extern void Fifo_Write (BYTE, unsigned int, BYTE *) reentrant;// U
             -sed for multiple byte writes of Endpoint fifos
 203      =2  void Force_Stall(void);                      // Forces a procedura
             -l stall on Endpoint 0
 204      =2  void Delay(void);                            // Approximately 80 u
             -s/1 ms on Full/Low Speed
 205      =2  
 206      =2  void USB_In(BYTE* ptr_buf,unsigned count);
 207      =2  
 208      =2  void USB_Bulk_Init(void);
 209      =2  
 210      =2  extern unsigned xdata Out_Count;
 211      =2  extern BYTE xdata Out_Packet[EP2_PACKET_SIZE];
 212      =2  extern BYTE xdata In_count;
 213      =2  extern BYTE xdata In_Packet[EP1_PACKET_SIZE];
 214      =2  //extern BYTE xdata In_Overrun;
 215      =2  
 216      =2  #endif      /* _USB_MAIN_H_ */
 217      =2  
  35      =1  
  36      =1  //----------------------------------------------------------------
             --------------
  37      =1  // Structure Prototypes
  38      =1  //----------------------------------------------------------------
             --------------
  39      =1  
  40      =1  typedef struct {
  41      =1          unsigned cluster_start;
  42      =1          unsigned long sector_current;
  43      =1          unsigned sector_direntry;
  44      =1          unsigned offset_direntry;
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 22  

  45      =1          BYTE attrib;
  46      =1          DWORD pos;
  47      =1          DWORD size;
  48      =1          BYTE isopen;
  49      =1  } FILE;
  50      =1  
  51      =1  typedef WORD UNI; // Unicode character type
  52      =1  
  53      =1  typedef union {
  54      =1  
  55      =1  struct {
  56      =1          BYTE seq_nr; // Bit 0..4 = seqnr, ascending, start with 1. Bit 6:
             - final part of name
  57      =1          UNI unicode1_5[5]; // Little endian
  58      =1          BYTE attrib; // 0x0F
  59      =1          BYTE type; // 0x00
  60      =1          BYTE checksum; // int i;BYTE sum=0;for(i=0;i<11;i++) { sum=(sum>>
             -1)+((sum&1)<<7);sum+=name[i]; }
  61      =1          UNI unicode6_11[6];
  62      =1          unsigned starting_cluster; // 0x0000
  63      =1          UNI unicode12_13[2];
  64      =1  } lfn;
  65      =1  
  66      =1  struct {
  67      =1          char name[11];
  68      =1          BYTE attrib;
  69      =1          BYTE reserved[10];
  70      =1          WORD time; // 5/6/5 bits for h/m/2*sec
  71      =1          WORD date; // 7/4/5 bits for y-1980/m/d
  72      =1          unsigned starting_cluster; // 0 for empty file
  73      =1          DWORD filesize;
  74      =1  } sfn;
  75      =1  
  76      =1  } dir_entry;
  77      =1  
  78      =1  typedef struct {
  79      =1          unsigned long block;
  80      =1          unsigned offset;
  81      =1          BYTE findempty;
  82      =1          dir_entry* direntry;
  83      =1  } find_info;
  84      =1  
  85      =1  
  86      =1  
  87      =1  #define ATTRIB_READ_ONLY        0x01
  88      =1  #define ATTRIB_HIDDEN           0x02
  89      =1  #define ATTRIB_SYSTEM           0x04
  90      =1  #define ATTRIB_LABEL            0x08
  91      =1  #define ATTRIB_SUBDIR           0x10
  92      =1  #define ATTRIB_ARCHIVE          0x20
  93      =1  
  94      =1  #define SEEK_CUR 0
  95      =1  #define SEEK_END 1
  96      =1  #define SEEK_SET 2
  97      =1  
  98      =1  //----------------------------------------------------------------
             --------------
  99      =1  // Function Prototypes
 100      =1  //----------------------------------------------------------------
             --------------
 101      =1  
 102      =1  int fopen(FILE* f,char* filename,char* mode);
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 23  

 103      =1  int fseek(FILE* f,long offset,int origin);
 104      =1  DWORD ftell(FILE* f);
 105      =1  int feof(FILE* f);
 106      =1  unsigned fread(FILE* f,BYTE* buffer,unsigned count);
 107      =1  unsigned fwrite(FILE* f,BYTE* buffer,unsigned count);
 108      =1  void fclose(FILE* f);
 109      =1  int fexists(char* filename);
 110      =1  int fdelete(char* filename);
 111      =1  BYTE findfirst(find_info* findinfo,BYTE empty);
 112      =1  BYTE findnext(find_info* findinfo);
 113      =1  
 114      =1  
 115      =1  //----------------------------------------------------------------
             ----------------
 116      =1  // Functions only for F340 device
 117      =1  //----------------------------------------------------------------
             ----------------
 118      =1  
 119      =1  #ifdef __F340_VER__
 120      =1  
 121      =1  #define DIRECTORY_EXISTS                1
 122      =1  #define NO_PLACE_FOR_DIRECTORY  2
 123      =1  #define DIRNAME_LENGTH_ERROR    3
 124      =1  
 125      =1  //----------------------------------------------------------------
             --------------
 126      =1  // Function Prototypes
 127      =1  //----------------------------------------------------------------
             --------------
 128      =1  
 129      =1  void FileSys_Init();
 130      =1  BYTE chngdir(char* dirname);
 131      =1  BYTE mkdir(char* dir_name);
 132      =1  BYTE rmdir(char* dir_name) ;
 133      =1  void write_current_dir();
 134      =1  
 135      =1  //----------------------------------------------------------------
             --------------
 136      =1  // Structure Prototypes
 137      =1  //----------------------------------------------------------------
             --------------
 138      =1  
 139      =1  typedef struct 
 140      =1  { 
 141      =1          unsigned long block;
 142      =1          unsigned offset;
 143      =1  }
 144      =1  PREV_SEARCH;
 145      =1  
 146      =1  
 147      =1  #endif
 148      =1  #endif
  41          #include <stdio.h>
   1      =1  /*----------------------------------------------------------------
             -----------
   2      =1  STDIO.H
   3      =1  
   4      =1  Prototypes for standard I/O functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, In
             -c.
   6      =1  All rights reserved.
   7      =1  ------------------------------------------------------------------
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 24  

             ---------*/
   8      =1  
   9      =1  #ifndef __STDIO_H__
  10      =1  #define __STDIO_H__
  11      =1  
  12      =1  #ifndef EOF
  13      =1   #define EOF -1
  14      =1  #endif
  15      =1  
  16      =1  #ifndef NULL
  17      =1   #define NULL ((void *) 0)
  18      =1  #endif
  19      =1  
  20      =1  #ifndef _SIZE_T
  21      =1   #define _SIZE_T
  22      =1   typedef unsigned int size_t;
  23      =1  #endif
  24      =1  
  25      =1  #pragma SAVE
  26      =1  #pragma REGPARMS
  27      =1  extern char _getkey (void);
  28      =1  extern char getchar (void);
  29      =1  extern char ungetchar (char);
  30      =1  extern char putchar (char);
  31      =1  extern int printf   (const char *, ...);
  32      =1  extern int sprintf  (char *, const char *, ...);
  33      =1  extern int vprintf  (const char *, char *);
  34      =1  extern int vsprintf (char *, const char *, char *);
  35      =1  extern char *gets (char *, int n);
  36      =1  extern int scanf (const char *, ...);
  37      =1  extern int sscanf (char *, const char *, ...);
  38      =1  extern int puts (const char *);
  39      =1  
  40      =1  #pragma RESTORE
  41      =1  
  42      =1  #endif
  43      =1  
  42          
  43          static FILE xdata Log_File;
  44          
  45          static xdata int Adc_Offset = 0;
  46          static unsigned int Get_Temp_Value();
  47          static xdata char Logging = 0;
  48          
  49          //----------------------------------------------------------------
             -------------
  50          // Init_Temp_Sensor
  51          //----------------------------------------------------------------
             -------------
  52          //
  53          // Function inits temperature sensor
  54          //
  55          // Parameters   :
  56          // Return Value :
  57          //----------------------------------------------------------------
             -------------
  58          
  59          void Init_Temp_Sensor()
  60          {
  61   1        AMX0P = 0x1E;
  62   1        AMX0N = 0x1F;
  63   1        ADC0CN = 0x80;
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 25  

  64   1        REF0CN = 0x0c;
  65   1        Adc_Offset = 0;
  66   1      }
  67          
  68          //----------------------------------------------------------------
             -------------
  69          // Calibrate
  70          //----------------------------------------------------------------
             -------------
  71          //
  72          // Function calibratea temperature sensor
  73          //
  74          // Parameters   : temp_value - ambient temperature in celcius [C] 
             -decimal 
  75          //                           values second byte means digits after
             - colon
  76          // Return Value :
  77          //----------------------------------------------------------------
             -------------
  78          
  79          void Calibrate(int temp_value)
  80          {
  81   1        unsigned int xdata tmpv = Get_Temp_Value();
  82   1        tmpv = (((tmpv * 322L) - 79700)/ 286) ;
  83   1        Adc_Offset = tmpv - temp_value;
  84   1      }
  85          
  86          //----------------------------------------------------------------
             -------------
  87          // Get_Temp_Value
  88          //----------------------------------------------------------------
             -------------
  89          //
  90          // Function returns value from AD converter. This value represents
             - the 
  91          // temperature.
  92          //
  93          // Parameters   :
  94          // Return Value : result from AD converter
  95          //----------------------------------------------------------------
             -------------
  96          
  97          unsigned int Get_Temp_Value()
  98          {
  99   1        unsigned int xdata retV = 0;
 100   1        AD0BUSY = 1;
 101   1        while(!AD0INT);
 102   1        retV = (ADC0H << 8) | (ADC0L);
 103   1        AD0INT = 0;
 104   1        return retV;
 105   1      }
 106          
 107          //----------------------------------------------------------------
             -------------
 108          // Get_Temp
 109          //----------------------------------------------------------------
             -------------
 110          //
 111          // Function returns temperature returned by temperature sensor
 112          //
 113          // Parameters   :
 114          // Return Value : ambient temperature in celcius [C] decimal value
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 26  

             -s second 
 115          //                byte means digits after colon
 116          //----------------------------------------------------------------
             -------------
 117          
 118          int Get_Temp()
 119          {
 120   1        int xdata ret = Get_Temp_Value();
 121   1        ret = (((ret * 322L) - 79700)/ 286) ;
 122   1        ret -= Adc_Offset;
 123   1        return ret;
 124   1      }
 125          
 126          //----------------------------------------------------------------
             -------------
 127          // Temp_Sensor_Stop_Logging
 128          //----------------------------------------------------------------
             -------------
 129          //
 130          // This function close temperature Log File
 131          //
 132          // Parameters   :
 133          // Return Value :
 134          //----------------------------------------------------------------
             -------------
 135          
 136          void Temp_Sensor_Stop_Logging()
 137          {
 138   1              if(Logging) {
 139   2                      printf("Logging temperature done."ENDLINE);
 140   2              fclose(&Log_File);
 141   2              Logging=0;
 142   2              }
 143   1      }
 144          
 145          //----------------------------------------------------------------
             -------------
 146          // Temp_Log
 147          //----------------------------------------------------------------
             -------------
 148          //
 149          // Function creates temperature Log File
 150          //
 151          // Parameters   : filename - name of Log file
 152          // Return Value :
 153          //----------------------------------------------------------------
             -------------
 154          
 155          void Temp_Log(char* filename)
 156          {
 157   1        if(Logging) {
 158   2              Temp_Sensor_Stop_Logging();
 159   2        } else {
 160   2          //"file without name" fix (masw):
 161   2          if (filename == 0 ) {
 162   3            printf("No file name."ENDLINE);
 163   3            return;
 164   3          }
 165   2          //===============================
 166   2          if(fopen(&Log_File,filename,"a")) { // Append mode
 167   3            printf("Logging temperature. Type 'templog' again to stop."E
             -NDLINE);
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 27  

 168   3            Logging=1;
 169   3            tickcount=0;
 170   3          } else {
 171   3            printf("Cannot write."ENDLINE);
 172   3          }
 173   2        }
 174   1      }
 175          
 176          //----------------------------------------------------------------
             -------------
 177          // Temp_Log_Step
 178          //----------------------------------------------------------------
             -------------
 179          //
 180          // Function writes another line to Log File
 181          //
 182          // Parameters   :
 183          // Return Value :
 184          //----------------------------------------------------------------
             -------------
 185          
 186          void Temp_Log_Step(void) {
 187   1        xdata char buf[18];
 188   1        int xdata retV ;
 189   1        if(Logging) {
 190   2          if(tickcount >=1000) {
 191   3                        retV = Get_Temp();
 192   3                        sprintf(buf,"%02d.%02d after 1sec" /*ENDLINE*/ "\r\n",(retV - 
             -(retV/100)*100),(retV / 100 ));
 193   3                        tickcount=0;
 194   3                        fwrite(&Log_File,buf,18);
 195   3                }
 196   2        }
 197   1      }
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 28  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0013 (BEGIN)
0000         L?0020:
0000 7B42              MOV     R3,#042H
0002 7A01              MOV     R2,#01H
0004 F9                MOV     R1,A
0005 F8                MOV     R0,A
0006 120000      E     LCALL   ?C?LMUL
0009 EF                MOV     A,R7
000A 24AC              ADD     A,#0ACH
000C FF                MOV     R7,A
000D EE                MOV     A,R6
000E 34C8              ADDC    A,#0C8H
0010 FE                MOV     R6,A
0011 ED                MOV     A,R5
0012 34FE              ADDC    A,#0FEH
0014 FD                MOV     R5,A
0015 EC                MOV     A,R4
0016 34FF              ADDC    A,#0FFH
0018 FC                MOV     R4,A
0019 E4                CLR     A
001A 7B1E              MOV     R3,#01EH
001C 7A01              MOV     R2,#01H
001E F9                MOV     R1,A
001F F8                MOV     R0,A
0020 22                RET     
0021         L?0021:
0021 E0                MOVX    A,@DPTR
0022 FC                MOV     R4,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FD                MOV     R5,A
0026 C3                CLR     C
0027 EF                MOV     A,R7
0028 9D                SUBB    A,R5
0029 FF                MOV     R7,A
002A EE                MOV     A,R6
002B 9C                SUBB    A,R4
002C 22                RET     
             ; FUNCTION Com0013 (END)

             ; FUNCTION Init_Temp_Sensor (BEGIN)
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
                                           ; SOURCE LINE # 61
0000 75BB1E            MOV     AMX0P,#01EH
                                           ; SOURCE LINE # 62
0003 75BA1F            MOV     AMX0N,#01FH
                                           ; SOURCE LINE # 63
0006 75E880            MOV     ADC0CN,#080H
                                           ; SOURCE LINE # 64
0009 75D10C            MOV     REF0CN,#0CH
                                           ; SOURCE LINE # 65
000C E4                CLR     A
000D 900000      R     MOV     DPTR,#Adc_Offset
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 66
0013 22                RET     
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 29  

             ; FUNCTION Init_Temp_Sensor (END)

             ; FUNCTION _Calibrate (BEGIN)
                                           ; SOURCE LINE # 79
0000 900000      R     MOV     DPTR,#temp_value
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 81
0008 120000      R     LCALL   Get_Temp_Value
;---- Variable 'tmpv' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 82
000B E4                CLR     A
000C FC                MOV     R4,A
000D FD                MOV     R5,A
000E 120000      R     LCALL   L?0020
0011 120000      E     LCALL   ?C?SLDIV
                                           ; SOURCE LINE # 83
0014 900000      R     MOV     DPTR,#temp_value
0017 120000      R     LCALL   L?0021
001A 900000      R     MOV     DPTR,#Adc_Offset
001D F0                MOVX    @DPTR,A
001E A3                INC     DPTR
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
0021 22                RET     
             ; FUNCTION _Calibrate (END)

             ; FUNCTION Get_Temp_Value (BEGIN)
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
;---- Variable 'retV' assigned to Register 'R6/R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 FE                MOV     R6,A
                                           ; SOURCE LINE # 100
0003 D2EC              SETB    AD0BUSY
0005         ?C0003:
                                           ; SOURCE LINE # 101
0005 30EDFD            JNB     AD0INT,?C0003
0008         ?C0004:
                                           ; SOURCE LINE # 102
0008 AFBE              MOV     R7,ADC0H
000A EF                MOV     A,R7
000B FE                MOV     R6,A
000C ADBD              MOV     R5,ADC0L
000E ED                MOV     A,R5
000F FF                MOV     R7,A
                                           ; SOURCE LINE # 103
0010 C2ED              CLR     AD0INT
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 105
0012         ?C0005:
0012 22                RET     
             ; FUNCTION Get_Temp_Value (END)

             ; FUNCTION Get_Temp (BEGIN)
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 30  

                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
0000 120000      R     LCALL   Get_Temp_Value
;---- Variable 'ret' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 121
0003 EE                MOV     A,R6
0004 33                RLC     A
0005 95E0              SUBB    A,ACC
0007 FD                MOV     R5,A
0008 FC                MOV     R4,A
0009 E4                CLR     A
000A 120000      R     LCALL   L?0020
000D 120000      E     LCALL   ?C?SLDIV
                                           ; SOURCE LINE # 122
0010 900000      R     MOV     DPTR,#Adc_Offset
0013 120000      R     LCALL   L?0021
0016 FE                MOV     R6,A
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
0017         ?C0006:
0017 22                RET     
             ; FUNCTION Get_Temp (END)

             ; FUNCTION Temp_Sensor_Stop_Logging (BEGIN)
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
0000 900000      R     MOV     DPTR,#Logging
0003 E0                MOVX    A,@DPTR
0004 6017              JZ      ?C0008
                                           ; SOURCE LINE # 139
0006 7BFF              MOV     R3,#0FFH
0008 7A00        R     MOV     R2,#HIGH ?SC_0
000A 7900        R     MOV     R1,#LOW ?SC_0
000C 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 140
000F 7B01              MOV     R3,#01H
0011 7A00        R     MOV     R2,#HIGH Log_File
0013 7900        R     MOV     R1,#LOW Log_File
0015 120000      E     LCALL   _fclose
                                           ; SOURCE LINE # 141
0018 E4                CLR     A
0019 900000      R     MOV     DPTR,#Logging
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
001D         ?C0008:
001D 22                RET     
             ; FUNCTION Temp_Sensor_Stop_Logging (END)

             ; FUNCTION _Temp_Log (BEGIN)
                                           ; SOURCE LINE # 155
0000 900000      R     MOV     DPTR,#filename
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
0006 900000      R     MOV     DPTR,#Logging
0009 E0                MOVX    A,@DPTR
000A 6003              JZ      ?C0009
                                           ; SOURCE LINE # 158
000C 020000      R     LJMP    Temp_Sensor_Stop_Logging
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 31  

                                           ; SOURCE LINE # 159
000F         ?C0009:
                                           ; SOURCE LINE # 161
000F 900000      R     MOV     DPTR,#filename
0012 120000      E     LCALL   ?C?PLDXDATA
0015 E9                MOV     A,R1
0016 4A                ORL     A,R2
0017 7008              JNZ     ?C0011
                                           ; SOURCE LINE # 162
0019 7BFF              MOV     R3,#0FFH
001B 7A00        R     MOV     R2,#HIGH ?SC_28
001D 7900        R     MOV     R1,#LOW ?SC_28
001F 8043              SJMP    ?C0018
                                           ; SOURCE LINE # 164
0021         ?C0011:
                                           ; SOURCE LINE # 166
0021 900000      R     MOV     DPTR,#filename
0024 120000      E     LCALL   ?C?PLDXDATA
0027 900000      E     MOV     DPTR,#?_fopen?BYTE+03H
002A 120000      E     LCALL   ?C?PSTXDATA
002D 7BFF              MOV     R3,#0FFH
002F 7A00        R     MOV     R2,#HIGH ?SC_44
0031 7900        R     MOV     R1,#LOW ?SC_44
0033 900000      E     MOV     DPTR,#?_fopen?BYTE+06H
0036 120000      E     LCALL   ?C?PSTXDATA
0039 7B01              MOV     R3,#01H
003B 7A00        R     MOV     R2,#HIGH Log_File
003D 7900        R     MOV     R1,#LOW Log_File
003F 120000      E     LCALL   _fopen
0042 EF                MOV     A,R7
0043 4E                ORL     A,R6
0044 7BFF              MOV     R3,#0FFH
0046 6018              JZ      ?C0013
                                           ; SOURCE LINE # 167
0048 7A00        R     MOV     R2,#HIGH ?SC_46
004A 7900        R     MOV     R1,#LOW ?SC_46
004C 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 168
004F 900000      R     MOV     DPTR,#Logging
0052 7401              MOV     A,#01H
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 169
0055 900000      E     MOV     DPTR,#tickcount
0058 120000      E     LCALL   ?C?LSTKXDATA
005B 00                DB      00H
005C 00                DB      00H
005D 00                DB      00H
005E 00                DB      00H
                                           ; SOURCE LINE # 170
005F 22                RET     
0060         ?C0013:
                                           ; SOURCE LINE # 171
0060 7A00        R     MOV     R2,#HIGH ?SC_99
0062 7900        R     MOV     R1,#LOW ?SC_99
0064         ?C0018:
0064 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
0067         ?C0012:
0067 22                RET     
             ; FUNCTION _Temp_Log (END)
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 32  


             ; FUNCTION Temp_Log_Step (BEGIN)
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 189
0000 900000      R     MOV     DPTR,#Logging
0003 E0                MOVX    A,@DPTR
0004 7003              JNZ     $ + 5H
0006 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 190
0009 E4                CLR     A
000A 7FE8              MOV     R7,#0E8H
000C 7E03              MOV     R6,#03H
000E FD                MOV     R5,A
000F FC                MOV     R4,A
0010 900000      E     MOV     DPTR,#tickcount
0013 120000      E     LCALL   ?C?LLDXDATA0
0016 C3                CLR     C
0017 120000      E     LCALL   ?C?ULCMP
001A 4076              JC      ?C0017
                                           ; SOURCE LINE # 191
001C 120000      R     LCALL   Get_Temp
001F 900000      R     MOV     DPTR,#retV
0022 EE                MOV     A,R6
0023 F0                MOVX    @DPTR,A
0024 A3                INC     DPTR
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 192
0027 7BFF              MOV     R3,#0FFH
0029 7A00        R     MOV     R2,#HIGH ?SC_115
002B 7900        R     MOV     R1,#LOW ?SC_115
002D 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0030 120000      E     LCALL   ?C?PSTXDATA
0033 900000      R     MOV     DPTR,#retV
0036 E0                MOVX    A,@DPTR
0037 FE                MOV     R6,A
0038 A3                INC     DPTR
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B 7C00              MOV     R4,#00H
003D 7D64              MOV     R5,#064H
003F 120000      E     LCALL   ?C?SIDIV
0042 AA06              MOV     R2,AR6
0044 AB07              MOV     R3,AR7
0046 7C00              MOV     R4,#00H
0048 7D64              MOV     R5,#064H
004A 120000      E     LCALL   ?C?IMUL
004D C3                CLR     C
004E E0                MOVX    A,@DPTR
004F 9F                SUBB    A,R7
0050 FF                MOV     R7,A
0051 900000      R     MOV     DPTR,#retV
0054 E0                MOVX    A,@DPTR
0055 9E                SUBB    A,R6
0056 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
0059 F0                MOVX    @DPTR,A
005A A3                INC     DPTR
005B EF                MOV     A,R7
005C F0                MOVX    @DPTR,A
005D A3                INC     DPTR
005E EA                MOV     A,R2
005F F0                MOVX    @DPTR,A
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 33  

0060 A3                INC     DPTR
0061 EB                MOV     A,R3
0062 F0                MOVX    @DPTR,A
0063 7B01              MOV     R3,#01H
0065 7A00        R     MOV     R2,#HIGH buf
0067 7900        R     MOV     R1,#LOW buf
0069 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 193
006C 900000      E     MOV     DPTR,#tickcount
006F 120000      E     LCALL   ?C?LSTKXDATA
0072 00                DB      00H
0073 00                DB      00H
0074 00                DB      00H
0075 00                DB      00H
                                           ; SOURCE LINE # 194
0076 7B01              MOV     R3,#01H
0078 7A00        R     MOV     R2,#HIGH buf
007A 7900        R     MOV     R1,#LOW buf
007C 900000      E     MOV     DPTR,#?_fwrite?BYTE+03H
007F 120000      E     LCALL   ?C?PSTXDATA
0082 900000      E     MOV     DPTR,#?_fwrite?BYTE+06H
0085 E4                CLR     A
0086 F0                MOVX    @DPTR,A
0087 A3                INC     DPTR
0088 7412              MOV     A,#012H
008A F0                MOVX    @DPTR,A
008B 7A00        R     MOV     R2,#HIGH Log_File
008D 7900        R     MOV     R1,#LOW Log_File
008F 120000      E     LCALL   _fwrite
                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
0092         ?C0017:
0092 22                RET     
             ; FUNCTION Temp_Log_Step (END)

C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 34  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
Log_File . . . . . . . . . . . . . . .  STATIC   XDATA  STRUCT   0000H  20
ADC0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
Get_Temp . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ret. . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
Temp_Log_Step. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  buf. . . . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0000H  18
  retV . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0012H  2
REF0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D1H  1
FILE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  20
  cluster_start. . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  sector_current . . . . . . . . . . .  MEMBER   -----  U_LONG   0002H  4
  sector_direntry. . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  offset_direntry. . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  attrib . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  pos. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   000BH  4
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   000FH  4
  isopen . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0013H  1
AD0INT . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EDH  1
Temp_Sensor_Stop_Logging . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
find_info. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  10
  block. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  offset . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  findempty. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  direntry . . . . . . . . . . . . . .  MEMBER   -----  PTR      0007H  3
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  i. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  c. . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
ADC0H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BEH  1
ADC0L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BDH  1
Logging. . . . . . . . . . . . . . . .  STATIC   XDATA  CHAR     0014H  1
Adc_Offset . . . . . . . . . . . . . .  STATIC   XDATA  INT      0015H  2
dir_entry. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  32
  lfn. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  32
  sfn. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  32
PREV_SEARCH. . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  block. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  offset . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
tickcount. . . . . . . . . . . . . . .  EXTERN   XDATA  U_LONG   -----  4
_fclose. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
AMX0N. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BAH  1
AMX0P. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BBH  1
_sprintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
UNI. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  i. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  c. . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
_Calibrate . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  temp_value . . . . . . . . . . . . .  AUTO     XDATA  INT      0000H  2
  tmpv . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
Init_Temp_Sensor . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_fwrite. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Get_Temp_Value . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  retV . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
C51 COMPILER V8.02   F34X_MSD_TEMP_SENSOR          07/24/2007 22:07:38 PAGE 35  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_fopen . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
AD0BUSY. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
_Temp_Log. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  filename . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    423    ----
   CONSTANT SIZE    =    138    ----
   XDATA SIZE       =     23      25
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
