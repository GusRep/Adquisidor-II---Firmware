C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE F34X_MSD_MSD
OBJECT MODULE PLACED IN F34x_MSD_MSD.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe F34x_MSD_MSD.c PW(80) SB LC OT(9,SI
                    -ZE) CD DB OE DF(__F340_VER__) LARGE

line level    source

   1          //----------------------------------------------------------------
             --------------
   2          // F34x_MSD_MSD.c
   3          //----------------------------------------------------------------
             --------------
   4          // Copyright 2006 Silicon Laboratories, Inc.
   5          // http://www.silabs.com
   6          //
   7          // Program Description:
   8          //
   9          // This module contains the crank function. This function is used 
             -to checking
  10          // the request and preparing the response action for its. The fact
             - that it's 
  11          // crank function means that in one cycle this function can make o
             -nly one step.
  12          // That means it can't check and response in this same cycle. It w
             -orks more 
  13          // like state machine. One step can only repose for actual state a
             -nd change 
  14          // this state to another. The response for other state occurs in n
             -ext step.
  15          //
  16          //
  17          //
  18          // How To Test:    See Readme.txt
  19          //
  20          //
  21          // FID:            34X000046
  22          // Target:         C8051F34x
  23          // Tool chain:     Keil
  24          // Command Line:   See Readme.txt
  25          // Project Name:   F34x_USB_MSD
  26          //
  27          // Release 1.1
  28          //    -All changes by PKC
  29          //    -09 JUN 2006
  30          //    -No changes; incremented revision number to match project re
             -vision
  31          //
  32          // Release 1.0
  33          //    -Initial Release
  34          //
  35          
  36          //----------------------------------------------------------------
             --------------
  37          // Includes
  38          //----------------------------------------------------------------
             --------------
  39          
  40          #include "F34x_MSD_USB_Main.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_USB_Main.h
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 2   

   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Main header file for USB firmware. Includes function prototypes
             -,
  10      =1  // standard constants, and configuration constants.//
  11      =1  //
  12      =1  // FID:            34X000063
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  // 11/22/02 - DM: 1. Updated function prototypes and added constan
             -ts
  27      =1  //                to F34x_USB_Main.h with sample interrupt firmwar
             -e.
  28      =1  
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  // Header File Preprocessor Directive
  31      =1  //----------------------------------------------------------------
             --------------
  32      =1  
  33      =1  #ifndef _USB_MAIN_H_
  34      =1  #define _USB_MAIN_H_
  35      =1  
  36      =1  #include "F34x_MSD_Definitions.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_Definitions.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Header file with all definitions.
  10      =2  //
  11      =2  //
  12      =2  // FID:            34X000032
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 3   

  20      =2  //    -09 JUN 2006
  21      =2  //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  
  27      =2  //----------------------------------------------------------------
             --------------
  28      =2  // Header File Preprocessor Directive
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  
  31      =2  #ifndef __DEFINITIONS_H__
  32      =2  #define __DEFINITIONS_H__
  33      =2  
  34      =2  #define DEBUG_TIMEOUTS
  35      =2  #include "c8051f340.h"
   1      =3  //----------------------------------------------------------------
             --------------
   2      =3  // C8051F340.h
   3      =3  //----------------------------------------------------------------
             --------------
   4      =3  // Copyright 2005 Silicon Laboratories, Inc.
   5      =3  // http://www.silabs.com
   6      =3  //
   7      =3  // Program Description:
   8      =3  //
   9      =3  // Register/bit definitions for the C8051F34x family.
  10      =3  //
  11      =3  //
  12      =3  // FID:            34X000002
  13      =3  // Target:         C8051F340, 'F341, 'F342, 'F343, 'F344, 'F345, '
             -F346, 'F347
  14      =3  // Tool chain:     Keil
  15      =3  // Command Line:   None
  16      =3  //
  17      =3  // Release 1.0
  18      =3  //    -Initial Release (GP\PKC)
  19      =3  //    -13 DEC 2005
  20      =3  
  21      =3  //----------------------------------------------------------------
             --------------
  22      =3  // Header File Preprocessor Directive
  23      =3  //----------------------------------------------------------------
             --------------
  24      =3  
  25      =3  #ifndef C8051F340_H
  26      =3  #define C8051F340_H
  27      =3  
  28      =3  //----------------------------------------------------------------
             --------------
  29      =3  // Byte Registers
  30      =3  //----------------------------------------------------------------
             --------------
  31      =3  
  32      =3  sfr  P0           =  0x80;             // Port 0 Latch
  33      =3  sfr  SP           =  0x81;             // Stack Pointer
  34      =3  sfr  DPL          =  0x82;             // Data Pointer Low
  35      =3  sfr  DPH          =  0x83;             // Data Pointer High
  36      =3  sfr  EMI0TC       =  0x84;             // EMIF Timing
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 4   

  37      =3  sfr  EMI0CF       =  0x85;             // EMIF Configuration
  38      =3  sfr  OSCLCN       =  0x86;             // Internal Low-Freq Oscill
             -ator Control
  39      =3  sfr  PCON         =  0x87;             // Power Control
  40      =3  sfr  TCON         =  0x88;             // Timer/Counter Control
  41      =3  sfr  TMOD         =  0x89;             // Timer/Counter Mode
  42      =3  sfr  TL0          =  0x8A;             // Timer/Counter 0 Low
  43      =3  sfr  TL1          =  0x8B;             // Timer/Counter 1 Low
  44      =3  sfr  TH0          =  0x8C;             // Timer/Counter 0 High
  45      =3  sfr  TH1          =  0x8D;             // Timer/Counter 1 High
  46      =3  sfr  CKCON        =  0x8E;             // Clock Control
  47      =3  sfr  PSCTL        =  0x8F;             // Program Store R/W Contro
             -l
  48      =3  sfr  P1           =  0x90;             // Port 1 Latch
  49      =3  sfr  TMR3CN       =  0x91;             // Timer/Counter 3Control
  50      =3  sfr  TMR3RLL      =  0x92;             // Timer/Counter 3 Reload L
             -ow
  51      =3  sfr  TMR3RLH      =  0x93;             // Timer/Counter 3 Reload H
             -igh
  52      =3  sfr  TMR3L        =  0x94;             // Timer/Counter 3Low
  53      =3  sfr  TMR3H        =  0x95;             // Timer/Counter 3 High
  54      =3  sfr  USB0ADR      =  0x96;             // USB0 Indirect Address Re
             -gister
  55      =3  sfr  USB0DAT      =  0x97;             // USB0 Data Register
  56      =3  sfr  SCON0        =  0x98;             // UART0 Control
  57      =3  sfr  SBUF0        =  0x99;             // UART0 Data Buffer
  58      =3  sfr  CPT1CN       =  0x9A;             // Comparator1 Control
  59      =3  sfr  CPT0CN       =  0x9B;             // Comparator0 Control
  60      =3  sfr  CPT1MD       =  0x9C;             // Comparator1 Mode Selecti
             -on
  61      =3  sfr  CPT0MD       =  0x9D;             // Comparator0 Mode Selecti
             -on
  62      =3  sfr  CPT1MX       =  0x9E;             // Comparator1 MUX Selectio
             -n
  63      =3  sfr  CPT0MX       =  0x9F;             // Comparator0 MUX Selectio
             -n
  64      =3  sfr  P2           =  0xA0;             // Port 2 Latch
  65      =3  sfr  SPI0CFG      =  0xA1;             // SPI Configuration
  66      =3  sfr  SPI0CKR      =  0xA2;             // SPI Clock Rate Control
  67      =3  sfr  SPI0DAT      =  0xA3;             // SPI Data
  68      =3  sfr  P0MDOUT      =  0xA4;             // Port 0 Output Mode Confi
             -guration
  69      =3  sfr  P1MDOUT      =  0xA5;             // Port 1 Output Mode Confi
             -guration
  70      =3  sfr  P2MDOUT      =  0xA6;             // Port 2 Output Mode Confi
             -guration
  71      =3  sfr  P3MDOUT      =  0xA7;             // Port 3 Output Mode Confi
             -guration
  72      =3  sfr  IE           =  0xA8;             // Interrupt Enable
  73      =3  sfr  CLKSEL       =  0xA9;             // Clock Select
  74      =3  sfr  EMI0CN       =  0xAA;             // External Memory Interfac
             -e Control
  75      =3  sfr  SBCON1       =  0xAC;             // UART1 Baud Rate Generato
             -r Control
  76      =3  sfr  P4MDOUT      =  0xAE;             // Port 4 Output Mode Confi
             -guration
  77      =3  sfr  PFE0CN       =  0xAF;             // Prefetch Engine Control
  78      =3  sfr  P3           =  0xB0;             // Port 3 Latch
  79      =3  sfr  OSCXCN       =  0xB1;             // External Oscillator Cont
             -rol
  80      =3  sfr  OSCICN       =  0xB2;             // Internal Oscillator Cont
             -rol
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 5   

  81      =3  sfr  OSCICL       =  0xB3;             // Internal Oscillator Cali
             -bration
  82      =3  sfr  SBRLL1       =  0xB4;             // UART1 Baud Rate Generato
             -r Low
  83      =3  sfr  SBRLH1       =  0xB5;             // UART1 Baud Rate Generato
             -r High
  84      =3  sfr  FLSCL        =  0xB6;             // Flash Scale
  85      =3  sfr  FLKEY        =  0xB7;             // Flash Lock and Key
  86      =3  sfr  IP           =  0xB8;             // Interrupt Priority
  87      =3  sfr  CLKMUL       =  0xB9;             // Clock Multiplier
  88      =3  sfr  AMX0N        =  0xBA;             // AMUX0 Negative Channel S
             -elect
  89      =3  sfr  AMX0P        =  0xBB;             // AMUX0 Positive Channel S
             -elect
  90      =3  sfr  ADC0CF       =  0xBC;             // ADC0 Configuration
  91      =3  sfr  ADC0L        =  0xBD;             // ADC0 Low
  92      =3  sfr  ADC0H        =  0xBE;             // ADC0 High
  93      =3  sfr  SMB0CN       =  0xC0;             // SMBus Control
  94      =3  sfr  SMB0CF       =  0xC1;             // SMBus Configuration
  95      =3  sfr  SMB0DAT      =  0xC2;             // SMBus Data
  96      =3  sfr  ADC0GTL      =  0xC3;             // ADC0 Greater-Than Compar
             -e Low
  97      =3  sfr  ADC0GTH      =  0xC4;             // ADC0 Greater-Than Compar
             -e High
  98      =3  sfr  ADC0LTL      =  0xC5;             // ADC0 Less-Than Compare W
             -ord Low
  99      =3  sfr  ADC0LTH      =  0xC6;             // ADC0 Less-Than Compare W
             -ord High
 100      =3  sfr  P4           =  0xC7;             // Port 4 Latch
 101      =3  sfr  TMR2CN       =  0xC8;             // Timer/Counter 2 Control
 102      =3  sfr  REG0CN       =  0xC9;             // Voltage Regulator Contro
             -l
 103      =3  sfr  TMR2RLL      =  0xCA;             // Timer/Counter 2 Reload L
             -ow
 104      =3  sfr  TMR2RLH      =  0xCB;             // Timer/Counter 2 Reload H
             -igh
 105      =3  sfr  TMR2L        =  0xCC;             // Timer/Counter 2 Low
 106      =3  sfr  TMR2H        =  0xCD;             // Timer/Counter 2 High
 107      =3  sfr  PSW          =  0xD0;             // Program Status Word
 108      =3  sfr  REF0CN       =  0xD1;             // Voltage Reference Contro
             -l
 109      =3  sfr  SCON1        =  0xD2;             // UART1 Control
 110      =3  sfr  SBUF1        =  0xD3;             // UART1 Data Buffer
 111      =3  sfr  P0SKIP       =  0xD4;             // Port 0 Skip
 112      =3  sfr  P1SKIP       =  0xD5;             // Port 1 Skip
 113      =3  sfr  P2SKIP       =  0xD6;             // Port 2 Skip
 114      =3  sfr  USB0XCN      =  0xD7;             // USB0 Transceiver Control
 115      =3  sfr  PCA0CN       =  0xD8;             // PCA0 Control
 116      =3  sfr  PCA0MD       =  0xD9;             // PCA0 Mode
 117      =3  sfr  PCA0CPM0     =  0xDA;             // PCA0 Module 0 Mode Regis
             -ter
 118      =3  sfr  PCA0CPM1     =  0xDB;             // PCA0 Module 1 Mode Regis
             -ter
 119      =3  sfr  PCA0CPM2     =  0xDC;             // PCA0 Module 2 Mode Regis
             -ter
 120      =3  sfr  PCA0CPM3     =  0xDD;             // PCA0 Module 3 Mode Regis
             -ter
 121      =3  sfr  PCA0CPM4     =  0xDE;             // PCA0 Module 4 Mode Regis
             -ter
 122      =3  sfr  P3SKIP       =  0xDF;             // Port 3 Skip
 123      =3  sfr  ACC          =  0xE0;             // Accumulator
 124      =3  sfr  XBR0         =  0xE1;             // Port I/O Crossbar Contro
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 6   

             -l 0
 125      =3  sfr  XBR1         =  0xE2;             // Port I/O Crossbar Contro
             -l 1
 126      =3  sfr  XBR2         =  0xE3;             // Port I/O Crossbar Contro
             -l 2
 127      =3  sfr  IT01CF       =  0xE4;             // INT0/INT1 Configuration
 128      =3  sfr  SMOD1        =  0xE5;             // UART1 Mode
 129      =3  sfr  EIE1         =  0xE6;             // Extended Interrupt Enabl
             -e 1
 130      =3  sfr  EIE2         =  0xE7;             // Extended Interrupt Enabl
             -e 2
 131      =3  sfr  ADC0CN       =  0xE8;             // ADC0 Control
 132      =3  sfr  PCA0CPL1     =  0xE9;             // PCA0 Capture 1 Low
 133      =3  sfr  PCA0CPH1     =  0xEA;             // PCA0 Capture 1 High
 134      =3  sfr  PCA0CPL2     =  0xEB;             // PCA0 Capture 2 Low
 135      =3  sfr  PCA0CPH2     =  0xEC;             // PCA0 Capture 2 High
 136      =3  sfr  PCA0CPL3     =  0xED;             // PCA0 Capture 3 Low
 137      =3  sfr  PCA0CPH3     =  0xEE;             // PCA0 Capture 3 High
 138      =3  sfr  RSTSRC       =  0xEF;             // Reset Source Configurati
             -on/Status
 139      =3  sfr  B            =  0xF0;             // B Register
 140      =3  sfr  P0MDIN       =  0xF1;             // Port 0 Input Mode Config
             -uration
 141      =3  sfr  P1MDIN       =  0xF2;             // Port 1 Input Mode Config
             -uration
 142      =3  sfr  P2MDIN       =  0xF3;             // Port 2 Input Mode Config
             -uration
 143      =3  sfr  P3MDIN       =  0xF4;             // Port 3 Input Mode Config
             -uration
 144      =3  sfr  P4MDIN       =  0xF5;             // Port 4 Input Mode Config
             -uration
 145      =3  sfr  EIP1         =  0xF6;             // Extended Interrupt Prior
             -ity 1
 146      =3  sfr  EIP2         =  0xF7;             // Extended Interrupt Prior
             -ity 2
 147      =3  sfr  SPI0CN       =  0xF8;             // SPI0 Control
 148      =3  sfr  PCA0L        =  0xF9;             // PCA0 Counter Low
 149      =3  sfr  PCA0H        =  0xFA;             // PCA0 Counter High
 150      =3  sfr  PCA0CPL0     =  0xFB;             // PCA0 Capture 0 Low
 151      =3  sfr  PCA0CPH0     =  0xFC;             // PCA0 Capture 0 High
 152      =3  sfr  PCA0CPL4     =  0xFD;             // PCA0 Capture 4 Low
 153      =3  sfr  PCA0CPH4     =  0xFE;             // PCA0 Capture 4 High
 154      =3  sfr  VDM0CN       =  0xFF;             // VDD Monitor Control
 155      =3  
 156      =3  
 157      =3  //----------------------------------------------------------------
             --------------
 158      =3  // Bit Definitions
 159      =3  //----------------------------------------------------------------
             --------------
 160      =3  
 161      =3  // TCON 0x88
 162      =3  sbit TF1     = 0x8F;                   // Timer1 overflow flag
 163      =3  sbit TR1     = 0x8E;                   // Timer1 on/off control
 164      =3  sbit TF0     = 0x8D;                   // Timer0 overflow flag
 165      =3  sbit TR0     = 0x8C;                   // Timer0 on/off control
 166      =3  sbit IE1     = 0x8B;                   // Ext interrupt 1 edge fla
             -g
 167      =3  sbit IT1     = 0x8A;                   // Ext interrupt 1 type
 168      =3  sbit IE0     = 0x89;                   // Ext interrupt 0 edge fla
             -g
 169      =3  sbit IT0     = 0x88;                   // Ext interrupt 0 type
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 7   

 170      =3  
 171      =3  // SCON0 0x98
 172      =3  sbit S0MODE  = 0x9F;                   // Serial mode control bit 
             -0
 173      =3                                         // Bit6 UNUSED
 174      =3  sbit MCE0    = 0x9D;                   // Multiprocessor communica
             -tion enable
 175      =3  sbit REN0    = 0x9C;                   // Receive enable
 176      =3  sbit TB80    = 0x9B;                   // Transmit bit 8
 177      =3  sbit RB80    = 0x9A;                   // Receive bit 8
 178      =3  sbit TI0     = 0x99;                   // Transmit interrupt flag
 179      =3  sbit RI0     = 0x98;                   // Receive interrupt flag
 180      =3  
 181      =3  // IE 0xA8
 182      =3  sbit EA      = 0xAF;                   // Global interrupt enable
 183      =3  sbit ESPI0   = 0xAE;                   // SPI0 interrupt enable
 184      =3  sbit ET2     = 0xAD;                   // Timer2 interrupt enable
 185      =3  sbit ES0     = 0xAC;                   // UART0 interrupt enable
 186      =3  sbit ET1     = 0xAB;                   // Timer1 interrupt enable
 187      =3  sbit EX1     = 0xAA;                   // External interrupt 1 ena
             -ble
 188      =3  sbit ET0     = 0xA9;                   // Timer0 interrupt enable
 189      =3  sbit EX0     = 0xA8;                   // External interrupt 0 ena
             -ble
 190      =3  
 191      =3  // IP 0xB8
 192      =3                                         // Bit7 UNUSED
 193      =3  sbit PSPI0   = 0xBE;                   // SPI0 interrupt priority
 194      =3  sbit PT2     = 0xBD;                   // Timer2 priority
 195      =3  sbit PS0     = 0xBC;                   // UART0 priority
 196      =3  sbit PT1     = 0xBB;                   // Timer1 priority
 197      =3  sbit PX1     = 0xBA;                   // External interrupt 1 pri
             -ority
 198      =3  sbit PT0     = 0xB9;                   // Timer0 priority
 199      =3  sbit PX0     = 0xB8;                   // External interrupt 0 pri
             -ority
 200      =3  
 201      =3  // SMB0CN 0xC0
 202      =3  sbit MASTER  = 0xC7;                   // Master/slave indicator
 203      =3  sbit TXMODE  = 0xC6;                   // Transmit mode indicator
 204      =3  sbit STA     = 0xC5;                   // Start flag
 205      =3  sbit STO     = 0xC4;                   // Stop flag
 206      =3  sbit ACKRQ   = 0xC3;                   // Acknowledge request
 207      =3  sbit ARBLOST = 0xC2;                   // Arbitration lost indicat
             -or
 208      =3  sbit ACK     = 0xC1;                   // Acknowledge flag
 209      =3  sbit SI      = 0xC0;                   // SMBus interrupt flag
 210      =3  
 211      =3  // TMR2CN 0xC8
 212      =3  sbit TF2H    = 0xCF;                   // Timer2 high byte overflo
             -w flag
 213      =3  sbit TF2L    = 0xCE;                   // Timer2 low byte overflow
             - flag
 214      =3  sbit TF2LEN  = 0xCD;                   // Timer2 low byte interrup
             -t enable
 215      =3  sbit T2CE    = 0xCC;                   // Timer2 capture enable
 216      =3  sbit T2SPLIT = 0xCB;                   // Timer2 split mode enable
 217      =3  sbit TR2     = 0xCA;                   // Timer2 on/off control
 218      =3  sbit T2CSS   = 0xC9;                   // Timer 2 Capture Source s
             -elect
 219      =3  sbit T2XCLK  = 0xC8;                   // Timer2 external clock se
             -lect
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 8   

 220      =3  
 221      =3  // PSW 0xD0
 222      =3  sbit CY      = 0xD7;                   // Carry flag
 223      =3  sbit AC      = 0xD6;                   // Auxiliary carry flag
 224      =3  sbit F0      = 0xD5;                   // User flag 0
 225      =3  sbit RS1     = 0xD4;                   // Register bank select 1
 226      =3  sbit RS0     = 0xD3;                   // Register bank select 0
 227      =3  sbit OV      = 0xD2;                   // Overflow flag
 228      =3  sbit F1      = 0xD1;                   // User flag 1
 229      =3  sbit P       = 0xD0;                   // Accumulator parity flag
 230      =3  
 231      =3  // PCA0CN 0xD8
 232      =3  sbit CF      = 0xDF;                   // PCA0 counter overflow fl
             -ag
 233      =3  sbit CR      = 0xDE;                   // PCA0 counter run control
 234      =3                                         // Bit5 UNUSED
 235      =3  sbit CCF4    = 0xDC;                   // PCA0 module4 capture/com
             -pare flag
 236      =3  sbit CCF3    = 0xDB;                   // PCA0 module3 capture/com
             -pare flag
 237      =3  sbit CCF2    = 0xDA;                   // PCA0 module2 capture/com
             -pare flag
 238      =3  sbit CCF1    = 0xD9;                   // PCA0 module1 capture/com
             -pare flag
 239      =3  sbit CCF0    = 0xD8;                   // PCA0 module0 capture/com
             -pare flag
 240      =3  
 241      =3  // ADC0CN 0xE8
 242      =3  sbit AD0EN   = 0xEF;                   // ADC0 enable
 243      =3  sbit AD0TM   = 0xEE;                   // ADC0 track mode
 244      =3  sbit AD0INT  = 0xED;                   // ADC0 conversion complete
             - interrupt flag
 245      =3  sbit AD0BUSY = 0xEC;                   // ADC0 busy flag
 246      =3  sbit AD0WINT = 0xEB;                   // ADC0 window compare inte
             -rrupt flag
 247      =3  sbit AD0CM2  = 0xEA;                   // ADC0 conversion mode sel
             -ect 2
 248      =3  sbit AD0CM1  = 0xE9;                   // ADC0 conversion mode sel
             -ect 1
 249      =3  sbit AD0CM0  = 0xE8;                   // ADC0 conversion mode sel
             -ect 0
 250      =3  
 251      =3  // SPI0CN 0xF8
 252      =3  sbit SPIF    = 0xFF;                   // SPI0 interrupt flag
 253      =3  sbit WCOL    = 0xFE;                   // SPI0 write collision fla
             -g
 254      =3  sbit MODF    = 0xFD;                   // SPI0 mode fault flag
 255      =3  sbit RXOVRN  = 0xFC;                   // SPI0 rx overrun flag
 256      =3  sbit NSSMD1  = 0xFB;                   // SPI0 slave select mode 1
 257      =3  sbit NSSMD0  = 0xFA;                   // SPI0 slave select mode 0
 258      =3  sbit TXBMT   = 0xF9;                   // SPI0 transmit buffer emp
             -ty
 259      =3  sbit SPIEN   = 0xF8;                   // SPI0 SPI enable
 260      =3  
 261      =3  
 262      =3  //----------------------------------------------------------------
             --------------
 263      =3  // Interrupt Priorities
 264      =3  //----------------------------------------------------------------
             --------------
 265      =3  
 266      =3  #define INTERRUPT_INT0             0   // External Interrupt 0
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 9   

 267      =3  #define INTERRUPT_TIMER0           1   // Timer0 Overflow
 268      =3  #define INTERRUPT_INT1             2   // External Interrupt 1
 269      =3  #define INTERRUPT_TIMER1           3   // Timer1 Overflow
 270      =3  #define INTERRUPT_UART0            4   // Serial Port 0
 271      =3  #define INTERRUPT_TIMER2           5   // Timer2 Overflow
 272      =3  #define INTERRUPT_SPI0             6   // Serial Peripheral Interf
             -ace 0
 273      =3  #define INTERRUPT_SMBUS0           7   // SMBus0 Interface
 274      =3  #define INTERRUPT_USB0             8   // USB Interface
 275      =3  #define INTERRUPT_ADC0_WINDOW      9   // ADC0 Window Comparison
 276      =3  #define INTERRUPT_ADC0_EOC         10  // ADC0 End Of Conversion
 277      =3  #define INTERRUPT_PCA0             11  // PCA0 Peripheral
 278      =3  #define INTERRUPT_COMPARATOR0      12  // Comparator0
 279      =3  #define INTERRUPT_COMPARATOR1      13  // Comparator1
 280      =3  #define INTERRUPT_TIMER3           14  // Timer3 Overflow
 281      =3  #define INTERRUPT_VBUS_LEVEL       15  // VBUS level-triggered int
             -errupt
 282      =3  #define INTERRUPT_UART1            16  // Serial Port 1
 283      =3  
 284      =3  //----------------------------------------------------------------
             --------------
 285      =3  // Header File PreProcessor Directive
 286      =3  //----------------------------------------------------------------
             --------------
 287      =3  
 288      =3  #endif                                 // #define C8051F340_H
 289      =3  
 290      =3  //----------------------------------------------------------------
             --------------
 291      =3  // End Of File
 292      =3  //----------------------------------------------------------------
             --------------
  36      =2  #ifdef DEBUG_TIMEOUTS
  37      =2  sbit START_STOP_SPI = P3^0 ;
  38      =2  sbit START_STOP_READ_TO = P3^1;
  39      =2  sbit START_STOP_WRITE_TO = P3^2;
  40      =2  
  41      =2  #define START_SPI_TIMEOUT (START_STOP_SPI = 1)
  42      =2  #define STOP_SPI_TIME_OUT (START_STOP_SPI = 0)
  43      =2  #define START_READ_COPY (START_STOP_READ_TO = 1)
  44      =2  #define STOP_READ_COPY (START_STOP_READ_TO = 0)
  45      =2  #define START_WRITE_COPY (START_STOP_WRITE_TO = 1)
  46      =2  #define STOP_WRITE_COPY (START_STOP_WRITE_TO = 0)
  47      =2  #else
           =2 
           =2 #define START_SPI_TIMEOUT /\
           =2 /
           =2 #define STOP_SPI_TIME_OUT /\
           =2 /
           =2 #define START_READ_COPY /\
           =2 /
           =2 #define STOP_READ_COPY /\
           =2 /
           =2 #define START_WRITE_COPY /\
           =2 /
           =2 #define STOP_WRITE_COPY /\
           =2 /
           =2 
           =2 #endif
  63      =2  
  64      =2  #define ENDLINE         "\r\n"
  65      =2  #define ENDLINE_SGN '\r'
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 10  

  66      =2  
  67      =2  #endif
  37      =1  //#define _USB_LOW_SPEED_                      // Change this comm
             -ent to make Full/Low speed
  38      =1  
  39      =1  #define SYSCLK                   12000000    // SYSCLK frequency i
             -n Hz
  40      =1  
  41      =1  // USB clock selections (SFR CLKSEL)
  42      =1  #define USB_4X_CLOCK             0x00        // Select 4x clock mu
             -ltiplier, for USB Full Speed
  43      =1  #define USB_INT_OSC_DIV_2        0x10        // See Data Sheet sec
             -tion 13. Oscillators
  44      =1  #define USB_EXT_OSC              0x20
  45      =1  #define USB_EXT_OSC_DIV_2        0x30
  46      =1  #define USB_EXT_OSC_DIV_3        0x40
  47      =1  #define USB_EXT_OSC_DIV_4        0x50
  48      =1  
  49      =1  // System clock selections (SFR CLKSEL)
  50      =1  #define SYS_INT_OSC              0x00        // Select to use inte
             -rnal oscillator
  51      =1  #define SYS_4X_MUL               0x03        // Select to use inte
             -rnal oscillator
  52      =1  #define SYS_EXT_OSC              0x01        // Select to use an e
             -xternal oscillator
  53      =1  #define SYS_4X_DIV_2             0x02
  54      =1  
  55      =1  // BYTE type definition
  56      =1  #ifndef _BYTE_DEF_
  57      =1  #define _BYTE_DEF_
  58      =1  typedef unsigned char BYTE;
  59      =1  #endif   /* _BYTE_DEF_ */
  60      =1  
  61      =1  // WORD type definition, for KEIL Compiler
  62      =1  #ifndef _WORD_DEF_                           // Compiler Specific,
             - written for Little Endian
  63      =1  #define _WORD_DEF_
  64      =1  typedef union {unsigned int i; unsigned char c[2];} WORD;
  65      =1  #define LSB 1                                // All words sent to 
             -and received from the host are
  66      =1  #define MSB 0                                // little endian, thi
             -s is switched by software when
  67      =1                                               // neccessary.  These
             - sections of code have been marked
  68      =1                                                                                           // with "Compiler Specific" as above for easier modifi
             -cation
  69      =1  #endif   /* _WORD_DEF_ */
  70      =1  
  71      =1  // DWORD type definition
  72      =1  #ifndef _DWORD_DEF_
  73      =1  #define _DWORD_DEF_
  74      =1  typedef unsigned long DWORD;
  75      =1  #endif /* _DWORD_DEF_ */
  76      =1  
  77      =1  extern volatile DWORD xdata tickcount;
  78      =1  
  79      =1  // Define Endpoint Packet Sizes
  80      =1  #ifdef _USB_LOW_SPEED_
           =1 #define  EP0_PACKET_SIZE         0x40        // This value can be 
             -8,16,32,64 depending on device speed, see USB spec
           =1 #else
  83      =1  #define  EP0_PACKET_SIZE         0x40
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 11  

  84      =1  #endif /* _USB_LOW_SPEED_ */ 
  85      =1  
  86      =1  #define  EP1_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type  
  87      =1  #define  EP1_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP1_PACKET_SIZE
  88      =1  #define  EP2_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type
  89      =1  #define  EP2_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP2_PACKET_SIZE
  90      =1  
  91      =1  // Standard Descriptor Types
  92      =1  #define  DSC_DEVICE              0x01        // Device Descriptor
  93      =1  #define  DSC_CONFIG              0x02        // Configuration Desc
             -riptor
  94      =1  #define  DSC_STRING              0x03        // String Descriptor
  95      =1  #define  DSC_INTERFACE           0x04        // Interface Descript
             -or
  96      =1  #define  DSC_ENDPOINT            0x05        // Endpoint Descripto
             -r
  97      =1  
  98      =1  // HID Descriptor Types
  99      =1  #define DSC_HID                                 0x21            // HID Class Descriptor
 100      =1  #define DSC_HID_REPORT                  0x22            // HID Report Descriptor
 101      =1  
 102      =1  // Standard Request Codes
 103      =1  #define  GET_STATUS             0x00        // Code for Get Status
 104      =1  #define  CLEAR_FEATURE          0x01        // Code for Clear Feat
             -ure
 105      =1  #define  SET_FEATURE            0x03        // Code for Set Featur
             -e
 106      =1  #define  SET_ADDRESS            0x05        // Code for Set Addres
             -s
 107      =1  #define  GET_DESCRIPTOR         0x06        // Code for Get Descri
             -ptor
 108      =1  #define  SET_DESCRIPTOR         0x07        // Code for Set Descri
             -ptor(not used)
 109      =1  #define  GET_CONFIGURATION      0x08        // Code for Get Config
             -uration
 110      =1  #define  SET_CONFIGURATION      0x09        // Code for Set Config
             -uration
 111      =1  #define  GET_INTERFACE          0x0A        // Code for Get Interf
             -ace
 112      =1  #define  SET_INTERFACE          0x0B        // Code for Set Interf
             -ace
 113      =1  #define  SYNCH_FRAME            0x0C        // Code for Synch Fram
             -e(not used)
 114      =1  #define  MSD_RESET                              0xFF            // Mass-storage device Reset
 115      =1  #define  MSD_GET_MAX_LUN                0xFE            // Mass-storage device Get Max LU
             -N
 116      =1  
 117      =1  // HID Request Codes
 118      =1  #define GET_REPORT                              0x01            // Code for Get Report
 119      =1  #define GET_IDLE                                0x02            // Code for Get Idle
 120      =1  #define GET_PROTOCOL                    0x03            // Code for Get Protocol
 121      =1  #define SET_REPORT                              0x09            // Code for Set Report
 122      =1  #define SET_IDLE                                0x0A            // Code for Set Idle
 123      =1  #define SET_PROTOCOL                    0x0B            // Code for Set Protocol
 124      =1  
 125      =1  // Define device states
 126      =1  #define  DEV_ATTACHED            0x00        // Device is in Attac
             -hed State
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 12  

 127      =1  #define  DEV_POWERED             0x01        // Device is in Power
             -ed State
 128      =1  #define  DEV_DEFAULT             0x02        // Device is in Defau
             -lt State
 129      =1  #define  DEV_ADDRESS             0x03        // Device is in Addre
             -ssed State
 130      =1  #define  DEV_CONFIGURED          0x04        // Device is in Confi
             -gured State
 131      =1  #define  DEV_SUSPENDED           0x05        // Device is in Suspe
             -nded State
 132      =1  
 133      =1  // Define bmRequestType bitmaps
 134      =1  #define  IN_DEVICE               0x00        // Request made to de
             -vice, direction is IN 
 135      =1  #define  OUT_DEVICE              0x80        // Request made to de
             -vice, direction is OUT
 136      =1  #define  IN_INTERFACE            0x01        // Request made to in
             -terface, direction is IN
 137      =1  #define  OUT_INTERFACE           0x81        // Request made to in
             -terface, direction is OUT
 138      =1  #define  IN_ENDPOINT             0x02        // Request made to en
             -dpoint, direction is IN
 139      =1  #define  OUT_ENDPOINT            0x82        // Request made to en
             -dpoint, direction is OUT
 140      =1  
 141      =1  // Define wIndex bitmaps
 142      =1  #define  IN_EP1                  0x81        // Index values used 
             -by Set and Clear feature
 143      =1  #define  OUT_EP1                 0x01        // commands for Endpo
             -int_Halt
 144      =1  #define  IN_EP2                  0x82
 145      =1  #ifdef __F326_VER__
           =1 #define  OUT_EP2                                 0x01           
           =1 #else
 148      =1  #define  OUT_EP2                                 0x01           
 149      =1  #endif
 150      =1  
 151      =1  // Define wValue bitmaps for Standard Feature Selectors
 152      =1  #define  DEVICE_REMOTE_WAKEUP    0x01        // Remote wakeup feat
             -ure(not used)
 153      =1  #define  ENDPOINT_HALT           0x00        // Endpoint_Halt feat
             -ure selector
 154      =1  
 155      =1  // Define Endpoint States
 156      =1  #define  EP_IDLE                 0x00        // This signifies End
             -point Idle State
 157      =1  #define  EP_TX                   0x01        // Endpoint Transmit 
             -State
 158      =1  #define  EP_RX                   0x02        // Endpoint Receive S
             -tate
 159      =1  #define  EP_HALT                 0x03        // Endpoint Halt Stat
             -e (return stalls)
 160      =1  #define  EP_STALL                0x04        // Endpoint Stall (se
             -nd procedural stall next status phase)
 161      =1  #define  EP_ADDRESS              0x05        // Endpoint Address (
             -change FADDR during next status phase)
 162      =1  
 163      =1  // Function prototypes
 164      =1  // USB Routines
 165      =1  void USB_Resume(void);                       // This routine resum
             -es USB operation
 166      =1  void USB_Reset(void);                        // Called after USB b
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 13  

             -us reset
 167      =1  void Handle_Setup(void);                     // Handle setup packe
             -t on Endpoint 0
 168      =1  void Handle_In1(BYTE* ptr_buf);                       // Handle in
             - packet on Endpoint 1
 169      =1  void Handle_Out2(void);                      // Handle out packet 
             -on Endpoint 2
 170      =1  void USB_Suspend(void);                      // This routine calle
             -d when suspend signalling on bus
 171      =1  void Out2_Get_Data(BYTE* ptr_buf);                               // Copies from FIFO to ptr_
             -buf, clears FIFO-full flag.
 172      =1  void Out2_Done(void);                                            // Call this when finished with the d
             -ata
 173      =1  
 174      =1  // Standard Requests
 175      =1  void Get_Status(void);                       // These are called f
             -or each specific standard request
 176      =1  void Clear_Feature(void);
 177      =1  void Set_Feature(void);
 178      =1  void Set_Address(void);
 179      =1  void Get_Descriptor(void);
 180      =1  void Get_Configuration(void);
 181      =1  void Set_Configuration(void);
 182      =1  void Get_Interface(void);
 183      =1  void Set_Interface(void);
 184      =1  
 185      =1  // MSD Specific Requests
 186      =1  // void Reset_Msd(void);
 187      =1  // void Get_MaxLUN(void);
 188      =1  
 189      =1  // Initialization Routines
 190      =1  void Sys_Clk_Init(void);                      // Initialize the sy
             -stem clock(depends on Full/Low speed)
 191      =1  void Port_Init(void);                        // Configure ports fo
             -r this specific application
 192      =1  void USB0_Init(void);                        // Configure USB core
             - for either Full/Low speed
 193      =1  void Timer_Init(void);                       // Start timer 2 for 
             -use by ADC and to check switches
 194      =1  void Adc_Init(void);                         // Configure ADC for 
             -continuous conversion, low-power mode
 195      =1  
 196      =1  // Other Routines
 197      =1  void Timer2_ISR(void);                       // Called when Timer 
             -2 overflows, see if switches are pressed
 198      =1  void Adc_ConvComple_ISR(void);               // When a conversion 
             -completes, switch ADC multiplexor
 199      =1  void USB_ISR(void);                          // Called to determin
             -e type of USB interrupt
 200      =1  void Fifo_ReadC(BYTE, unsigned int, BYTE *) ;
 201      =1  extern void Fifo_Read (BYTE, unsigned int, BYTE *) ; // Used for m
             -ultiple byte reads of Endpoint fifos
 202      =1  extern void Fifo_Write (BYTE, unsigned int, BYTE *) reentrant;// U
             -sed for multiple byte writes of Endpoint fifos
 203      =1  void Force_Stall(void);                      // Forces a procedura
             -l stall on Endpoint 0
 204      =1  void Delay(void);                            // Approximately 80 u
             -s/1 ms on Full/Low Speed
 205      =1  
 206      =1  void USB_In(BYTE* ptr_buf,unsigned count);
 207      =1  
 208      =1  void USB_Bulk_Init(void);
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 14  

 209      =1  
 210      =1  extern unsigned xdata Out_Count;
 211      =1  extern BYTE xdata Out_Packet[EP2_PACKET_SIZE];
 212      =1  extern BYTE xdata In_count;
 213      =1  extern BYTE xdata In_Packet[EP1_PACKET_SIZE];
 214      =1  //extern BYTE xdata In_Overrun;
 215      =1  
 216      =1  #endif      /* _USB_MAIN_H_ */
 217      =1  
  41          #include "F34x_MSD_Msd.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_MMC.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_MMC.c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000047
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef _MSD_H_
  32      =1  #define _MSD_H_
  33      =1  
  34      =1  #include "F34x_MSD_USB_Main.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_USB_Main.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Main header file for USB firmware. Includes function prototypes
             -,
  10      =2  // standard constants, and configuration constants.//
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 15  

  11      =2  //
  12      =2  // FID:            34X000063
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -No changes; incremented revision number to match project re
             -vision
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  // 11/22/02 - DM: 1. Updated function prototypes and added constan
             -ts
  27      =2  //                to F34x_USB_Main.h with sample interrupt firmwar
             -e.
  28      =2  
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  // Header File Preprocessor Directive
  31      =2  //----------------------------------------------------------------
             --------------
  32      =2  
  33      =2  #ifndef _USB_MAIN_H_
           =2 #define _USB_MAIN_H_
           =2 
           =2 #include "F34x_MSD_Definitions.h"
           =2 //#define _USB_LOW_SPEED_                      // Change this comm
             -ent to make Full/Low speed
           =2 
           =2 #define SYSCLK                   12000000    // SYSCLK frequency i
             -n Hz
           =2 
           =2 // USB clock selections (SFR CLKSEL)
           =2 #define USB_4X_CLOCK             0x00        // Select 4x clock mu
             -ltiplier, for USB Full Speed
           =2 #define USB_INT_OSC_DIV_2        0x10        // See Data Sheet sec
             -tion 13. Oscillators
           =2 #define USB_EXT_OSC              0x20
           =2 #define USB_EXT_OSC_DIV_2        0x30
           =2 #define USB_EXT_OSC_DIV_3        0x40
           =2 #define USB_EXT_OSC_DIV_4        0x50
           =2 
           =2 // System clock selections (SFR CLKSEL)
           =2 #define SYS_INT_OSC              0x00        // Select to use inte
             -rnal oscillator
           =2 #define SYS_4X_MUL               0x03        // Select to use inte
             -rnal oscillator
           =2 #define SYS_EXT_OSC              0x01        // Select to use an e
             -xternal oscillator
           =2 #define SYS_4X_DIV_2             0x02
           =2 
           =2 // BYTE type definition
           =2 #ifndef _BYTE_DEF_
           =2 #define _BYTE_DEF_
           =2 typedef unsigned char BYTE;
           =2 #endif   /* _BYTE_DEF_ */
           =2 
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 16  

           =2 // WORD type definition, for KEIL Compiler
           =2 #ifndef _WORD_DEF_                           // Compiler Specific,
             - written for Little Endian
           =2 #define _WORD_DEF_
           =2 typedef union {unsigned int i; unsigned char c[2];} WORD;
           =2 #define LSB 1                                // All words sent to 
             -and received from the host are
           =2 #define MSB 0                                // little endian, thi
             -s is switched by software when
           =2                                              // neccessary.  These
             - sections of code have been marked
           =2                                                                                          // with "Compiler Specific" as above for easier modifi
             -cation
           =2 #endif   /* _WORD_DEF_ */
           =2 
           =2 // DWORD type definition
           =2 #ifndef _DWORD_DEF_
           =2 #define _DWORD_DEF_
           =2 typedef unsigned long DWORD;
           =2 #endif /* _DWORD_DEF_ */
           =2 
           =2 extern volatile DWORD xdata tickcount;
           =2 
           =2 // Define Endpoint Packet Sizes
           =2 #ifdef _USB_LOW_SPEED_
           =2 #define  EP0_PACKET_SIZE         0x40        // This value can be 
             -8,16,32,64 depending on device speed, see USB spec
           =2 #else
           =2 #define  EP0_PACKET_SIZE         0x40
           =2 #endif /* _USB_LOW_SPEED_ */ 
           =2 
           =2 #define  EP1_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type  
           =2 #define  EP1_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP1_PACKET_SIZE
           =2 #define  EP2_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type
           =2 #define  EP2_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP2_PACKET_SIZE
           =2 
           =2 // Standard Descriptor Types
           =2 #define  DSC_DEVICE              0x01        // Device Descriptor
           =2 #define  DSC_CONFIG              0x02        // Configuration Desc
             -riptor
           =2 #define  DSC_STRING              0x03        // String Descriptor
           =2 #define  DSC_INTERFACE           0x04        // Interface Descript
             -or
           =2 #define  DSC_ENDPOINT            0x05        // Endpoint Descripto
             -r
           =2 
           =2 // HID Descriptor Types
           =2 #define DSC_HID                                 0x21            // HID Class Descriptor
           =2 #define DSC_HID_REPORT                  0x22            // HID Report Descriptor
           =2 
           =2 // Standard Request Codes
           =2 #define  GET_STATUS             0x00        // Code for Get Status
           =2 #define  CLEAR_FEATURE          0x01        // Code for Clear Feat
             -ure
           =2 #define  SET_FEATURE            0x03        // Code for Set Featur
             -e
           =2 #define  SET_ADDRESS            0x05        // Code for Set Addres
             -s
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 17  

           =2 #define  GET_DESCRIPTOR         0x06        // Code for Get Descri
             -ptor
           =2 #define  SET_DESCRIPTOR         0x07        // Code for Set Descri
             -ptor(not used)
           =2 #define  GET_CONFIGURATION      0x08        // Code for Get Config
             -uration
           =2 #define  SET_CONFIGURATION      0x09        // Code for Set Config
             -uration
           =2 #define  GET_INTERFACE          0x0A        // Code for Get Interf
             -ace
           =2 #define  SET_INTERFACE          0x0B        // Code for Set Interf
             -ace
           =2 #define  SYNCH_FRAME            0x0C        // Code for Synch Fram
             -e(not used)
           =2 #define  MSD_RESET                              0xFF            // Mass-storage device Reset
           =2 #define  MSD_GET_MAX_LUN                0xFE            // Mass-storage device Get Max LU
             -N
           =2 
           =2 // HID Request Codes
           =2 #define GET_REPORT                              0x01            // Code for Get Report
           =2 #define GET_IDLE                                0x02            // Code for Get Idle
           =2 #define GET_PROTOCOL                    0x03            // Code for Get Protocol
           =2 #define SET_REPORT                              0x09            // Code for Set Report
           =2 #define SET_IDLE                                0x0A            // Code for Set Idle
           =2 #define SET_PROTOCOL                    0x0B            // Code for Set Protocol
           =2 
           =2 // Define device states
           =2 #define  DEV_ATTACHED            0x00        // Device is in Attac
             -hed State
           =2 #define  DEV_POWERED             0x01        // Device is in Power
             -ed State
           =2 #define  DEV_DEFAULT             0x02        // Device is in Defau
             -lt State
           =2 #define  DEV_ADDRESS             0x03        // Device is in Addre
             -ssed State
           =2 #define  DEV_CONFIGURED          0x04        // Device is in Confi
             -gured State
           =2 #define  DEV_SUSPENDED           0x05        // Device is in Suspe
             -nded State
           =2 
           =2 // Define bmRequestType bitmaps
           =2 #define  IN_DEVICE               0x00        // Request made to de
             -vice, direction is IN 
           =2 #define  OUT_DEVICE              0x80        // Request made to de
             -vice, direction is OUT
           =2 #define  IN_INTERFACE            0x01        // Request made to in
             -terface, direction is IN
           =2 #define  OUT_INTERFACE           0x81        // Request made to in
             -terface, direction is OUT
           =2 #define  IN_ENDPOINT             0x02        // Request made to en
             -dpoint, direction is IN
           =2 #define  OUT_ENDPOINT            0x82        // Request made to en
             -dpoint, direction is OUT
           =2 
           =2 // Define wIndex bitmaps
           =2 #define  IN_EP1                  0x81        // Index values used 
             -by Set and Clear feature
           =2 #define  OUT_EP1                 0x01        // commands for Endpo
             -int_Halt
           =2 #define  IN_EP2                  0x82
           =2 #ifdef __F326_VER__
           =2 #define  OUT_EP2                                 0x01           
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 18  

           =2 #else
           =2 #define  OUT_EP2                                 0x01           
           =2 #endif
           =2 
           =2 // Define wValue bitmaps for Standard Feature Selectors
           =2 #define  DEVICE_REMOTE_WAKEUP    0x01        // Remote wakeup feat
             -ure(not used)
           =2 #define  ENDPOINT_HALT           0x00        // Endpoint_Halt feat
             -ure selector
           =2 
           =2 // Define Endpoint States
           =2 #define  EP_IDLE                 0x00        // This signifies End
             -point Idle State
           =2 #define  EP_TX                   0x01        // Endpoint Transmit 
             -State
           =2 #define  EP_RX                   0x02        // Endpoint Receive S
             -tate
           =2 #define  EP_HALT                 0x03        // Endpoint Halt Stat
             -e (return stalls)
           =2 #define  EP_STALL                0x04        // Endpoint Stall (se
             -nd procedural stall next status phase)
           =2 #define  EP_ADDRESS              0x05        // Endpoint Address (
             -change FADDR during next status phase)
           =2 
           =2 // Function prototypes
           =2 // USB Routines
           =2 void USB_Resume(void);                       // This routine resum
             -es USB operation
           =2 void USB_Reset(void);                        // Called after USB b
             -us reset
           =2 void Handle_Setup(void);                     // Handle setup packe
             -t on Endpoint 0
           =2 void Handle_In1(BYTE* ptr_buf);                       // Handle in
             - packet on Endpoint 1
           =2 void Handle_Out2(void);                      // Handle out packet 
             -on Endpoint 2
           =2 void USB_Suspend(void);                      // This routine calle
             -d when suspend signalling on bus
           =2 void Out2_Get_Data(BYTE* ptr_buf);                               // Copies from FIFO to ptr_
             -buf, clears FIFO-full flag.
           =2 void Out2_Done(void);                                            // Call this when finished with the d
             -ata
           =2 
           =2 // Standard Requests
           =2 void Get_Status(void);                       // These are called f
             -or each specific standard request
           =2 void Clear_Feature(void);
           =2 void Set_Feature(void);
           =2 void Set_Address(void);
           =2 void Get_Descriptor(void);
           =2 void Get_Configuration(void);
           =2 void Set_Configuration(void);
           =2 void Get_Interface(void);
           =2 void Set_Interface(void);
           =2 
           =2 // MSD Specific Requests
           =2 // void Reset_Msd(void);
           =2 // void Get_MaxLUN(void);
           =2 
           =2 // Initialization Routines
           =2 void Sys_Clk_Init(void);                      // Initialize the sy
             -stem clock(depends on Full/Low speed)
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 19  

           =2 void Port_Init(void);                        // Configure ports fo
             -r this specific application
           =2 void USB0_Init(void);                        // Configure USB core
             - for either Full/Low speed
           =2 void Timer_Init(void);                       // Start timer 2 for 
             -use by ADC and to check switches
           =2 void Adc_Init(void);                         // Configure ADC for 
             -continuous conversion, low-power mode
           =2 
           =2 // Other Routines
           =2 void Timer2_ISR(void);                       // Called when Timer 
             -2 overflows, see if switches are pressed
           =2 void Adc_ConvComple_ISR(void);               // When a conversion 
             -completes, switch ADC multiplexor
           =2 void USB_ISR(void);                          // Called to determin
             -e type of USB interrupt
           =2 void Fifo_ReadC(BYTE, unsigned int, BYTE *) ;
           =2 extern void Fifo_Read (BYTE, unsigned int, BYTE *) ; // Used for m
             -ultiple byte reads of Endpoint fifos
           =2 extern void Fifo_Write (BYTE, unsigned int, BYTE *) reentrant;// U
             -sed for multiple byte writes of Endpoint fifos
           =2 void Force_Stall(void);                      // Forces a procedura
             -l stall on Endpoint 0
           =2 void Delay(void);                            // Approximately 80 u
             -s/1 ms on Full/Low Speed
           =2 
           =2 void USB_In(BYTE* ptr_buf,unsigned count);
           =2 
           =2 void USB_Bulk_Init(void);
           =2 
           =2 extern unsigned xdata Out_Count;
           =2 extern BYTE xdata Out_Packet[EP2_PACKET_SIZE];
           =2 extern BYTE xdata In_count;
           =2 extern BYTE xdata In_Packet[EP1_PACKET_SIZE];
           =2 //extern BYTE xdata In_Overrun;
           =2 
           =2 #endif      /* _USB_MAIN_H_ */
 217      =2  
  35      =1  
  36      =1  //----------------------------------------------------------------
             --------------
  37      =1  // Structure Prototypes
  38      =1  //----------------------------------------------------------------
             --------------
  39      =1  
  40      =1  typedef struct _CBW {
  41      =1          DWORD dCBWSignature;
  42      =1          DWORD dCBWTag;
  43      =1          DWORD dCBWDataTransferLength;
  44      =1          BYTE  bmCBWFlags;
  45      =1          BYTE  bCBWLUN;
  46      =1          BYTE  bCBWCBLength;
  47      =1          BYTE  CBWCB[16];
  48      =1  } CBW;
  49      =1  
  50      =1  typedef struct _CSW {
  51      =1          DWORD dCSWSignature;
  52      =1          DWORD dCSWTag;
  53      =1          DWORD dCSWDataResidue;
  54      =1          BYTE  bCSWStatus;
  55      =1  } CSW;
  56      =1  
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 20  

  57      =1  extern CBW xdata cbw;
  58      =1  extern CSW xdata csw;
  59      =1  
  60      =1  //----------------------------------------------------------------
             --------------
  61      =1  // Function Prototypes
  62      =1  //----------------------------------------------------------------
             --------------
  63      =1  
  64      =1  void Msd_Step(void);
  65      =1  
  66      =1  #endif
  42          #include "F34x_MSD_Scsi.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Scsi.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_Scsi.c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000052
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef _SCSI_H_
  32      =1  #define _SCSI_H_
  33      =1  
  34      =1  #include "F34x_MSD_USB_Main.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_USB_Main.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 21  

   9      =2  // Main header file for USB firmware. Includes function prototypes
             -,
  10      =2  // standard constants, and configuration constants.//
  11      =2  //
  12      =2  // FID:            34X000063
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -No changes; incremented revision number to match project re
             -vision
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  // 11/22/02 - DM: 1. Updated function prototypes and added constan
             -ts
  27      =2  //                to F34x_USB_Main.h with sample interrupt firmwar
             -e.
  28      =2  
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  // Header File Preprocessor Directive
  31      =2  //----------------------------------------------------------------
             --------------
  32      =2  
  33      =2  #ifndef _USB_MAIN_H_
           =2 #define _USB_MAIN_H_
           =2 
           =2 #include "F34x_MSD_Definitions.h"
           =2 //#define _USB_LOW_SPEED_                      // Change this comm
             -ent to make Full/Low speed
           =2 
           =2 #define SYSCLK                   12000000    // SYSCLK frequency i
             -n Hz
           =2 
           =2 // USB clock selections (SFR CLKSEL)
           =2 #define USB_4X_CLOCK             0x00        // Select 4x clock mu
             -ltiplier, for USB Full Speed
           =2 #define USB_INT_OSC_DIV_2        0x10        // See Data Sheet sec
             -tion 13. Oscillators
           =2 #define USB_EXT_OSC              0x20
           =2 #define USB_EXT_OSC_DIV_2        0x30
           =2 #define USB_EXT_OSC_DIV_3        0x40
           =2 #define USB_EXT_OSC_DIV_4        0x50
           =2 
           =2 // System clock selections (SFR CLKSEL)
           =2 #define SYS_INT_OSC              0x00        // Select to use inte
             -rnal oscillator
           =2 #define SYS_4X_MUL               0x03        // Select to use inte
             -rnal oscillator
           =2 #define SYS_EXT_OSC              0x01        // Select to use an e
             -xternal oscillator
           =2 #define SYS_4X_DIV_2             0x02
           =2 
           =2 // BYTE type definition
           =2 #ifndef _BYTE_DEF_
           =2 #define _BYTE_DEF_
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 22  

           =2 typedef unsigned char BYTE;
           =2 #endif   /* _BYTE_DEF_ */
           =2 
           =2 // WORD type definition, for KEIL Compiler
           =2 #ifndef _WORD_DEF_                           // Compiler Specific,
             - written for Little Endian
           =2 #define _WORD_DEF_
           =2 typedef union {unsigned int i; unsigned char c[2];} WORD;
           =2 #define LSB 1                                // All words sent to 
             -and received from the host are
           =2 #define MSB 0                                // little endian, thi
             -s is switched by software when
           =2                                              // neccessary.  These
             - sections of code have been marked
           =2                                                                                          // with "Compiler Specific" as above for easier modifi
             -cation
           =2 #endif   /* _WORD_DEF_ */
           =2 
           =2 // DWORD type definition
           =2 #ifndef _DWORD_DEF_
           =2 #define _DWORD_DEF_
           =2 typedef unsigned long DWORD;
           =2 #endif /* _DWORD_DEF_ */
           =2 
           =2 extern volatile DWORD xdata tickcount;
           =2 
           =2 // Define Endpoint Packet Sizes
           =2 #ifdef _USB_LOW_SPEED_
           =2 #define  EP0_PACKET_SIZE         0x40        // This value can be 
             -8,16,32,64 depending on device speed, see USB spec
           =2 #else
           =2 #define  EP0_PACKET_SIZE         0x40
           =2 #endif /* _USB_LOW_SPEED_ */ 
           =2 
           =2 #define  EP1_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type  
           =2 #define  EP1_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP1_PACKET_SIZE
           =2 #define  EP2_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type
           =2 #define  EP2_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP2_PACKET_SIZE
           =2 
           =2 // Standard Descriptor Types
           =2 #define  DSC_DEVICE              0x01        // Device Descriptor
           =2 #define  DSC_CONFIG              0x02        // Configuration Desc
             -riptor
           =2 #define  DSC_STRING              0x03        // String Descriptor
           =2 #define  DSC_INTERFACE           0x04        // Interface Descript
             -or
           =2 #define  DSC_ENDPOINT            0x05        // Endpoint Descripto
             -r
           =2 
           =2 // HID Descriptor Types
           =2 #define DSC_HID                                 0x21            // HID Class Descriptor
           =2 #define DSC_HID_REPORT                  0x22            // HID Report Descriptor
           =2 
           =2 // Standard Request Codes
           =2 #define  GET_STATUS             0x00        // Code for Get Status
           =2 #define  CLEAR_FEATURE          0x01        // Code for Clear Feat
             -ure
           =2 #define  SET_FEATURE            0x03        // Code for Set Featur
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 23  

             -e
           =2 #define  SET_ADDRESS            0x05        // Code for Set Addres
             -s
           =2 #define  GET_DESCRIPTOR         0x06        // Code for Get Descri
             -ptor
           =2 #define  SET_DESCRIPTOR         0x07        // Code for Set Descri
             -ptor(not used)
           =2 #define  GET_CONFIGURATION      0x08        // Code for Get Config
             -uration
           =2 #define  SET_CONFIGURATION      0x09        // Code for Set Config
             -uration
           =2 #define  GET_INTERFACE          0x0A        // Code for Get Interf
             -ace
           =2 #define  SET_INTERFACE          0x0B        // Code for Set Interf
             -ace
           =2 #define  SYNCH_FRAME            0x0C        // Code for Synch Fram
             -e(not used)
           =2 #define  MSD_RESET                              0xFF            // Mass-storage device Reset
           =2 #define  MSD_GET_MAX_LUN                0xFE            // Mass-storage device Get Max LU
             -N
           =2 
           =2 // HID Request Codes
           =2 #define GET_REPORT                              0x01            // Code for Get Report
           =2 #define GET_IDLE                                0x02            // Code for Get Idle
           =2 #define GET_PROTOCOL                    0x03            // Code for Get Protocol
           =2 #define SET_REPORT                              0x09            // Code for Set Report
           =2 #define SET_IDLE                                0x0A            // Code for Set Idle
           =2 #define SET_PROTOCOL                    0x0B            // Code for Set Protocol
           =2 
           =2 // Define device states
           =2 #define  DEV_ATTACHED            0x00        // Device is in Attac
             -hed State
           =2 #define  DEV_POWERED             0x01        // Device is in Power
             -ed State
           =2 #define  DEV_DEFAULT             0x02        // Device is in Defau
             -lt State
           =2 #define  DEV_ADDRESS             0x03        // Device is in Addre
             -ssed State
           =2 #define  DEV_CONFIGURED          0x04        // Device is in Confi
             -gured State
           =2 #define  DEV_SUSPENDED           0x05        // Device is in Suspe
             -nded State
           =2 
           =2 // Define bmRequestType bitmaps
           =2 #define  IN_DEVICE               0x00        // Request made to de
             -vice, direction is IN 
           =2 #define  OUT_DEVICE              0x80        // Request made to de
             -vice, direction is OUT
           =2 #define  IN_INTERFACE            0x01        // Request made to in
             -terface, direction is IN
           =2 #define  OUT_INTERFACE           0x81        // Request made to in
             -terface, direction is OUT
           =2 #define  IN_ENDPOINT             0x02        // Request made to en
             -dpoint, direction is IN
           =2 #define  OUT_ENDPOINT            0x82        // Request made to en
             -dpoint, direction is OUT
           =2 
           =2 // Define wIndex bitmaps
           =2 #define  IN_EP1                  0x81        // Index values used 
             -by Set and Clear feature
           =2 #define  OUT_EP1                 0x01        // commands for Endpo
             -int_Halt
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 24  

           =2 #define  IN_EP2                  0x82
           =2 #ifdef __F326_VER__
           =2 #define  OUT_EP2                                 0x01           
           =2 #else
           =2 #define  OUT_EP2                                 0x01           
           =2 #endif
           =2 
           =2 // Define wValue bitmaps for Standard Feature Selectors
           =2 #define  DEVICE_REMOTE_WAKEUP    0x01        // Remote wakeup feat
             -ure(not used)
           =2 #define  ENDPOINT_HALT           0x00        // Endpoint_Halt feat
             -ure selector
           =2 
           =2 // Define Endpoint States
           =2 #define  EP_IDLE                 0x00        // This signifies End
             -point Idle State
           =2 #define  EP_TX                   0x01        // Endpoint Transmit 
             -State
           =2 #define  EP_RX                   0x02        // Endpoint Receive S
             -tate
           =2 #define  EP_HALT                 0x03        // Endpoint Halt Stat
             -e (return stalls)
           =2 #define  EP_STALL                0x04        // Endpoint Stall (se
             -nd procedural stall next status phase)
           =2 #define  EP_ADDRESS              0x05        // Endpoint Address (
             -change FADDR during next status phase)
           =2 
           =2 // Function prototypes
           =2 // USB Routines
           =2 void USB_Resume(void);                       // This routine resum
             -es USB operation
           =2 void USB_Reset(void);                        // Called after USB b
             -us reset
           =2 void Handle_Setup(void);                     // Handle setup packe
             -t on Endpoint 0
           =2 void Handle_In1(BYTE* ptr_buf);                       // Handle in
             - packet on Endpoint 1
           =2 void Handle_Out2(void);                      // Handle out packet 
             -on Endpoint 2
           =2 void USB_Suspend(void);                      // This routine calle
             -d when suspend signalling on bus
           =2 void Out2_Get_Data(BYTE* ptr_buf);                               // Copies from FIFO to ptr_
             -buf, clears FIFO-full flag.
           =2 void Out2_Done(void);                                            // Call this when finished with the d
             -ata
           =2 
           =2 // Standard Requests
           =2 void Get_Status(void);                       // These are called f
             -or each specific standard request
           =2 void Clear_Feature(void);
           =2 void Set_Feature(void);
           =2 void Set_Address(void);
           =2 void Get_Descriptor(void);
           =2 void Get_Configuration(void);
           =2 void Set_Configuration(void);
           =2 void Get_Interface(void);
           =2 void Set_Interface(void);
           =2 
           =2 // MSD Specific Requests
           =2 // void Reset_Msd(void);
           =2 // void Get_MaxLUN(void);
           =2 
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 25  

           =2 // Initialization Routines
           =2 void Sys_Clk_Init(void);                      // Initialize the sy
             -stem clock(depends on Full/Low speed)
           =2 void Port_Init(void);                        // Configure ports fo
             -r this specific application
           =2 void USB0_Init(void);                        // Configure USB core
             - for either Full/Low speed
           =2 void Timer_Init(void);                       // Start timer 2 for 
             -use by ADC and to check switches
           =2 void Adc_Init(void);                         // Configure ADC for 
             -continuous conversion, low-power mode
           =2 
           =2 // Other Routines
           =2 void Timer2_ISR(void);                       // Called when Timer 
             -2 overflows, see if switches are pressed
           =2 void Adc_ConvComple_ISR(void);               // When a conversion 
             -completes, switch ADC multiplexor
           =2 void USB_ISR(void);                          // Called to determin
             -e type of USB interrupt
           =2 void Fifo_ReadC(BYTE, unsigned int, BYTE *) ;
           =2 extern void Fifo_Read (BYTE, unsigned int, BYTE *) ; // Used for m
             -ultiple byte reads of Endpoint fifos
           =2 extern void Fifo_Write (BYTE, unsigned int, BYTE *) reentrant;// U
             -sed for multiple byte writes of Endpoint fifos
           =2 void Force_Stall(void);                      // Forces a procedura
             -l stall on Endpoint 0
           =2 void Delay(void);                            // Approximately 80 u
             -s/1 ms on Full/Low Speed
           =2 
           =2 void USB_In(BYTE* ptr_buf,unsigned count);
           =2 
           =2 void USB_Bulk_Init(void);
           =2 
           =2 extern unsigned xdata Out_Count;
           =2 extern BYTE xdata Out_Packet[EP2_PACKET_SIZE];
           =2 extern BYTE xdata In_count;
           =2 extern BYTE xdata In_Packet[EP1_PACKET_SIZE];
           =2 //extern BYTE xdata In_Overrun;
           =2 
           =2 #endif      /* _USB_MAIN_H_ */
 217      =2  
  35      =1  
  36      =1  #define SCSI_PASSED             0
  37      =1  #define SCSI_FAILED             1
  38      =1  #define SCSI_PHASE_ERROR        2
  39      =1  
  40      =1  //----------------------------------------------------------------
             --------------
  41      =1  // Function Prototypes
  42      =1  //----------------------------------------------------------------
             --------------
  43      =1  
  44      =1  void Scsi_Rx(void);
  45      =1  
  46      =1  extern BYTE xdata Scsi_Status;
  47      =1  extern DWORD xdata Scsi_Residue;
  48      =1  
  49      =1  #endif
  43          #include "F34x_MSD_Util.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Util.h
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 26  

   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file for F34x_Util.h. It contains functions and variable
             -s 
  10      =1  // prototypes.
  11      =1  //
  12      =1  //
  13      =1  // FID:            34X000068
  14      =1  // Target:         C8051F34x
  15      =1  // Tool chain:     Keil
  16      =1  // Command Line:   See Readme.txt
  17      =1  // Project Name:   F34x_USB_MSD
  18      =1  //
  19      =1  // Release 1.1
  20      =1  //    -All changes by PKC
  21      =1  //    -09 JUN 2006
  22      =1  //    -No changes; incremented revision number to match project re
             -vision
  23      =1  //
  24      =1  // Release 1.0
  25      =1  //    -Initial Release
  26      =1  //
  27      =1  
  28      =1  //----------------------------------------------------------------
             --------------
  29      =1  // Header File Preprocessor Directive
  30      =1  //----------------------------------------------------------------
             --------------
  31      =1  
  32      =1  #ifndef _UTIL_H_
  33      =1  #define _UTIL_H_
  34      =1  
  35      =1  #include "F34x_MSD_USB_Main.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_USB_Main.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Main header file for USB firmware. Includes function prototypes
             -,
  10      =2  // standard constants, and configuration constants.//
  11      =2  //
  12      =2  // FID:            34X000063
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -No changes; incremented revision number to match project re
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 27  

             -vision
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  // 11/22/02 - DM: 1. Updated function prototypes and added constan
             -ts
  27      =2  //                to F34x_USB_Main.h with sample interrupt firmwar
             -e.
  28      =2  
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  // Header File Preprocessor Directive
  31      =2  //----------------------------------------------------------------
             --------------
  32      =2  
  33      =2  #ifndef _USB_MAIN_H_
           =2 #define _USB_MAIN_H_
           =2 
           =2 #include "F34x_MSD_Definitions.h"
           =2 //#define _USB_LOW_SPEED_                      // Change this comm
             -ent to make Full/Low speed
           =2 
           =2 #define SYSCLK                   12000000    // SYSCLK frequency i
             -n Hz
           =2 
           =2 // USB clock selections (SFR CLKSEL)
           =2 #define USB_4X_CLOCK             0x00        // Select 4x clock mu
             -ltiplier, for USB Full Speed
           =2 #define USB_INT_OSC_DIV_2        0x10        // See Data Sheet sec
             -tion 13. Oscillators
           =2 #define USB_EXT_OSC              0x20
           =2 #define USB_EXT_OSC_DIV_2        0x30
           =2 #define USB_EXT_OSC_DIV_3        0x40
           =2 #define USB_EXT_OSC_DIV_4        0x50
           =2 
           =2 // System clock selections (SFR CLKSEL)
           =2 #define SYS_INT_OSC              0x00        // Select to use inte
             -rnal oscillator
           =2 #define SYS_4X_MUL               0x03        // Select to use inte
             -rnal oscillator
           =2 #define SYS_EXT_OSC              0x01        // Select to use an e
             -xternal oscillator
           =2 #define SYS_4X_DIV_2             0x02
           =2 
           =2 // BYTE type definition
           =2 #ifndef _BYTE_DEF_
           =2 #define _BYTE_DEF_
           =2 typedef unsigned char BYTE;
           =2 #endif   /* _BYTE_DEF_ */
           =2 
           =2 // WORD type definition, for KEIL Compiler
           =2 #ifndef _WORD_DEF_                           // Compiler Specific,
             - written for Little Endian
           =2 #define _WORD_DEF_
           =2 typedef union {unsigned int i; unsigned char c[2];} WORD;
           =2 #define LSB 1                                // All words sent to 
             -and received from the host are
           =2 #define MSB 0                                // little endian, thi
             -s is switched by software when
           =2                                              // neccessary.  These
             - sections of code have been marked
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 28  

           =2                                                                                          // with "Compiler Specific" as above for easier modifi
             -cation
           =2 #endif   /* _WORD_DEF_ */
           =2 
           =2 // DWORD type definition
           =2 #ifndef _DWORD_DEF_
           =2 #define _DWORD_DEF_
           =2 typedef unsigned long DWORD;
           =2 #endif /* _DWORD_DEF_ */
           =2 
           =2 extern volatile DWORD xdata tickcount;
           =2 
           =2 // Define Endpoint Packet Sizes
           =2 #ifdef _USB_LOW_SPEED_
           =2 #define  EP0_PACKET_SIZE         0x40        // This value can be 
             -8,16,32,64 depending on device speed, see USB spec
           =2 #else
           =2 #define  EP0_PACKET_SIZE         0x40
           =2 #endif /* _USB_LOW_SPEED_ */ 
           =2 
           =2 #define  EP1_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type  
           =2 #define  EP1_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP1_PACKET_SIZE
           =2 #define  EP2_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type
           =2 #define  EP2_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP2_PACKET_SIZE
           =2 
           =2 // Standard Descriptor Types
           =2 #define  DSC_DEVICE              0x01        // Device Descriptor
           =2 #define  DSC_CONFIG              0x02        // Configuration Desc
             -riptor
           =2 #define  DSC_STRING              0x03        // String Descriptor
           =2 #define  DSC_INTERFACE           0x04        // Interface Descript
             -or
           =2 #define  DSC_ENDPOINT            0x05        // Endpoint Descripto
             -r
           =2 
           =2 // HID Descriptor Types
           =2 #define DSC_HID                                 0x21            // HID Class Descriptor
           =2 #define DSC_HID_REPORT                  0x22            // HID Report Descriptor
           =2 
           =2 // Standard Request Codes
           =2 #define  GET_STATUS             0x00        // Code for Get Status
           =2 #define  CLEAR_FEATURE          0x01        // Code for Clear Feat
             -ure
           =2 #define  SET_FEATURE            0x03        // Code for Set Featur
             -e
           =2 #define  SET_ADDRESS            0x05        // Code for Set Addres
             -s
           =2 #define  GET_DESCRIPTOR         0x06        // Code for Get Descri
             -ptor
           =2 #define  SET_DESCRIPTOR         0x07        // Code for Set Descri
             -ptor(not used)
           =2 #define  GET_CONFIGURATION      0x08        // Code for Get Config
             -uration
           =2 #define  SET_CONFIGURATION      0x09        // Code for Set Config
             -uration
           =2 #define  GET_INTERFACE          0x0A        // Code for Get Interf
             -ace
           =2 #define  SET_INTERFACE          0x0B        // Code for Set Interf
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 29  

             -ace
           =2 #define  SYNCH_FRAME            0x0C        // Code for Synch Fram
             -e(not used)
           =2 #define  MSD_RESET                              0xFF            // Mass-storage device Reset
           =2 #define  MSD_GET_MAX_LUN                0xFE            // Mass-storage device Get Max LU
             -N
           =2 
           =2 // HID Request Codes
           =2 #define GET_REPORT                              0x01            // Code for Get Report
           =2 #define GET_IDLE                                0x02            // Code for Get Idle
           =2 #define GET_PROTOCOL                    0x03            // Code for Get Protocol
           =2 #define SET_REPORT                              0x09            // Code for Set Report
           =2 #define SET_IDLE                                0x0A            // Code for Set Idle
           =2 #define SET_PROTOCOL                    0x0B            // Code for Set Protocol
           =2 
           =2 // Define device states
           =2 #define  DEV_ATTACHED            0x00        // Device is in Attac
             -hed State
           =2 #define  DEV_POWERED             0x01        // Device is in Power
             -ed State
           =2 #define  DEV_DEFAULT             0x02        // Device is in Defau
             -lt State
           =2 #define  DEV_ADDRESS             0x03        // Device is in Addre
             -ssed State
           =2 #define  DEV_CONFIGURED          0x04        // Device is in Confi
             -gured State
           =2 #define  DEV_SUSPENDED           0x05        // Device is in Suspe
             -nded State
           =2 
           =2 // Define bmRequestType bitmaps
           =2 #define  IN_DEVICE               0x00        // Request made to de
             -vice, direction is IN 
           =2 #define  OUT_DEVICE              0x80        // Request made to de
             -vice, direction is OUT
           =2 #define  IN_INTERFACE            0x01        // Request made to in
             -terface, direction is IN
           =2 #define  OUT_INTERFACE           0x81        // Request made to in
             -terface, direction is OUT
           =2 #define  IN_ENDPOINT             0x02        // Request made to en
             -dpoint, direction is IN
           =2 #define  OUT_ENDPOINT            0x82        // Request made to en
             -dpoint, direction is OUT
           =2 
           =2 // Define wIndex bitmaps
           =2 #define  IN_EP1                  0x81        // Index values used 
             -by Set and Clear feature
           =2 #define  OUT_EP1                 0x01        // commands for Endpo
             -int_Halt
           =2 #define  IN_EP2                  0x82
           =2 #ifdef __F326_VER__
           =2 #define  OUT_EP2                                 0x01           
           =2 #else
           =2 #define  OUT_EP2                                 0x01           
           =2 #endif
           =2 
           =2 // Define wValue bitmaps for Standard Feature Selectors
           =2 #define  DEVICE_REMOTE_WAKEUP    0x01        // Remote wakeup feat
             -ure(not used)
           =2 #define  ENDPOINT_HALT           0x00        // Endpoint_Halt feat
             -ure selector
           =2 
           =2 // Define Endpoint States
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 30  

           =2 #define  EP_IDLE                 0x00        // This signifies End
             -point Idle State
           =2 #define  EP_TX                   0x01        // Endpoint Transmit 
             -State
           =2 #define  EP_RX                   0x02        // Endpoint Receive S
             -tate
           =2 #define  EP_HALT                 0x03        // Endpoint Halt Stat
             -e (return stalls)
           =2 #define  EP_STALL                0x04        // Endpoint Stall (se
             -nd procedural stall next status phase)
           =2 #define  EP_ADDRESS              0x05        // Endpoint Address (
             -change FADDR during next status phase)
           =2 
           =2 // Function prototypes
           =2 // USB Routines
           =2 void USB_Resume(void);                       // This routine resum
             -es USB operation
           =2 void USB_Reset(void);                        // Called after USB b
             -us reset
           =2 void Handle_Setup(void);                     // Handle setup packe
             -t on Endpoint 0
           =2 void Handle_In1(BYTE* ptr_buf);                       // Handle in
             - packet on Endpoint 1
           =2 void Handle_Out2(void);                      // Handle out packet 
             -on Endpoint 2
           =2 void USB_Suspend(void);                      // This routine calle
             -d when suspend signalling on bus
           =2 void Out2_Get_Data(BYTE* ptr_buf);                               // Copies from FIFO to ptr_
             -buf, clears FIFO-full flag.
           =2 void Out2_Done(void);                                            // Call this when finished with the d
             -ata
           =2 
           =2 // Standard Requests
           =2 void Get_Status(void);                       // These are called f
             -or each specific standard request
           =2 void Clear_Feature(void);
           =2 void Set_Feature(void);
           =2 void Set_Address(void);
           =2 void Get_Descriptor(void);
           =2 void Get_Configuration(void);
           =2 void Set_Configuration(void);
           =2 void Get_Interface(void);
           =2 void Set_Interface(void);
           =2 
           =2 // MSD Specific Requests
           =2 // void Reset_Msd(void);
           =2 // void Get_MaxLUN(void);
           =2 
           =2 // Initialization Routines
           =2 void Sys_Clk_Init(void);                      // Initialize the sy
             -stem clock(depends on Full/Low speed)
           =2 void Port_Init(void);                        // Configure ports fo
             -r this specific application
           =2 void USB0_Init(void);                        // Configure USB core
             - for either Full/Low speed
           =2 void Timer_Init(void);                       // Start timer 2 for 
             -use by ADC and to check switches
           =2 void Adc_Init(void);                         // Configure ADC for 
             -continuous conversion, low-power mode
           =2 
           =2 // Other Routines
           =2 void Timer2_ISR(void);                       // Called when Timer 
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 31  

             -2 overflows, see if switches are pressed
           =2 void Adc_ConvComple_ISR(void);               // When a conversion 
             -completes, switch ADC multiplexor
           =2 void USB_ISR(void);                          // Called to determin
             -e type of USB interrupt
           =2 void Fifo_ReadC(BYTE, unsigned int, BYTE *) ;
           =2 extern void Fifo_Read (BYTE, unsigned int, BYTE *) ; // Used for m
             -ultiple byte reads of Endpoint fifos
           =2 extern void Fifo_Write (BYTE, unsigned int, BYTE *) reentrant;// U
             -sed for multiple byte writes of Endpoint fifos
           =2 void Force_Stall(void);                      // Forces a procedura
             -l stall on Endpoint 0
           =2 void Delay(void);                            // Approximately 80 u
             -s/1 ms on Full/Low Speed
           =2 
           =2 void USB_In(BYTE* ptr_buf,unsigned count);
           =2 
           =2 void USB_Bulk_Init(void);
           =2 
           =2 extern unsigned xdata Out_Count;
           =2 extern BYTE xdata Out_Packet[EP2_PACKET_SIZE];
           =2 extern BYTE xdata In_count;
           =2 extern BYTE xdata In_Packet[EP1_PACKET_SIZE];
           =2 //extern BYTE xdata In_Overrun;
           =2 
           =2 #endif      /* _USB_MAIN_H_ */
 217      =2  
  36      =1  
  37      =1  //----------------------------------------------------------------
             --------------
  38      =1  // Function Prototypes
  39      =1  //----------------------------------------------------------------
             --------------
  40      =1  
  41      =1  extern DWORD htonl(DWORD d);
  42      =1  extern unsigned htons(unsigned w);
  43      =1  #define ntohs htons
  44      =1  #define ntohl htonl
  45      =1  
  46      =1  //----------------------------------------------------------------
             --------------
  47      =1  // Variable Prototype
  48      =1  //----------------------------------------------------------------
             --------------
  49      =1  
  50      =1  char* Str_Token(char* str);
  51      =1  
  52      =1  //----------------------------------------------------------------
             --------------
  53      =1  // Macros Prototypes
  54      =1  //----------------------------------------------------------------
             --------------
  55      =1  
  56      =1  #define min(a,b) (((a)<(b))?(a):(b))
  57      =1  #define max(a,b) (((a)>(b))?(a):(b))
  58      =1  
  59      =1  #define msb(x) (((x)>>8)&0x000000FFul)
  60      =1  #define lsb(x) ((x)&0x000000FFul)
  61      =1  
  62      =1  #endif
  44          #include <stdio.h>
   1      =1  /*----------------------------------------------------------------
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 32  

             -----------
   2      =1  STDIO.H
   3      =1  
   4      =1  Prototypes for standard I/O functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, In
             -c.
   6      =1  All rights reserved.
   7      =1  ------------------------------------------------------------------
             ---------*/
   8      =1  
   9      =1  #ifndef __STDIO_H__
  10      =1  #define __STDIO_H__
  11      =1  
  12      =1  #ifndef EOF
  13      =1   #define EOF -1
  14      =1  #endif
  15      =1  
  16      =1  #ifndef NULL
  17      =1   #define NULL ((void *) 0)
  18      =1  #endif
  19      =1  
  20      =1  #ifndef _SIZE_T
  21      =1   #define _SIZE_T
  22      =1   typedef unsigned int size_t;
  23      =1  #endif
  24      =1  
  25      =1  #pragma SAVE
  26      =1  #pragma REGPARMS
  27      =1  extern char _getkey (void);
  28      =1  extern char getchar (void);
  29      =1  extern char ungetchar (char);
  30      =1  extern char putchar (char);
  31      =1  extern int printf   (const char *, ...);
  32      =1  extern int sprintf  (char *, const char *, ...);
  33      =1  extern int vprintf  (const char *, char *);
  34      =1  extern int vsprintf (char *, const char *, char *);
  35      =1  extern char *gets (char *, int n);
  36      =1  extern int scanf (const char *, ...);
  37      =1  extern int sscanf (char *, const char *, ...);
  38      =1  extern int puts (const char *);
  39      =1  
  40      =1  #pragma RESTORE
  41      =1  
  42      =1  #endif
  43      =1  
  45          
  46          #define DIRECTION_IN    0x80
  47          #define DIRECTION_OUT   0x00
  48          
  49          #define CBW_SIGNATURE 0x55534243
  50          #define CSW_SIGNATURE 0x55534253
  51          
  52          #define MSD_READY                                       0x00
  53          #define MSD_COMMAND_TRANSPORT           0x01
  54          #define MSD_DATA_IN                                     0x02
  55          #define MSD_DATA_OUT                            0x03
  56          #define MSD_STATUS_TRANSPORT            0x04
  57          #define MSD_DATA                                        0x05
  58          #define MSD_DO_RESET                            0xFF
  59          
  60          BYTE xdata Msd_State=MSD_READY;
  61          
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 33  

  62          CBW xdata cbw;
  63          CSW xdata csw;
  64          
  65          /*
  66          /* Removed these to safe some memory space (not called on Windows 
             -or MAC platform anyway).
  67          /*
  68          void Msd_Reset_(unsigned char itf) {
  69                  itf=0; // Get rid of compiler warning
  70                  Msd_State=MSD_DO_RESET;
  71          }
  72          
  73          unsigned char Msd_GetMaxLUN(unsigned char itf) {
  74                  return itf&0; // Only 1 LUN supported (itf&0 gets rid of compiler
             - warning).
  75          }
  76          */
  77          
  78          //----------------------------------------------------------------
             -------------
  79          // Msd_Step
  80          //----------------------------------------------------------------
             -------------
  81          //
  82          // This is a crank function. It checks if something is received an
             -d calls the
  83          // responding functions (USB).
  84          //
  85          // Parameters   :
  86          // Return Value :
  87          //----------------------------------------------------------------
             -------------
  88          
  89          void Msd_Step()
  90          {
  91   1        switch(Msd_State) {
  92   2          case MSD_READY:
  93   2            if(Out_Count) {
  94   3            // Look for a "valid" and "meaningful" CBW, as defined in th
             -e spec:
  95   3            // Check size
  96   3              if(Out_Count!=sizeof(CBW)) {
  97   4                Out2_Get_Data(Out_Packet);
  98   4                Out2_Done();
  99   4                return;
 100   4              }
 101   3      
 102   3              Out2_Get_Data((BYTE*)&cbw);
 103   3              Out2_Done();
 104   3      
 105   3              // Check signature, reserved bits & LUN
 106   3              if((cbw.dCBWSignature!=CBW_SIGNATURE) ||
 107   3                ((cbw.bmCBWFlags!=DIRECTION_IN && cbw.bmCBWFlags!=DIRECT
             -ION_OUT) || (cbw.bCBWLUN&0xF0) || (cbw.bCBWCBLength>16)) ||
 108   3                (cbw.bCBWLUN!=0x00)) {
 109   4                return;
 110   4              }
 111   3                                      
 112   3              Msd_State=MSD_DATA;
 113   3            }
 114   2                        break;
 115   2      
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 34  

 116   2          case MSD_DATA:
 117   2            Scsi_Rx();
 118   2            Msd_State=MSD_STATUS_TRANSPORT;
 119   2            break;
 120   2      
 121   2                      case MSD_STATUS_TRANSPORT:
 122   2                              // Reply with a CSW:
 123   2            csw.dCSWSignature=CSW_SIGNATURE;
 124   2            csw.dCSWTag=cbw.dCBWTag;
 125   2            csw.bCSWStatus=Scsi_Status;
 126   2            csw.dCSWDataResidue=ntohl(Scsi_Residue);
 127   2      
 128   2            USB_In((BYTE*)&csw,sizeof(CSW));
 129   2      
 130   2            Msd_State=MSD_READY;
 131   2            break;
 132   2      
 133   2          case MSD_DO_RESET:
 134   2            //printf("RESET! ");
 135   2            // Fall-through
 136   2          default:
 137   2                              //printf("Unexpected MSD state!\n");
 138   2            Msd_State=MSD_READY;
 139   2            break;
 140   2        }
 141   1      }
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 35  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Msd_Step (BEGIN)
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
0000 900000      R     MOV     DPTR,#Msd_State
0003 E0                MOVX    A,@DPTR
0004 24FC              ADD     A,#0FCH
0006 607A              JZ      ?C0010
0008 14                DEC     A
0009 606D              JZ      ?C0009
000B 2405              ADD     A,#05H
000D 6003              JZ      $ + 5H
000F 020000      R     LJMP    ?C0012
                                           ; SOURCE LINE # 92
0012         ?C0002:
                                           ; SOURCE LINE # 93
0012 900000      E     MOV     DPTR,#Out_Count
0015 E0                MOVX    A,@DPTR
0016 FE                MOV     R6,A
0017 A3                INC     DPTR
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A 4E                ORL     A,R6
001B 7003              JNZ     $ + 5H
001D 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 96
0020 EF                MOV     A,R7
0021 641F              XRL     A,#01FH
0023 4E                ORL     A,R6
0024 600C              JZ      ?C0004
                                           ; SOURCE LINE # 97
0026 7B01              MOV     R3,#01H
0028 7A00        E     MOV     R2,#HIGH Out_Packet
002A 7900        E     MOV     R1,#LOW Out_Packet
002C 120000      E     LCALL   _Out2_Get_Data
                                           ; SOURCE LINE # 98
002F 020000      E     LJMP    Out2_Done
                                           ; SOURCE LINE # 100
0032         ?C0004:
                                           ; SOURCE LINE # 102
0032 7B01              MOV     R3,#01H
0034 7A00        R     MOV     R2,#HIGH cbw
0036 7900        R     MOV     R1,#LOW cbw
0038 120000      E     LCALL   _Out2_Get_Data
                                           ; SOURCE LINE # 103
003B 120000      E     LCALL   Out2_Done
                                           ; SOURCE LINE # 106
003E 7F43              MOV     R7,#043H
0040 7E42              MOV     R6,#042H
0042 7D53              MOV     R5,#053H
0044 7C55              MOV     R4,#055H
0046 900000      R     MOV     DPTR,#cbw
0049 120000      E     LCALL   ?C?LLDXDATA0
004C C3                CLR     C
004D 120000      E     LCALL   ?C?ULCMP
0050 7071              JNZ     ?C0005
0052 900000      R     MOV     DPTR,#cbw+0CH
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 36  

0057 6480              XRL     A,#080H
0059 6003              JZ      ?C0008
005B EF                MOV     A,R7
005C 7065              JNZ     ?C0005
005E         ?C0008:
005E 900000      R     MOV     DPTR,#cbw+0DH
0061 E0                MOVX    A,@DPTR
0062 FF                MOV     R7,A
0063 54F0              ANL     A,#0F0H
0065 705C              JNZ     ?C0005
0067 A3                INC     DPTR
0068 E0                MOVX    A,@DPTR
0069 D3                SETB    C
006A 9410              SUBB    A,#010H
006C 5055              JNC     ?C0005
006E EF                MOV     A,R7
006F 7052              JNZ     ?C0005
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 110
0071         ?C0006:
                                           ; SOURCE LINE # 112
0071 900000      R     MOV     DPTR,#Msd_State
0074 7405              MOV     A,#05H
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 114
0077 22                RET     
                                           ; SOURCE LINE # 116
0078         ?C0009:
                                           ; SOURCE LINE # 117
0078 120000      E     LCALL   Scsi_Rx
                                           ; SOURCE LINE # 118
007B 900000      R     MOV     DPTR,#Msd_State
007E 7404              MOV     A,#04H
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 119
0081 22                RET     
                                           ; SOURCE LINE # 121
0082         ?C0010:
                                           ; SOURCE LINE # 123
0082 900000      R     MOV     DPTR,#csw
0085 120000      E     LCALL   ?C?LSTKXDATA
0088 55                DB      055H
0089 53                DB      053H
008A 42                DB      042H
008B 53                DB      053H
                                           ; SOURCE LINE # 124
008C 900000      R     MOV     DPTR,#cbw+04H
008F 120000      E     LCALL   ?C?LLDXDATA
0092 900000      R     MOV     DPTR,#csw+04H
0095 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 125
0098 900000      E     MOV     DPTR,#Scsi_Status
009B E0                MOVX    A,@DPTR
009C 900000      R     MOV     DPTR,#csw+0CH
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
00A0 900000      E     MOV     DPTR,#Scsi_Residue
00A3 120000      E     LCALL   ?C?LLDXDATA
00A6 120000      E     LCALL   _htonl
00A9 900000      R     MOV     DPTR,#csw+08H
00AC 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 37  

                                           ; SOURCE LINE # 128
00AF 7B01              MOV     R3,#01H
00B1 7A00        R     MOV     R2,#HIGH csw
00B3 7900        R     MOV     R1,#LOW csw
00B5 7D0D              MOV     R5,#0DH
00B7 7C00              MOV     R4,#00H
00B9 120000      E     LCALL   _USB_In
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
00BC 8000              SJMP    ?C0013
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 136
00BE         ?C0012:
                                           ; SOURCE LINE # 138
00BE         ?C0013:
00BE E4                CLR     A
00BF 900000      R     MOV     DPTR,#Msd_State
00C2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
00C3         ?C0005:
00C3 22                RET     
             ; FUNCTION Msd_Step (END)

C51 COMPILER V8.02   F34X_MSD_MSD                  07/24/2007 22:07:37 PAGE 38  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
_htonl . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Msd_State. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0000H  1
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
Msd_Step . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
Out_Count. . . . . . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
_Out2_Get_Data . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_CBW . . . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  31
  dCBWSignature. . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  dCBWTag. . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  dCBWDataTransferLength . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  bmCBWFlags . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  bCBWLUN. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  bCBWCBLength . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  CBWCB. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    000FH  16
cbw. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  STRUCT   0001H  31
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  i. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  c. . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
Scsi_Rx. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Scsi_Residue . . . . . . . . . . . . .  EXTERN   XDATA  U_LONG   -----  4
_CSW . . . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  13
  dCSWSignature. . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  dCSWTag. . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  dCSWDataResidue. . . . . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  bCSWStatus . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
csw. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  STRUCT   0020H  13
Out2_Done. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CBW. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  31
  dCBWSignature. . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  dCBWTag. . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  dCBWDataTransferLength . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  bmCBWFlags . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  bCBWLUN. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  bCBWCBLength . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  CBWCB. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    000FH  16
_USB_In. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CSW. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  13
  dCSWSignature. . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  dCSWTag. . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  dCSWDataResidue. . . . . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  bCSWStatus . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
Out_Packet . . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  64
Scsi_Status. . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    196    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     45    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
