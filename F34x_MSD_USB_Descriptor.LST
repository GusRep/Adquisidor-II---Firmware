C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE F34X_MSD_USB_DESCRIPTOR
OBJECT MODULE PLACED IN F34x_MSD_USB_Descriptor.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe F34x_MSD_USB_Descriptor.c PW(80) SB
                    - LC OT(9,SIZE) CD DB OE DF(__F340_VER__) LARGE

line level    source

   1          //----------------------------------------------------------------
             --------------
   2          // F34x_MSD_USB_Descriptor.c
   3          //----------------------------------------------------------------
             --------------
   4          // Copyright 2006 Silicon Laboratories, Inc.
   5          // http://www.silabs.com
   6          //
   7          // Program Description:
   8          //
   9          // Source file for USB firmware. Includes descriptor data.
  10          //
  11          //
  12          // How To Test:    See Readme.txt
  13          //
  14          //
  15          // FID:            34X000059
  16          // Target:         C8051F34x
  17          // Tool chain:     Keil
  18          // Command Line:   See Readme.txt
  19          // Project Name:   F34x_USB_MSD
  20          //
  21          // Release 1.1
  22          //    -All changes by PKC
  23          //    -09 JUN 2006
  24          //    -No changes; incremented revision number to match project re
             -vision
  25          //
  26          // Release 1.0
  27          //    -Initial Release
  28          //
  29          
  30          //----------------------------------------------------------------
             --------------
  31          // Includes
  32          //----------------------------------------------------------------
             --------------
  33          
  34          #include "F34x_MSD_Definitions.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Definitions.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with all definitions.
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000032
  13      =1  // Target:         C8051F34x
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 2   

  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef __DEFINITIONS_H__
  32      =1  #define __DEFINITIONS_H__
  33      =1  
  34      =1  #define DEBUG_TIMEOUTS
  35      =1  #include "c8051f340.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // C8051F340.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2005 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Register/bit definitions for the C8051F34x family.
  10      =2  //
  11      =2  //
  12      =2  // FID:            34X000002
  13      =2  // Target:         C8051F340, 'F341, 'F342, 'F343, 'F344, 'F345, '
             -F346, 'F347
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   None
  16      =2  //
  17      =2  // Release 1.0
  18      =2  //    -Initial Release (GP\PKC)
  19      =2  //    -13 DEC 2005
  20      =2  
  21      =2  //----------------------------------------------------------------
             --------------
  22      =2  // Header File Preprocessor Directive
  23      =2  //----------------------------------------------------------------
             --------------
  24      =2  
  25      =2  #ifndef C8051F340_H
  26      =2  #define C8051F340_H
  27      =2  
  28      =2  //----------------------------------------------------------------
             --------------
  29      =2  // Byte Registers
  30      =2  //----------------------------------------------------------------
             --------------
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 3   

  31      =2  
  32      =2  sfr  P0           =  0x80;             // Port 0 Latch
  33      =2  sfr  SP           =  0x81;             // Stack Pointer
  34      =2  sfr  DPL          =  0x82;             // Data Pointer Low
  35      =2  sfr  DPH          =  0x83;             // Data Pointer High
  36      =2  sfr  EMI0TC       =  0x84;             // EMIF Timing
  37      =2  sfr  EMI0CF       =  0x85;             // EMIF Configuration
  38      =2  sfr  OSCLCN       =  0x86;             // Internal Low-Freq Oscill
             -ator Control
  39      =2  sfr  PCON         =  0x87;             // Power Control
  40      =2  sfr  TCON         =  0x88;             // Timer/Counter Control
  41      =2  sfr  TMOD         =  0x89;             // Timer/Counter Mode
  42      =2  sfr  TL0          =  0x8A;             // Timer/Counter 0 Low
  43      =2  sfr  TL1          =  0x8B;             // Timer/Counter 1 Low
  44      =2  sfr  TH0          =  0x8C;             // Timer/Counter 0 High
  45      =2  sfr  TH1          =  0x8D;             // Timer/Counter 1 High
  46      =2  sfr  CKCON        =  0x8E;             // Clock Control
  47      =2  sfr  PSCTL        =  0x8F;             // Program Store R/W Contro
             -l
  48      =2  sfr  P1           =  0x90;             // Port 1 Latch
  49      =2  sfr  TMR3CN       =  0x91;             // Timer/Counter 3Control
  50      =2  sfr  TMR3RLL      =  0x92;             // Timer/Counter 3 Reload L
             -ow
  51      =2  sfr  TMR3RLH      =  0x93;             // Timer/Counter 3 Reload H
             -igh
  52      =2  sfr  TMR3L        =  0x94;             // Timer/Counter 3Low
  53      =2  sfr  TMR3H        =  0x95;             // Timer/Counter 3 High
  54      =2  sfr  USB0ADR      =  0x96;             // USB0 Indirect Address Re
             -gister
  55      =2  sfr  USB0DAT      =  0x97;             // USB0 Data Register
  56      =2  sfr  SCON0        =  0x98;             // UART0 Control
  57      =2  sfr  SBUF0        =  0x99;             // UART0 Data Buffer
  58      =2  sfr  CPT1CN       =  0x9A;             // Comparator1 Control
  59      =2  sfr  CPT0CN       =  0x9B;             // Comparator0 Control
  60      =2  sfr  CPT1MD       =  0x9C;             // Comparator1 Mode Selecti
             -on
  61      =2  sfr  CPT0MD       =  0x9D;             // Comparator0 Mode Selecti
             -on
  62      =2  sfr  CPT1MX       =  0x9E;             // Comparator1 MUX Selectio
             -n
  63      =2  sfr  CPT0MX       =  0x9F;             // Comparator0 MUX Selectio
             -n
  64      =2  sfr  P2           =  0xA0;             // Port 2 Latch
  65      =2  sfr  SPI0CFG      =  0xA1;             // SPI Configuration
  66      =2  sfr  SPI0CKR      =  0xA2;             // SPI Clock Rate Control
  67      =2  sfr  SPI0DAT      =  0xA3;             // SPI Data
  68      =2  sfr  P0MDOUT      =  0xA4;             // Port 0 Output Mode Confi
             -guration
  69      =2  sfr  P1MDOUT      =  0xA5;             // Port 1 Output Mode Confi
             -guration
  70      =2  sfr  P2MDOUT      =  0xA6;             // Port 2 Output Mode Confi
             -guration
  71      =2  sfr  P3MDOUT      =  0xA7;             // Port 3 Output Mode Confi
             -guration
  72      =2  sfr  IE           =  0xA8;             // Interrupt Enable
  73      =2  sfr  CLKSEL       =  0xA9;             // Clock Select
  74      =2  sfr  EMI0CN       =  0xAA;             // External Memory Interfac
             -e Control
  75      =2  sfr  SBCON1       =  0xAC;             // UART1 Baud Rate Generato
             -r Control
  76      =2  sfr  P4MDOUT      =  0xAE;             // Port 4 Output Mode Confi
             -guration
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 4   

  77      =2  sfr  PFE0CN       =  0xAF;             // Prefetch Engine Control
  78      =2  sfr  P3           =  0xB0;             // Port 3 Latch
  79      =2  sfr  OSCXCN       =  0xB1;             // External Oscillator Cont
             -rol
  80      =2  sfr  OSCICN       =  0xB2;             // Internal Oscillator Cont
             -rol
  81      =2  sfr  OSCICL       =  0xB3;             // Internal Oscillator Cali
             -bration
  82      =2  sfr  SBRLL1       =  0xB4;             // UART1 Baud Rate Generato
             -r Low
  83      =2  sfr  SBRLH1       =  0xB5;             // UART1 Baud Rate Generato
             -r High
  84      =2  sfr  FLSCL        =  0xB6;             // Flash Scale
  85      =2  sfr  FLKEY        =  0xB7;             // Flash Lock and Key
  86      =2  sfr  IP           =  0xB8;             // Interrupt Priority
  87      =2  sfr  CLKMUL       =  0xB9;             // Clock Multiplier
  88      =2  sfr  AMX0N        =  0xBA;             // AMUX0 Negative Channel S
             -elect
  89      =2  sfr  AMX0P        =  0xBB;             // AMUX0 Positive Channel S
             -elect
  90      =2  sfr  ADC0CF       =  0xBC;             // ADC0 Configuration
  91      =2  sfr  ADC0L        =  0xBD;             // ADC0 Low
  92      =2  sfr  ADC0H        =  0xBE;             // ADC0 High
  93      =2  sfr  SMB0CN       =  0xC0;             // SMBus Control
  94      =2  sfr  SMB0CF       =  0xC1;             // SMBus Configuration
  95      =2  sfr  SMB0DAT      =  0xC2;             // SMBus Data
  96      =2  sfr  ADC0GTL      =  0xC3;             // ADC0 Greater-Than Compar
             -e Low
  97      =2  sfr  ADC0GTH      =  0xC4;             // ADC0 Greater-Than Compar
             -e High
  98      =2  sfr  ADC0LTL      =  0xC5;             // ADC0 Less-Than Compare W
             -ord Low
  99      =2  sfr  ADC0LTH      =  0xC6;             // ADC0 Less-Than Compare W
             -ord High
 100      =2  sfr  P4           =  0xC7;             // Port 4 Latch
 101      =2  sfr  TMR2CN       =  0xC8;             // Timer/Counter 2 Control
 102      =2  sfr  REG0CN       =  0xC9;             // Voltage Regulator Contro
             -l
 103      =2  sfr  TMR2RLL      =  0xCA;             // Timer/Counter 2 Reload L
             -ow
 104      =2  sfr  TMR2RLH      =  0xCB;             // Timer/Counter 2 Reload H
             -igh
 105      =2  sfr  TMR2L        =  0xCC;             // Timer/Counter 2 Low
 106      =2  sfr  TMR2H        =  0xCD;             // Timer/Counter 2 High
 107      =2  sfr  PSW          =  0xD0;             // Program Status Word
 108      =2  sfr  REF0CN       =  0xD1;             // Voltage Reference Contro
             -l
 109      =2  sfr  SCON1        =  0xD2;             // UART1 Control
 110      =2  sfr  SBUF1        =  0xD3;             // UART1 Data Buffer
 111      =2  sfr  P0SKIP       =  0xD4;             // Port 0 Skip
 112      =2  sfr  P1SKIP       =  0xD5;             // Port 1 Skip
 113      =2  sfr  P2SKIP       =  0xD6;             // Port 2 Skip
 114      =2  sfr  USB0XCN      =  0xD7;             // USB0 Transceiver Control
 115      =2  sfr  PCA0CN       =  0xD8;             // PCA0 Control
 116      =2  sfr  PCA0MD       =  0xD9;             // PCA0 Mode
 117      =2  sfr  PCA0CPM0     =  0xDA;             // PCA0 Module 0 Mode Regis
             -ter
 118      =2  sfr  PCA0CPM1     =  0xDB;             // PCA0 Module 1 Mode Regis
             -ter
 119      =2  sfr  PCA0CPM2     =  0xDC;             // PCA0 Module 2 Mode Regis
             -ter
 120      =2  sfr  PCA0CPM3     =  0xDD;             // PCA0 Module 3 Mode Regis
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 5   

             -ter
 121      =2  sfr  PCA0CPM4     =  0xDE;             // PCA0 Module 4 Mode Regis
             -ter
 122      =2  sfr  P3SKIP       =  0xDF;             // Port 3 Skip
 123      =2  sfr  ACC          =  0xE0;             // Accumulator
 124      =2  sfr  XBR0         =  0xE1;             // Port I/O Crossbar Contro
             -l 0
 125      =2  sfr  XBR1         =  0xE2;             // Port I/O Crossbar Contro
             -l 1
 126      =2  sfr  XBR2         =  0xE3;             // Port I/O Crossbar Contro
             -l 2
 127      =2  sfr  IT01CF       =  0xE4;             // INT0/INT1 Configuration
 128      =2  sfr  SMOD1        =  0xE5;             // UART1 Mode
 129      =2  sfr  EIE1         =  0xE6;             // Extended Interrupt Enabl
             -e 1
 130      =2  sfr  EIE2         =  0xE7;             // Extended Interrupt Enabl
             -e 2
 131      =2  sfr  ADC0CN       =  0xE8;             // ADC0 Control
 132      =2  sfr  PCA0CPL1     =  0xE9;             // PCA0 Capture 1 Low
 133      =2  sfr  PCA0CPH1     =  0xEA;             // PCA0 Capture 1 High
 134      =2  sfr  PCA0CPL2     =  0xEB;             // PCA0 Capture 2 Low
 135      =2  sfr  PCA0CPH2     =  0xEC;             // PCA0 Capture 2 High
 136      =2  sfr  PCA0CPL3     =  0xED;             // PCA0 Capture 3 Low
 137      =2  sfr  PCA0CPH3     =  0xEE;             // PCA0 Capture 3 High
 138      =2  sfr  RSTSRC       =  0xEF;             // Reset Source Configurati
             -on/Status
 139      =2  sfr  B            =  0xF0;             // B Register
 140      =2  sfr  P0MDIN       =  0xF1;             // Port 0 Input Mode Config
             -uration
 141      =2  sfr  P1MDIN       =  0xF2;             // Port 1 Input Mode Config
             -uration
 142      =2  sfr  P2MDIN       =  0xF3;             // Port 2 Input Mode Config
             -uration
 143      =2  sfr  P3MDIN       =  0xF4;             // Port 3 Input Mode Config
             -uration
 144      =2  sfr  P4MDIN       =  0xF5;             // Port 4 Input Mode Config
             -uration
 145      =2  sfr  EIP1         =  0xF6;             // Extended Interrupt Prior
             -ity 1
 146      =2  sfr  EIP2         =  0xF7;             // Extended Interrupt Prior
             -ity 2
 147      =2  sfr  SPI0CN       =  0xF8;             // SPI0 Control
 148      =2  sfr  PCA0L        =  0xF9;             // PCA0 Counter Low
 149      =2  sfr  PCA0H        =  0xFA;             // PCA0 Counter High
 150      =2  sfr  PCA0CPL0     =  0xFB;             // PCA0 Capture 0 Low
 151      =2  sfr  PCA0CPH0     =  0xFC;             // PCA0 Capture 0 High
 152      =2  sfr  PCA0CPL4     =  0xFD;             // PCA0 Capture 4 Low
 153      =2  sfr  PCA0CPH4     =  0xFE;             // PCA0 Capture 4 High
 154      =2  sfr  VDM0CN       =  0xFF;             // VDD Monitor Control
 155      =2  
 156      =2  
 157      =2  //----------------------------------------------------------------
             --------------
 158      =2  // Bit Definitions
 159      =2  //----------------------------------------------------------------
             --------------
 160      =2  
 161      =2  // TCON 0x88
 162      =2  sbit TF1     = 0x8F;                   // Timer1 overflow flag
 163      =2  sbit TR1     = 0x8E;                   // Timer1 on/off control
 164      =2  sbit TF0     = 0x8D;                   // Timer0 overflow flag
 165      =2  sbit TR0     = 0x8C;                   // Timer0 on/off control
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 6   

 166      =2  sbit IE1     = 0x8B;                   // Ext interrupt 1 edge fla
             -g
 167      =2  sbit IT1     = 0x8A;                   // Ext interrupt 1 type
 168      =2  sbit IE0     = 0x89;                   // Ext interrupt 0 edge fla
             -g
 169      =2  sbit IT0     = 0x88;                   // Ext interrupt 0 type
 170      =2  
 171      =2  // SCON0 0x98
 172      =2  sbit S0MODE  = 0x9F;                   // Serial mode control bit 
             -0
 173      =2                                         // Bit6 UNUSED
 174      =2  sbit MCE0    = 0x9D;                   // Multiprocessor communica
             -tion enable
 175      =2  sbit REN0    = 0x9C;                   // Receive enable
 176      =2  sbit TB80    = 0x9B;                   // Transmit bit 8
 177      =2  sbit RB80    = 0x9A;                   // Receive bit 8
 178      =2  sbit TI0     = 0x99;                   // Transmit interrupt flag
 179      =2  sbit RI0     = 0x98;                   // Receive interrupt flag
 180      =2  
 181      =2  // IE 0xA8
 182      =2  sbit EA      = 0xAF;                   // Global interrupt enable
 183      =2  sbit ESPI0   = 0xAE;                   // SPI0 interrupt enable
 184      =2  sbit ET2     = 0xAD;                   // Timer2 interrupt enable
 185      =2  sbit ES0     = 0xAC;                   // UART0 interrupt enable
 186      =2  sbit ET1     = 0xAB;                   // Timer1 interrupt enable
 187      =2  sbit EX1     = 0xAA;                   // External interrupt 1 ena
             -ble
 188      =2  sbit ET0     = 0xA9;                   // Timer0 interrupt enable
 189      =2  sbit EX0     = 0xA8;                   // External interrupt 0 ena
             -ble
 190      =2  
 191      =2  // IP 0xB8
 192      =2                                         // Bit7 UNUSED
 193      =2  sbit PSPI0   = 0xBE;                   // SPI0 interrupt priority
 194      =2  sbit PT2     = 0xBD;                   // Timer2 priority
 195      =2  sbit PS0     = 0xBC;                   // UART0 priority
 196      =2  sbit PT1     = 0xBB;                   // Timer1 priority
 197      =2  sbit PX1     = 0xBA;                   // External interrupt 1 pri
             -ority
 198      =2  sbit PT0     = 0xB9;                   // Timer0 priority
 199      =2  sbit PX0     = 0xB8;                   // External interrupt 0 pri
             -ority
 200      =2  
 201      =2  // SMB0CN 0xC0
 202      =2  sbit MASTER  = 0xC7;                   // Master/slave indicator
 203      =2  sbit TXMODE  = 0xC6;                   // Transmit mode indicator
 204      =2  sbit STA     = 0xC5;                   // Start flag
 205      =2  sbit STO     = 0xC4;                   // Stop flag
 206      =2  sbit ACKRQ   = 0xC3;                   // Acknowledge request
 207      =2  sbit ARBLOST = 0xC2;                   // Arbitration lost indicat
             -or
 208      =2  sbit ACK     = 0xC1;                   // Acknowledge flag
 209      =2  sbit SI      = 0xC0;                   // SMBus interrupt flag
 210      =2  
 211      =2  // TMR2CN 0xC8
 212      =2  sbit TF2H    = 0xCF;                   // Timer2 high byte overflo
             -w flag
 213      =2  sbit TF2L    = 0xCE;                   // Timer2 low byte overflow
             - flag
 214      =2  sbit TF2LEN  = 0xCD;                   // Timer2 low byte interrup
             -t enable
 215      =2  sbit T2CE    = 0xCC;                   // Timer2 capture enable
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 7   

 216      =2  sbit T2SPLIT = 0xCB;                   // Timer2 split mode enable
 217      =2  sbit TR2     = 0xCA;                   // Timer2 on/off control
 218      =2  sbit T2CSS   = 0xC9;                   // Timer 2 Capture Source s
             -elect
 219      =2  sbit T2XCLK  = 0xC8;                   // Timer2 external clock se
             -lect
 220      =2  
 221      =2  // PSW 0xD0
 222      =2  sbit CY      = 0xD7;                   // Carry flag
 223      =2  sbit AC      = 0xD6;                   // Auxiliary carry flag
 224      =2  sbit F0      = 0xD5;                   // User flag 0
 225      =2  sbit RS1     = 0xD4;                   // Register bank select 1
 226      =2  sbit RS0     = 0xD3;                   // Register bank select 0
 227      =2  sbit OV      = 0xD2;                   // Overflow flag
 228      =2  sbit F1      = 0xD1;                   // User flag 1
 229      =2  sbit P       = 0xD0;                   // Accumulator parity flag
 230      =2  
 231      =2  // PCA0CN 0xD8
 232      =2  sbit CF      = 0xDF;                   // PCA0 counter overflow fl
             -ag
 233      =2  sbit CR      = 0xDE;                   // PCA0 counter run control
 234      =2                                         // Bit5 UNUSED
 235      =2  sbit CCF4    = 0xDC;                   // PCA0 module4 capture/com
             -pare flag
 236      =2  sbit CCF3    = 0xDB;                   // PCA0 module3 capture/com
             -pare flag
 237      =2  sbit CCF2    = 0xDA;                   // PCA0 module2 capture/com
             -pare flag
 238      =2  sbit CCF1    = 0xD9;                   // PCA0 module1 capture/com
             -pare flag
 239      =2  sbit CCF0    = 0xD8;                   // PCA0 module0 capture/com
             -pare flag
 240      =2  
 241      =2  // ADC0CN 0xE8
 242      =2  sbit AD0EN   = 0xEF;                   // ADC0 enable
 243      =2  sbit AD0TM   = 0xEE;                   // ADC0 track mode
 244      =2  sbit AD0INT  = 0xED;                   // ADC0 conversion complete
             - interrupt flag
 245      =2  sbit AD0BUSY = 0xEC;                   // ADC0 busy flag
 246      =2  sbit AD0WINT = 0xEB;                   // ADC0 window compare inte
             -rrupt flag
 247      =2  sbit AD0CM2  = 0xEA;                   // ADC0 conversion mode sel
             -ect 2
 248      =2  sbit AD0CM1  = 0xE9;                   // ADC0 conversion mode sel
             -ect 1
 249      =2  sbit AD0CM0  = 0xE8;                   // ADC0 conversion mode sel
             -ect 0
 250      =2  
 251      =2  // SPI0CN 0xF8
 252      =2  sbit SPIF    = 0xFF;                   // SPI0 interrupt flag
 253      =2  sbit WCOL    = 0xFE;                   // SPI0 write collision fla
             -g
 254      =2  sbit MODF    = 0xFD;                   // SPI0 mode fault flag
 255      =2  sbit RXOVRN  = 0xFC;                   // SPI0 rx overrun flag
 256      =2  sbit NSSMD1  = 0xFB;                   // SPI0 slave select mode 1
 257      =2  sbit NSSMD0  = 0xFA;                   // SPI0 slave select mode 0
 258      =2  sbit TXBMT   = 0xF9;                   // SPI0 transmit buffer emp
             -ty
 259      =2  sbit SPIEN   = 0xF8;                   // SPI0 SPI enable
 260      =2  
 261      =2  
 262      =2  //----------------------------------------------------------------
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 8   

             --------------
 263      =2  // Interrupt Priorities
 264      =2  //----------------------------------------------------------------
             --------------
 265      =2  
 266      =2  #define INTERRUPT_INT0             0   // External Interrupt 0
 267      =2  #define INTERRUPT_TIMER0           1   // Timer0 Overflow
 268      =2  #define INTERRUPT_INT1             2   // External Interrupt 1
 269      =2  #define INTERRUPT_TIMER1           3   // Timer1 Overflow
 270      =2  #define INTERRUPT_UART0            4   // Serial Port 0
 271      =2  #define INTERRUPT_TIMER2           5   // Timer2 Overflow
 272      =2  #define INTERRUPT_SPI0             6   // Serial Peripheral Interf
             -ace 0
 273      =2  #define INTERRUPT_SMBUS0           7   // SMBus0 Interface
 274      =2  #define INTERRUPT_USB0             8   // USB Interface
 275      =2  #define INTERRUPT_ADC0_WINDOW      9   // ADC0 Window Comparison
 276      =2  #define INTERRUPT_ADC0_EOC         10  // ADC0 End Of Conversion
 277      =2  #define INTERRUPT_PCA0             11  // PCA0 Peripheral
 278      =2  #define INTERRUPT_COMPARATOR0      12  // Comparator0
 279      =2  #define INTERRUPT_COMPARATOR1      13  // Comparator1
 280      =2  #define INTERRUPT_TIMER3           14  // Timer3 Overflow
 281      =2  #define INTERRUPT_VBUS_LEVEL       15  // VBUS level-triggered int
             -errupt
 282      =2  #define INTERRUPT_UART1            16  // Serial Port 1
 283      =2  
 284      =2  //----------------------------------------------------------------
             --------------
 285      =2  // Header File PreProcessor Directive
 286      =2  //----------------------------------------------------------------
             --------------
 287      =2  
 288      =2  #endif                                 // #define C8051F340_H
 289      =2  
 290      =2  //----------------------------------------------------------------
             --------------
 291      =2  // End Of File
 292      =2  //----------------------------------------------------------------
             --------------
  36      =1  #ifdef DEBUG_TIMEOUTS
  37      =1  sbit START_STOP_SPI = P3^0 ;
  38      =1  sbit START_STOP_READ_TO = P3^1;
  39      =1  sbit START_STOP_WRITE_TO = P3^2;
  40      =1  
  41      =1  #define START_SPI_TIMEOUT (START_STOP_SPI = 1)
  42      =1  #define STOP_SPI_TIME_OUT (START_STOP_SPI = 0)
  43      =1  #define START_READ_COPY (START_STOP_READ_TO = 1)
  44      =1  #define STOP_READ_COPY (START_STOP_READ_TO = 0)
  45      =1  #define START_WRITE_COPY (START_STOP_WRITE_TO = 1)
  46      =1  #define STOP_WRITE_COPY (START_STOP_WRITE_TO = 0)
  47      =1  #else
           =1 
           =1 #define START_SPI_TIMEOUT /\
           =1 /
           =1 #define STOP_SPI_TIME_OUT /\
           =1 /
           =1 #define START_READ_COPY /\
           =1 /
           =1 #define STOP_READ_COPY /\
           =1 /
           =1 #define START_WRITE_COPY /\
           =1 /
           =1 #define STOP_WRITE_COPY /\
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 9   

           =1 /
           =1 
           =1 #endif
  63      =1  
  64      =1  #define ENDLINE         "\r\n"
  65      =1  #define ENDLINE_SGN '\r'
  66      =1  
  67      =1  #endif
  35          #include "F34x_MSD_USB_Register.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_USB_Register.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file for USB firmware. Includes all USB core register
  10      =1  // addresses, register access macros, and register bit masks.
  11      =1  //
  12      =1  // FID:            34X000065
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  // 11/22/02 - DM: 1. Updated function prototypes and added constan
             -ts
  27      =1  //                to F34x_USB_Main.h with sample interrupt firmwar
             -e.
  28      =1  
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  // Header File Preprocessor Directive
  31      =1  //----------------------------------------------------------------
             --------------
  32      =1  
  33      =1  #ifndef  _USB_REGS_H_
  34      =1  #define  _USB_REGS_H_
  35      =1  
  36      =1  #include "F34x_MSD_Definitions.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_Definitions.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 10  

   9      =2  // Header file with all definitions.
  10      =2  //
  11      =2  //
  12      =2  // FID:            34X000032
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  
  27      =2  //----------------------------------------------------------------
             --------------
  28      =2  // Header File Preprocessor Directive
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  
  31      =2  #ifndef __DEFINITIONS_H__
           =2 #define __DEFINITIONS_H__
           =2 
           =2 #define DEBUG_TIMEOUTS
           =2 #include "c8051f340.h"
           =2 #ifdef DEBUG_TIMEOUTS
           =2 sbit START_STOP_SPI = P3^0 ;
           =2 sbit START_STOP_READ_TO = P3^1;
           =2 sbit START_STOP_WRITE_TO = P3^2;
           =2 
           =2 #define START_SPI_TIMEOUT (START_STOP_SPI = 1)
           =2 #define STOP_SPI_TIME_OUT (START_STOP_SPI = 0)
           =2 #define START_READ_COPY (START_STOP_READ_TO = 1)
           =2 #define STOP_READ_COPY (START_STOP_READ_TO = 0)
           =2 #define START_WRITE_COPY (START_STOP_WRITE_TO = 1)
           =2 #define STOP_WRITE_COPY (START_STOP_WRITE_TO = 0)
           =2 #else
           =2 
           =2 #define START_SPI_TIMEOUT /\
           =2 /
           =2 #define STOP_SPI_TIME_OUT /\
           =2 /
           =2 #define START_READ_COPY /\
           =2 /
           =2 #define STOP_READ_COPY /\
           =2 /
           =2 #define START_WRITE_COPY /\
           =2 /
           =2 #define STOP_WRITE_COPY /\
           =2 /
           =2 
           =2 #endif
           =2 
           =2 #define ENDLINE         "\r\n"
           =2 #define ENDLINE_SGN '\r'
           =2 
           =2 #endif
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 11  

  37      =1  // BYTE type definition
  38      =1  #ifndef _BYTE_DEF_
  39      =1  #define _BYTE_DEF_
  40      =1  typedef unsigned char BYTE;
  41      =1  #endif   /* _BYTE_DEF_ */
  42      =1  
  43      =1  // USB Core Registers
  44      =1  #define  BASE     0x00
  45      =1  #define  FADDR    BASE
  46      =1  #define  POWER    BASE + 0x01
  47      =1  #define  IN1INT   BASE + 0x02
  48      =1  #define  OUT1INT  BASE + 0x04
  49      =1  #define  CMINT    BASE + 0x06
  50      =1  #define  IN1IE    BASE + 0x07
  51      =1  #define  OUT1IE   BASE + 0x09
  52      =1  #define  CMIE     BASE + 0x0B
  53      =1  #define  FRAMEL   BASE + 0x0C
  54      =1  #define  FRAMEH   BASE + 0x0D
  55      =1  #define  INDEX    BASE + 0x0E
  56      =1  #define  CLKREC   BASE + 0x0F
  57      =1  #define  E0CSR    BASE + 0x11
  58      =1  #define  EINCSR1  BASE + 0x11
  59      =1  #define  EINCSR2  BASE + 0x12
  60      =1  #define  EOUTCSR1 BASE + 0x14
  61      =1  #define  EOUTCSR2 BASE + 0x15
  62      =1  #define  E0CNT    BASE + 0x16
  63      =1  #define  EOUTCNTL BASE + 0x16
  64      =1  #define  EOUTCNTH BASE + 0x17
  65      =1  #define  FIFO_EP0 BASE + 0x20
  66      =1  #define  FIFO_EP1 BASE + 0x21
  67      =1  #ifdef __F326_VER__
           =1 #define  FIFO_EP2 BASE + 0x21
           =1 #else
  70      =1  #define  FIFO_EP2 BASE + 0x22
  71      =1  #endif
  72      =1  #define  FIFO_EP3 BASE + 0x23
  73      =1  
  74      =1  // USB Core Register Bits
  75      =1  
  76      =1  // POWER
  77      =1  #define  rbISOUD        0x80
  78      =1  #define  rbSPEED        0x40
  79      =1  #define  rbUSBRST       0x08
  80      =1  #define  rbRESUME       0x04
  81      =1  #define  rbSUSMD        0x02
  82      =1  #define  rbSUSEN        0x01
  83      =1  
  84      =1  // IN1INT
  85      =1  #define  rbIN3          0x08
  86      =1  #define  rbIN2          0x04
  87      =1  #define  rbIN1          0x02
  88      =1  #define  rbEP0          0x01
  89      =1  
  90      =1  // OUT1INT
  91      =1  #define  rbOUT3         0x08
  92      =1  #ifdef __F326_VER__
           =1 #define  rbOUT2         0x02
           =1 #else
  95      =1  #define  rbOUT2         0x04
  96      =1  #endif
  97      =1  #define  rbOUT1         0x02
  98      =1  
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 12  

  99      =1  // CMINT
 100      =1  #define  rbSOF          0x08
 101      =1  #define  rbRSTINT       0x04
 102      =1  #define  rbRSUINT       0x02
 103      =1  #define  rbSUSINT       0x01
 104      =1  
 105      =1  // IN1IE
 106      =1  #define  rbIN3E         0x08
 107      =1  #define  rbIN2E         0x04
 108      =1  #define  rbIN1E         0x02
 109      =1  #define  rbEP0E         0x01
 110      =1  
 111      =1  // OUT1IE
 112      =1  #define  rbOUT3E        0x08
 113      =1  #define  rbOUT2E        0x04
 114      =1  #define  rbOUT1E        0x02
 115      =1  
 116      =1  // CMIE
 117      =1  #define  rbSOFE         0x08
 118      =1  #define  rbRSTINTE      0x04
 119      =1  #define  rbRSUINTE      0x02
 120      =1  #define  rbSUSINTE      0x01
 121      =1  
 122      =1  // E0CSR
 123      =1  #define  rbSSUEND       0x80
 124      =1  #define  rbSOPRDY       0x40
 125      =1  #define  rbSDSTL        0x20
 126      =1  #define  rbSUEND        0x10
 127      =1  #define  rbDATAEND      0x08
 128      =1  #define  rbSTSTL        0x04
 129      =1  #define  rbINPRDY       0x02
 130      =1  #define  rbOPRDY        0x01
 131      =1  
 132      =1  // EINCSR1
 133      =1  #define  rbInCLRDT      0x40
 134      =1  #define  rbInSTSTL      0x20
 135      =1  #define  rbInSDSTL      0x10
 136      =1  #define  rbInFLUSH      0x08
 137      =1  #define  rbInUNDRUN     0x04
 138      =1  #define  rbInFIFONE     0x02
 139      =1  #define  rbInINPRDY     0x01
 140      =1  
 141      =1  // EINCSR2
 142      =1  #define  rbInDBIEN      0x80
 143      =1  #define  rbInISO        0x40
 144      =1  #define  rbInDIRSEL     0x20
 145      =1  #define  rbInFCDT       0x08
 146      =1  #define  rbInSPLIT      0x04  
 147      =1  
 148      =1  // EOUTCSR1
 149      =1  #define  rbOutCLRDT     0x80
 150      =1  #define  rbOutSTSTL     0x40
 151      =1  #define  rbOutSDSTL     0x20
 152      =1  #define  rbOutFLUSH     0x10
 153      =1  #define  rbOutDATERR    0x08
 154      =1  #define  rbOutOVRUN     0x04
 155      =1  #define  rbOutFIFOFUL   0x02
 156      =1  #define  rbOutOPRDY     0x01
 157      =1  
 158      =1  // EOUTCSR2
 159      =1  #define  rbOutDBOEN     0x80
 160      =1  #define  rbOutISO       0x40 
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 13  

 161      =1  
 162      =1  // INDEX IDENTIFIERS
 163      =1  #define  EP0_IDX                0x00
 164      =1  #ifdef __F326_VER__
           =1 #define  EP2_OUT_IDX    0x01
           =1 #else
 167      =1  #define   EP2_OUT_IDX   0x02
 168      =1  #endif
 169      =1  #define  EP1_IN_IDX             0x01
 170      =1  
 171      =1  // Register read/write macros
 172      =1  
 173      =1  // These first two macros do not poll for busy, and can be used to
             - increase program speed where
 174      =1  // neccessary, but should never be used for successive reads or wr
             -ites.
 175      =1  #define READ_BYTE(addr, target) USB0ADR = (0x80 | addr); while(USB
             -0ADR & 0x80); target = USB0DAT
 176      =1  #define WRITE_BYTE(addr, data) USB0ADR = (addr); USB0DAT = data
 177      =1  
 178      =1  // These two macros are polling versions of the above macros, and 
             -can be used for successive reads/
 179      =1  // writes without taking the chance that the Interface Engine is b
             -usy from the last register access.
 180      =1  #define POLL_READ_BYTE(addr, target) while(USB0ADR & 0x80); READ_B
             -YTE(addr, target);
 181      =1  #define POLL_WRITE_BYTE(addr, data) while(USB0ADR & 0x80); WRITE_B
             -YTE(addr, data);
 182      =1  
 183      =1  #endif /* _USB_REGS_H_ */
  36          #include "F34x_MSD_USB_Main.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_USB_Main.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Main header file for USB firmware. Includes function prototypes
             -,
  10      =1  // standard constants, and configuration constants.//
  11      =1  //
  12      =1  // FID:            34X000063
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  // 11/22/02 - DM: 1. Updated function prototypes and added constan
             -ts
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 14  

  27      =1  //                to F34x_USB_Main.h with sample interrupt firmwar
             -e.
  28      =1  
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  // Header File Preprocessor Directive
  31      =1  //----------------------------------------------------------------
             --------------
  32      =1  
  33      =1  #ifndef _USB_MAIN_H_
  34      =1  #define _USB_MAIN_H_
  35      =1  
  36      =1  #include "F34x_MSD_Definitions.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_Definitions.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Header file with all definitions.
  10      =2  //
  11      =2  //
  12      =2  // FID:            34X000032
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  
  27      =2  //----------------------------------------------------------------
             --------------
  28      =2  // Header File Preprocessor Directive
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  
  31      =2  #ifndef __DEFINITIONS_H__
           =2 #define __DEFINITIONS_H__
           =2 
           =2 #define DEBUG_TIMEOUTS
           =2 #include "c8051f340.h"
           =2 #ifdef DEBUG_TIMEOUTS
           =2 sbit START_STOP_SPI = P3^0 ;
           =2 sbit START_STOP_READ_TO = P3^1;
           =2 sbit START_STOP_WRITE_TO = P3^2;
           =2 
           =2 #define START_SPI_TIMEOUT (START_STOP_SPI = 1)
           =2 #define STOP_SPI_TIME_OUT (START_STOP_SPI = 0)
           =2 #define START_READ_COPY (START_STOP_READ_TO = 1)
           =2 #define STOP_READ_COPY (START_STOP_READ_TO = 0)
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 15  

           =2 #define START_WRITE_COPY (START_STOP_WRITE_TO = 1)
           =2 #define STOP_WRITE_COPY (START_STOP_WRITE_TO = 0)
           =2 #else
           =2 
           =2 #define START_SPI_TIMEOUT /\
           =2 /
           =2 #define STOP_SPI_TIME_OUT /\
           =2 /
           =2 #define START_READ_COPY /\
           =2 /
           =2 #define STOP_READ_COPY /\
           =2 /
           =2 #define START_WRITE_COPY /\
           =2 /
           =2 #define STOP_WRITE_COPY /\
           =2 /
           =2 
           =2 #endif
           =2 
           =2 #define ENDLINE         "\r\n"
           =2 #define ENDLINE_SGN '\r'
           =2 
           =2 #endif
  37      =1  //#define _USB_LOW_SPEED_                      // Change this comm
             -ent to make Full/Low speed
  38      =1  
  39      =1  #define SYSCLK                   12000000    // SYSCLK frequency i
             -n Hz
  40      =1  
  41      =1  // USB clock selections (SFR CLKSEL)
  42      =1  #define USB_4X_CLOCK             0x00        // Select 4x clock mu
             -ltiplier, for USB Full Speed
  43      =1  #define USB_INT_OSC_DIV_2        0x10        // See Data Sheet sec
             -tion 13. Oscillators
  44      =1  #define USB_EXT_OSC              0x20
  45      =1  #define USB_EXT_OSC_DIV_2        0x30
  46      =1  #define USB_EXT_OSC_DIV_3        0x40
  47      =1  #define USB_EXT_OSC_DIV_4        0x50
  48      =1  
  49      =1  // System clock selections (SFR CLKSEL)
  50      =1  #define SYS_INT_OSC              0x00        // Select to use inte
             -rnal oscillator
  51      =1  #define SYS_4X_MUL               0x03        // Select to use inte
             -rnal oscillator
  52      =1  #define SYS_EXT_OSC              0x01        // Select to use an e
             -xternal oscillator
  53      =1  #define SYS_4X_DIV_2             0x02
  54      =1  
  55      =1  // BYTE type definition
  56      =1  #ifndef _BYTE_DEF_
           =1 #define _BYTE_DEF_
           =1 typedef unsigned char BYTE;
           =1 #endif   /* _BYTE_DEF_ */
  60      =1  
  61      =1  // WORD type definition, for KEIL Compiler
  62      =1  #ifndef _WORD_DEF_                           // Compiler Specific,
             - written for Little Endian
  63      =1  #define _WORD_DEF_
  64      =1  typedef union {unsigned int i; unsigned char c[2];} WORD;
  65      =1  #define LSB 1                                // All words sent to 
             -and received from the host are
  66      =1  #define MSB 0                                // little endian, thi
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 16  

             -s is switched by software when
  67      =1                                               // neccessary.  These
             - sections of code have been marked
  68      =1                                                                                           // with "Compiler Specific" as above for easier modifi
             -cation
  69      =1  #endif   /* _WORD_DEF_ */
  70      =1  
  71      =1  // DWORD type definition
  72      =1  #ifndef _DWORD_DEF_
  73      =1  #define _DWORD_DEF_
  74      =1  typedef unsigned long DWORD;
  75      =1  #endif /* _DWORD_DEF_ */
  76      =1  
  77      =1  extern volatile DWORD xdata tickcount;
  78      =1  
  79      =1  // Define Endpoint Packet Sizes
  80      =1  #ifdef _USB_LOW_SPEED_
           =1 #define  EP0_PACKET_SIZE         0x40        // This value can be 
             -8,16,32,64 depending on device speed, see USB spec
           =1 #else
  83      =1  #define  EP0_PACKET_SIZE         0x40
  84      =1  #endif /* _USB_LOW_SPEED_ */ 
  85      =1  
  86      =1  #define  EP1_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type  
  87      =1  #define  EP1_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP1_PACKET_SIZE
  88      =1  #define  EP2_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type
  89      =1  #define  EP2_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP2_PACKET_SIZE
  90      =1  
  91      =1  // Standard Descriptor Types
  92      =1  #define  DSC_DEVICE              0x01        // Device Descriptor
  93      =1  #define  DSC_CONFIG              0x02        // Configuration Desc
             -riptor
  94      =1  #define  DSC_STRING              0x03        // String Descriptor
  95      =1  #define  DSC_INTERFACE           0x04        // Interface Descript
             -or
  96      =1  #define  DSC_ENDPOINT            0x05        // Endpoint Descripto
             -r
  97      =1  
  98      =1  // HID Descriptor Types
  99      =1  #define DSC_HID                                 0x21            // HID Class Descriptor
 100      =1  #define DSC_HID_REPORT                  0x22            // HID Report Descriptor
 101      =1  
 102      =1  // Standard Request Codes
 103      =1  #define  GET_STATUS             0x00        // Code for Get Status
 104      =1  #define  CLEAR_FEATURE          0x01        // Code for Clear Feat
             -ure
 105      =1  #define  SET_FEATURE            0x03        // Code for Set Featur
             -e
 106      =1  #define  SET_ADDRESS            0x05        // Code for Set Addres
             -s
 107      =1  #define  GET_DESCRIPTOR         0x06        // Code for Get Descri
             -ptor
 108      =1  #define  SET_DESCRIPTOR         0x07        // Code for Set Descri
             -ptor(not used)
 109      =1  #define  GET_CONFIGURATION      0x08        // Code for Get Config
             -uration
 110      =1  #define  SET_CONFIGURATION      0x09        // Code for Set Config
             -uration
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 17  

 111      =1  #define  GET_INTERFACE          0x0A        // Code for Get Interf
             -ace
 112      =1  #define  SET_INTERFACE          0x0B        // Code for Set Interf
             -ace
 113      =1  #define  SYNCH_FRAME            0x0C        // Code for Synch Fram
             -e(not used)
 114      =1  #define  MSD_RESET                              0xFF            // Mass-storage device Reset
 115      =1  #define  MSD_GET_MAX_LUN                0xFE            // Mass-storage device Get Max LU
             -N
 116      =1  
 117      =1  // HID Request Codes
 118      =1  #define GET_REPORT                              0x01            // Code for Get Report
 119      =1  #define GET_IDLE                                0x02            // Code for Get Idle
 120      =1  #define GET_PROTOCOL                    0x03            // Code for Get Protocol
 121      =1  #define SET_REPORT                              0x09            // Code for Set Report
 122      =1  #define SET_IDLE                                0x0A            // Code for Set Idle
 123      =1  #define SET_PROTOCOL                    0x0B            // Code for Set Protocol
 124      =1  
 125      =1  // Define device states
 126      =1  #define  DEV_ATTACHED            0x00        // Device is in Attac
             -hed State
 127      =1  #define  DEV_POWERED             0x01        // Device is in Power
             -ed State
 128      =1  #define  DEV_DEFAULT             0x02        // Device is in Defau
             -lt State
 129      =1  #define  DEV_ADDRESS             0x03        // Device is in Addre
             -ssed State
 130      =1  #define  DEV_CONFIGURED          0x04        // Device is in Confi
             -gured State
 131      =1  #define  DEV_SUSPENDED           0x05        // Device is in Suspe
             -nded State
 132      =1  
 133      =1  // Define bmRequestType bitmaps
 134      =1  #define  IN_DEVICE               0x00        // Request made to de
             -vice, direction is IN 
 135      =1  #define  OUT_DEVICE              0x80        // Request made to de
             -vice, direction is OUT
 136      =1  #define  IN_INTERFACE            0x01        // Request made to in
             -terface, direction is IN
 137      =1  #define  OUT_INTERFACE           0x81        // Request made to in
             -terface, direction is OUT
 138      =1  #define  IN_ENDPOINT             0x02        // Request made to en
             -dpoint, direction is IN
 139      =1  #define  OUT_ENDPOINT            0x82        // Request made to en
             -dpoint, direction is OUT
 140      =1  
 141      =1  // Define wIndex bitmaps
 142      =1  #define  IN_EP1                  0x81        // Index values used 
             -by Set and Clear feature
 143      =1  #define  OUT_EP1                 0x01        // commands for Endpo
             -int_Halt
 144      =1  #define  IN_EP2                  0x82
 145      =1  #ifdef __F326_VER__
           =1 #define  OUT_EP2                                 0x01           
           =1 #else
 148      =1  #define  OUT_EP2                                 0x01           
 149      =1  #endif
 150      =1  
 151      =1  // Define wValue bitmaps for Standard Feature Selectors
 152      =1  #define  DEVICE_REMOTE_WAKEUP    0x01        // Remote wakeup feat
             -ure(not used)
 153      =1  #define  ENDPOINT_HALT           0x00        // Endpoint_Halt feat
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 18  

             -ure selector
 154      =1  
 155      =1  // Define Endpoint States
 156      =1  #define  EP_IDLE                 0x00        // This signifies End
             -point Idle State
 157      =1  #define  EP_TX                   0x01        // Endpoint Transmit 
             -State
 158      =1  #define  EP_RX                   0x02        // Endpoint Receive S
             -tate
 159      =1  #define  EP_HALT                 0x03        // Endpoint Halt Stat
             -e (return stalls)
 160      =1  #define  EP_STALL                0x04        // Endpoint Stall (se
             -nd procedural stall next status phase)
 161      =1  #define  EP_ADDRESS              0x05        // Endpoint Address (
             -change FADDR during next status phase)
 162      =1  
 163      =1  // Function prototypes
 164      =1  // USB Routines
 165      =1  void USB_Resume(void);                       // This routine resum
             -es USB operation
 166      =1  void USB_Reset(void);                        // Called after USB b
             -us reset
 167      =1  void Handle_Setup(void);                     // Handle setup packe
             -t on Endpoint 0
 168      =1  void Handle_In1(BYTE* ptr_buf);                       // Handle in
             - packet on Endpoint 1
 169      =1  void Handle_Out2(void);                      // Handle out packet 
             -on Endpoint 2
 170      =1  void USB_Suspend(void);                      // This routine calle
             -d when suspend signalling on bus
 171      =1  void Out2_Get_Data(BYTE* ptr_buf);                               // Copies from FIFO to ptr_
             -buf, clears FIFO-full flag.
 172      =1  void Out2_Done(void);                                            // Call this when finished with the d
             -ata
 173      =1  
 174      =1  // Standard Requests
 175      =1  void Get_Status(void);                       // These are called f
             -or each specific standard request
 176      =1  void Clear_Feature(void);
 177      =1  void Set_Feature(void);
 178      =1  void Set_Address(void);
 179      =1  void Get_Descriptor(void);
 180      =1  void Get_Configuration(void);
 181      =1  void Set_Configuration(void);
 182      =1  void Get_Interface(void);
 183      =1  void Set_Interface(void);
 184      =1  
 185      =1  // MSD Specific Requests
 186      =1  // void Reset_Msd(void);
 187      =1  // void Get_MaxLUN(void);
 188      =1  
 189      =1  // Initialization Routines
 190      =1  void Sys_Clk_Init(void);                      // Initialize the sy
             -stem clock(depends on Full/Low speed)
 191      =1  void Port_Init(void);                        // Configure ports fo
             -r this specific application
 192      =1  void USB0_Init(void);                        // Configure USB core
             - for either Full/Low speed
 193      =1  void Timer_Init(void);                       // Start timer 2 for 
             -use by ADC and to check switches
 194      =1  void Adc_Init(void);                         // Configure ADC for 
             -continuous conversion, low-power mode
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 19  

 195      =1  
 196      =1  // Other Routines
 197      =1  void Timer2_ISR(void);                       // Called when Timer 
             -2 overflows, see if switches are pressed
 198      =1  void Adc_ConvComple_ISR(void);               // When a conversion 
             -completes, switch ADC multiplexor
 199      =1  void USB_ISR(void);                          // Called to determin
             -e type of USB interrupt
 200      =1  void Fifo_ReadC(BYTE, unsigned int, BYTE *) ;
 201      =1  extern void Fifo_Read (BYTE, unsigned int, BYTE *) ; // Used for m
             -ultiple byte reads of Endpoint fifos
 202      =1  extern void Fifo_Write (BYTE, unsigned int, BYTE *) reentrant;// U
             -sed for multiple byte writes of Endpoint fifos
 203      =1  void Force_Stall(void);                      // Forces a procedura
             -l stall on Endpoint 0
 204      =1  void Delay(void);                            // Approximately 80 u
             -s/1 ms on Full/Low Speed
 205      =1  
 206      =1  void USB_In(BYTE* ptr_buf,unsigned count);
 207      =1  
 208      =1  void USB_Bulk_Init(void);
 209      =1  
 210      =1  extern unsigned xdata Out_Count;
 211      =1  extern BYTE xdata Out_Packet[EP2_PACKET_SIZE];
 212      =1  extern BYTE xdata In_count;
 213      =1  extern BYTE xdata In_Packet[EP1_PACKET_SIZE];
 214      =1  //extern BYTE xdata In_Overrun;
 215      =1  
 216      =1  #endif      /* _USB_MAIN_H_ */
 217      =1  
  37          #include "F34x_MSD_USB_Descriptor.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_USB_Descriptor.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file for USB firmware.  Defines standard
  10      =1  // descriptor structures.
  11      =1  //
  12      =1  //
  13      =1  // FID:            34X000060
  14      =1  // Target:         C8051F34x
  15      =1  // Tool chain:     Keil
  16      =1  // Command Line:   See Readme.txt
  17      =1  // Project Name:   F34x_USB_MSD
  18      =1  //
  19      =1  // Release 1.1
  20      =1  //    -All changes by PKC
  21      =1  //    -09 JUN 2006
  22      =1  //    -No changes; incremented revision number to match project re
             -vision
  23      =1  //
  24      =1  // Release 1.0
  25      =1  //    -Initial Release
  26      =1  //
  27      =1  
  28      =1  //----------------------------------------------------------------
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 20  

             --------------
  29      =1  // Header File Preprocessor Directive
  30      =1  //----------------------------------------------------------------
             --------------
  31      =1  
  32      =1  #ifndef  _USB_DESC_H_
  33      =1  #define  _USB_DESC_H_
  34      =1  
  35      =1  // BYTE type definition
  36      =1  #ifndef _BYTE_DEF_
           =1 #define _BYTE_DEF_
           =1 typedef unsigned char BYTE;
           =1 #endif   /* _BYTE_DEF_ */
  40      =1  
  41      =1  // WORD type definition, for KEIL Compiler
  42      =1  #ifndef _WORD_DEF_              // Compiler Specific, written for 
             -Little Endian
           =1 #define _WORD_DEF_
           =1 typedef union {unsigned int i; unsigned char c[2];} WORD;
           =1 #define LSB 1                   // All words sent to and received 
             -from the host are
           =1 #define MSB 0                   // little endian, this is switched
             - by software when
           =1                                 // neccessary.  These sections of 
             -code have been marked
           =1                                 // with "Compiler Specific" as abo
             -ve for easier modification
           =1 #endif   /* _WORD_DEF_ */
  50      =1  
  51      =1  //------------------------------------------
  52      =1  // Standard Device Descriptor Type Defintion
  53      =1  //------------------------------------------
  54      =1  typedef code struct
  55      =1  {
  56      =1     BYTE bLength;                // Size of this Descriptor in Byte
             -s
  57      =1     BYTE bDescriptorType;        // Descriptor Type (=1)
  58      =1     WORD bcdUSB;                 // USB Spec Release Number in BCD
  59      =1     BYTE bDeviceClass;           // Device Class Code
  60      =1     BYTE bDeviceSubClass;        // Device Subclass Code 
  61      =1     BYTE bDeviceProtocol;        // Device Protocol Code
  62      =1     BYTE bMaxPacketSize0;        // Maximum Packet Size for EP0 
  63      =1     WORD idVendor;               // Vendor ID 
  64      =1     WORD idProduct;              // Product ID
  65      =1     WORD bcdDevice;              // Device Release Number in BCD
  66      =1     BYTE iManufacturer;          // Index of String Desc for Manufa
             -cturer
  67      =1     BYTE iProduct;               // Index of String Desc for Produc
             -t
  68      =1     BYTE iSerialNumber;          // Index of String Desc for SerNo
  69      =1     BYTE bNumConfigurations;     // Number of possible Configuratio
             -ns
  70      =1  } device_descriptor;            // End of Device Descriptor Type
  71      =1  
  72      =1  //--------------------------------------------------
  73      =1  // Standard Configuration Descriptor Type Definition
  74      =1  //--------------------------------------------------
  75      =1  typedef code struct 
  76      =1  {
  77      =1     BYTE bLength;                // Size of this Descriptor in Byte
             -s
  78      =1     BYTE bDescriptorType;        // Descriptor Type (=2)
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 21  

  79      =1     WORD wTotalLength;           // Total Length of Data for this C
             -onf
  80      =1     BYTE bNumInterfaces;         // No of Interfaces supported by t
             -his Conf
  81      =1     BYTE bConfigurationValue;    // Designator Value for *this* Con
             -figuration
  82      =1     BYTE iConfiguration;         // Index of String Desc for this C
             -onf
  83      =1     BYTE bmAttributes;           // Configuration Characteristics (
             -see below)
  84      =1     BYTE bMaxPower;              // Max. Power Consumption in this 
             -Conf (*2mA)
  85      =1  } configuration_descriptor;     // End of Configuration Descriptor
             - Type
  86      =1  
  87      =1  //----------------------------------------------
  88      =1  // Standard Interface Descriptor Type Definition
  89      =1  //----------------------------------------------
  90      =1  typedef code struct 
  91      =1  {
  92      =1     BYTE bLength;                // Size of this Descriptor in Byte
             -s
  93      =1     BYTE bDescriptorType;        // Descriptor Type (=4)
  94      =1     BYTE bInterfaceNumber;       // Number of *this* Interface (0..
             -)
  95      =1     BYTE bAlternateSetting;      // Alternative for this Interface 
             -(if any)
  96      =1     BYTE bNumEndpoints;          // No of EPs used by this IF (excl
             -. EP0)
  97      =1     BYTE bInterfaceClass;        // Interface Class Code
  98      =1     BYTE bInterfaceSubClass;     // Interface Subclass Code
  99      =1     BYTE bInterfaceProtocol;     // Interface Protocol Code
 100      =1     BYTE iInterface;             // Index of String Desc for this I
             -nterface
 101      =1  } interface_descriptor;         // End of Interface Descriptor Typ
             -e
 102      =1  
 103      =1  //---------------------------------------------
 104      =1  // Standard Endpoint Descriptor Type Definition
 105      =1  //---------------------------------------------
 106      =1  typedef code struct 
 107      =1  {
 108      =1     BYTE bLength;                // Size of this Descriptor in Byte
             -s
 109      =1     BYTE bDescriptorType;        // Descriptor Type (=5)
 110      =1     BYTE bEndpointAddress;       // Endpoint Address (Number + Dire
             -ction)
 111      =1     BYTE bmAttributes;           // Endpoint Attributes (Transfer T
             -ype)
 112      =1     WORD wMaxPacketSize;         // Max. Endpoint Packet Size
 113      =1     BYTE bInterval;              // Polling Interval (Interrupt) ms
 114      =1  } endpoint_descriptor;          // End of Endpoint Descriptor Type
 115      =1  
 116      =1  
 117      =1  //-----------------------------
 118      =1  // Setup Packet Type Definition
 119      =1  //-----------------------------
 120      =1  typedef struct 
 121      =1  {
 122      =1     BYTE bmRequestType;          // Request recipient, type, and di
             -rection
 123      =1     BYTE bRequest;               // Specific standard request numbe
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 22  

             -r
 124      =1     WORD wValue;                 // varies according to request
 125      =1     WORD wIndex;                 // varies according to request
 126      =1     WORD wLength;                // Number of bytes to transfer
 127      =1  } setup_buffer;                 // End of Setup Packet Type
 128      =1  
 129      =1  #endif  /* _USB_DESC_H_ */
  38          
  39          //---------------------------
  40          // Descriptor Declarations
  41          //---------------------------
  42          const device_descriptor Device_Desc =
  43          {
  44             0x12,                // bLength
  45             0x01,                // bDescriptorType
  46             0x1001,              // bcdUSB
  47             0x00,                // bDeviceClass
  48             0x00,                // bDeviceSubClass
  49             0x00,                // bDeviceProtocol
  50             EP0_PACKET_SIZE,     // bMaxPacketSize0
  51             0xC410,              // idVendor
  52             0x0002,              // idProduct 
  53             0x0000,              // bcdDevice 
  54             0x01,                // iManufacturer
  55             0x00,                // iProduct     
  56             0x03,                // iSerialNumber
  57             0x01                 // bNumConfigurations
  58          }; //end of Device_Desc
  59          
  60          const configuration_descriptor Config_Desc = 
  61          {
  62             0x09,                // Length
  63             0x02,                // Type
  64             0x2000,              // Totallength
  65             0x01,                // NumInterfaces
  66             0x01,                // bConfigurationValue
  67             0x00,                // iConfiguration
  68             0x80,                // bmAttributes
  69             0x0F                 // MaxPower
  70          }; //end of Config_Desc
  71          
  72          const interface_descriptor Interface_Desc =
  73          {
  74             0x09,                // bLength
  75             0x04,                // bDescriptorType
  76             0x00,                // bInterfaceNumber
  77             0x00,                // bAlternateSetting
  78             0x02,                // bNumEndpoints
  79             0x08,                // bInterfaceClass // MASS STORAGE DEVICE 
  80             0x06,                // bInterfaceSubClass // SCSI Transparent 
             -command set
  81             0x50,                // bInterfaceProcotol // BULK-ONLY transpo
             -rt
  82             0x00                 // iInterface
  83          }; //end of Interface_Desc
  84          
  85          const endpoint_descriptor Endpoint1_Desc =
  86          {
  87             0x07,                // bLength
  88             0x05,                // bDescriptorType
  89             0x81,                // bEndpointAddress
  90             0x02,                // bmAttributes
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 23  

  91             EP1_PACKET_SIZE_LE,  // MaxPacketSize (LITTLE ENDIAN)
  92             0                   // bInterval
  93          }; //end of Endpoint1_Desc
  94          
  95          const endpoint_descriptor Endpoint2_Desc =
  96          {
  97             0x07,                // bLength
  98             0x05,                // bDescriptorType
  99          #ifdef __F326_VER__
                 0x01,
              #else
 102             0x02,                          // bEndpointAddress
 103          #endif
 104             0x02,                // bmAttributes
 105             EP2_PACKET_SIZE_LE,  // MaxPacketSize (LITTLE ENDIAN)
 106             0                   // bInterval
 107          }; //end of Endpoint2_Desc
 108          
 109          #define STR0LEN 4
 110          
 111          code const BYTE String0_Desc[STR0LEN] =
 112          {
 113             STR0LEN, 0x03, 0x09, 0x04
 114          }; //end of String0_Desc
 115          
 116          #define STR1LEN sizeof("Silicon Laboratories")*2
 117          
 118          code const BYTE String1_Desc[STR1LEN] =
 119          {
 120             STR1LEN, 0x03,
 121             'S', 0,
 122             'i', 0,
 123             'l', 0,
 124             'i', 0,
 125             'c', 0,
 126             'o', 0,
 127             'n', 0,
 128             ' ', 0,
 129             'L', 0,
 130             'a', 0,
 131             'b', 0,
 132             'o', 0,
 133             'r', 0,
 134             'a', 0,
 135             't', 0,
 136             'o', 0,
 137             'r', 0,
 138             'i', 0,
 139             'e', 0,
 140             's', 0,
 141          }; //end of String1_Desc
 142          
 143          #define STR2LEN sizeof("C8051Fxxx Development Board")*2
 144          
 145          code const BYTE String2_Desc[STR2LEN] =
 146          {
 147             STR2LEN, 0x03,
 148             'C', 0,
 149             '8', 0,
 150             '0', 0,
 151             '5', 0,
 152             '1', 0,
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 24  

 153             'F', 0,
 154             'x', 0,
 155             'x', 0,
 156             'x', 0,
 157             ' ', 0,
 158             'D', 0,
 159             'e', 0,
 160             'v', 0,
 161             'e', 0,
 162             'l', 0,
 163             'o', 0,
 164             'p', 0,
 165             'm', 0,
 166             'e', 0,
 167             'n', 0,
 168             't', 0,
 169             ' ', 0,
 170             'B', 0,
 171             'o', 0,
 172             'a', 0,
 173             'r', 0,
 174             'd', 0
 175          }; //end of String2_Desc
 176          
 177          #define STR3LEN sizeof("0079876543210")*2
 178          
 179          code const BYTE String3_Desc[STR3LEN] =
 180          {
 181             STR3LEN, 0x03,
 182             '0', 0,
 183             '0', 0,
 184             '7', 0,
 185             '9', 0,
 186             '8', 0,
 187             '7', 0,
 188             '6', 0,
 189             '5', 0,
 190             '4', 0,
 191             '3', 0,
 192             '2', 0,
 193             '1', 0,
 194             '0', 0
 195          }; //end of String2_Desc
 196          
 197          BYTE* const String_Desc_Table[] =
 198          {
 199             String0_Desc,
 200             String1_Desc,
 201             String2_Desc,
 202             String3_Desc
 203          };
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 25  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 26  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
String0_Desc . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0032H  4
String1_Desc . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0036H  42
endpoint_descriptor. . . . . . . . . .  TYPEDEF  CODE   STRUCT   -----  7
  bLength. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bDescriptorType. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  bEndpointAddress . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  bmAttributes . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  wMaxPacketSize . . . . . . . . . . .  MEMBER   -----  UNION    0004H  2
  bInterval. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
String2_Desc . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0060H  56
String3_Desc . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0098H  28
setup_buffer . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  bmRequestType. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bRequest . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  wValue . . . . . . . . . . . . . . .  MEMBER   -----  UNION    0002H  2
  wIndex . . . . . . . . . . . . . . .  MEMBER   -----  UNION    0004H  2
  wLength. . . . . . . . . . . . . . .  MEMBER   -----  UNION    0006H  2
device_descriptor. . . . . . . . . . .  TYPEDEF  CODE   STRUCT   -----  18
  bLength. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bDescriptorType. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  bcdUSB . . . . . . . . . . . . . . .  MEMBER   -----  UNION    0002H  2
  bDeviceClass . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  bDeviceSubClass. . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  bDeviceProtocol. . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  bMaxPacketSize0. . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  idVendor . . . . . . . . . . . . . .  MEMBER   -----  UNION    0008H  2
  idProduct. . . . . . . . . . . . . .  MEMBER   -----  UNION    000AH  2
  bcdDevice. . . . . . . . . . . . . .  MEMBER   -----  UNION    000CH  2
  iManufacturer. . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  iProduct . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  iSerialNumber. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  bNumConfigurations . . . . . . . . .  MEMBER   -----  U_CHAR   0011H  1
String_Desc_Table. . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0000H  12
configuration_descriptor . . . . . . .  TYPEDEF  CODE   STRUCT   -----  9
  bLength. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bDescriptorType. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  wTotalLength . . . . . . . . . . . .  MEMBER   -----  UNION    0002H  2
  bNumInterfaces . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  bConfigurationValue. . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  iConfiguration . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  bmAttributes . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bMaxPower. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
Device_Desc. . . . . . . . . . . . . .  PUBLIC   CODE   STRUCT   0000H  18
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
Config_Desc. . . . . . . . . . . . . .  PUBLIC   CODE   STRUCT   0012H  9
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  i. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  c. . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
Endpoint1_Desc . . . . . . . . . . . .  PUBLIC   CODE   STRUCT   0024H  7
Endpoint2_Desc . . . . . . . . . . . .  PUBLIC   CODE   STRUCT   002BH  7
interface_descriptor . . . . . . . . .  TYPEDEF  CODE   STRUCT   -----  9
  bLength. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bDescriptorType. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  bInterfaceNumber . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  bAlternateSetting. . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
C51 COMPILER V8.02   F34X_MSD_USB_DESCRIPTOR       07/24/2007 22:07:38 PAGE 27  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  bNumEndpoints. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  bInterfaceClass. . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  bInterfaceSubClass . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  bInterfaceProtocol . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  iInterface . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
Interface_Desc . . . . . . . . . . . .  PUBLIC   CODE   STRUCT   001BH  9


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =    180    ----
   XDATA SIZE       =     12    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
