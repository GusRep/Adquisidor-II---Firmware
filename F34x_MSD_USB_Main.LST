C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE F34X_MSD_USB_MAIN
OBJECT MODULE PLACED IN F34x_MSD_USB_Main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe F34x_MSD_USB_Main.c PW(80) SB LC OT
                    -(9,SIZE) CD DB OE DF(__F340_VER__) LARGE

line level    source

   1          //----------------------------------------------------------------
             --------------
   2          // F34x_MSD_USB_Main.c
   3          //----------------------------------------------------------------
             --------------
   4          // Copyright 2006 Silicon Laboratories, Inc.
   5          // http://www.silabs.com
   6          //
   7          // Program Description:
   8          //
   9          // File contains the main loop of application. It also contains sm
             -all delay 
  10          // function and some simple initializations (CPU, Ports)
  11          //
  12          // How To Test:    See Readme.txt
  13          //
  14          //
  15          // FID:            34X000062
  16          // Target:         C8051F34x
  17          // Tool chain:     Keil
  18          // Command Line:   See Readme.txt
  19          // Project Name:   F34x_USB_MSD
  20          //
  21          // REVISIONS:  11/22/02 - DM:  Added support for switches and samp
             -le USB
  22          // interrupt application.
  23          //
  24          // Release 1.1
  25          //    -All changes by PKC
  26          //    -09 JUN 2006
  27          //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  28          //
  29          // Release 1.0
  30          //    -Initial Release
  31          //
  32          
  33          //----------------------------------------------------------------
             --------------
  34          // Includes
  35          //----------------------------------------------------------------
             --------------
  36          
  37          #include "F34x_MSD_Definitions.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Definitions.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 2   

   9      =1  // Header file with all definitions.
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000032
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef __DEFINITIONS_H__
  32      =1  #define __DEFINITIONS_H__
  33      =1  
  34      =1  #define DEBUG_TIMEOUTS
  35      =1  #include "c8051f340.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // C8051F340.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2005 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Register/bit definitions for the C8051F34x family.
  10      =2  //
  11      =2  //
  12      =2  // FID:            34X000002
  13      =2  // Target:         C8051F340, 'F341, 'F342, 'F343, 'F344, 'F345, '
             -F346, 'F347
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   None
  16      =2  //
  17      =2  // Release 1.0
  18      =2  //    -Initial Release (GP\PKC)
  19      =2  //    -13 DEC 2005
  20      =2  
  21      =2  //----------------------------------------------------------------
             --------------
  22      =2  // Header File Preprocessor Directive
  23      =2  //----------------------------------------------------------------
             --------------
  24      =2  
  25      =2  #ifndef C8051F340_H
  26      =2  #define C8051F340_H
  27      =2  
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 3   

  28      =2  //----------------------------------------------------------------
             --------------
  29      =2  // Byte Registers
  30      =2  //----------------------------------------------------------------
             --------------
  31      =2  
  32      =2  sfr  P0           =  0x80;             // Port 0 Latch
  33      =2  sfr  SP           =  0x81;             // Stack Pointer
  34      =2  sfr  DPL          =  0x82;             // Data Pointer Low
  35      =2  sfr  DPH          =  0x83;             // Data Pointer High
  36      =2  sfr  EMI0TC       =  0x84;             // EMIF Timing
  37      =2  sfr  EMI0CF       =  0x85;             // EMIF Configuration
  38      =2  sfr  OSCLCN       =  0x86;             // Internal Low-Freq Oscill
             -ator Control
  39      =2  sfr  PCON         =  0x87;             // Power Control
  40      =2  sfr  TCON         =  0x88;             // Timer/Counter Control
  41      =2  sfr  TMOD         =  0x89;             // Timer/Counter Mode
  42      =2  sfr  TL0          =  0x8A;             // Timer/Counter 0 Low
  43      =2  sfr  TL1          =  0x8B;             // Timer/Counter 1 Low
  44      =2  sfr  TH0          =  0x8C;             // Timer/Counter 0 High
  45      =2  sfr  TH1          =  0x8D;             // Timer/Counter 1 High
  46      =2  sfr  CKCON        =  0x8E;             // Clock Control
  47      =2  sfr  PSCTL        =  0x8F;             // Program Store R/W Contro
             -l
  48      =2  sfr  P1           =  0x90;             // Port 1 Latch
  49      =2  sfr  TMR3CN       =  0x91;             // Timer/Counter 3Control
  50      =2  sfr  TMR3RLL      =  0x92;             // Timer/Counter 3 Reload L
             -ow
  51      =2  sfr  TMR3RLH      =  0x93;             // Timer/Counter 3 Reload H
             -igh
  52      =2  sfr  TMR3L        =  0x94;             // Timer/Counter 3Low
  53      =2  sfr  TMR3H        =  0x95;             // Timer/Counter 3 High
  54      =2  sfr  USB0ADR      =  0x96;             // USB0 Indirect Address Re
             -gister
  55      =2  sfr  USB0DAT      =  0x97;             // USB0 Data Register
  56      =2  sfr  SCON0        =  0x98;             // UART0 Control
  57      =2  sfr  SBUF0        =  0x99;             // UART0 Data Buffer
  58      =2  sfr  CPT1CN       =  0x9A;             // Comparator1 Control
  59      =2  sfr  CPT0CN       =  0x9B;             // Comparator0 Control
  60      =2  sfr  CPT1MD       =  0x9C;             // Comparator1 Mode Selecti
             -on
  61      =2  sfr  CPT0MD       =  0x9D;             // Comparator0 Mode Selecti
             -on
  62      =2  sfr  CPT1MX       =  0x9E;             // Comparator1 MUX Selectio
             -n
  63      =2  sfr  CPT0MX       =  0x9F;             // Comparator0 MUX Selectio
             -n
  64      =2  sfr  P2           =  0xA0;             // Port 2 Latch
  65      =2  sfr  SPI0CFG      =  0xA1;             // SPI Configuration
  66      =2  sfr  SPI0CKR      =  0xA2;             // SPI Clock Rate Control
  67      =2  sfr  SPI0DAT      =  0xA3;             // SPI Data
  68      =2  sfr  P0MDOUT      =  0xA4;             // Port 0 Output Mode Confi
             -guration
  69      =2  sfr  P1MDOUT      =  0xA5;             // Port 1 Output Mode Confi
             -guration
  70      =2  sfr  P2MDOUT      =  0xA6;             // Port 2 Output Mode Confi
             -guration
  71      =2  sfr  P3MDOUT      =  0xA7;             // Port 3 Output Mode Confi
             -guration
  72      =2  sfr  IE           =  0xA8;             // Interrupt Enable
  73      =2  sfr  CLKSEL       =  0xA9;             // Clock Select
  74      =2  sfr  EMI0CN       =  0xAA;             // External Memory Interfac
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 4   

             -e Control
  75      =2  sfr  SBCON1       =  0xAC;             // UART1 Baud Rate Generato
             -r Control
  76      =2  sfr  P4MDOUT      =  0xAE;             // Port 4 Output Mode Confi
             -guration
  77      =2  sfr  PFE0CN       =  0xAF;             // Prefetch Engine Control
  78      =2  sfr  P3           =  0xB0;             // Port 3 Latch
  79      =2  sfr  OSCXCN       =  0xB1;             // External Oscillator Cont
             -rol
  80      =2  sfr  OSCICN       =  0xB2;             // Internal Oscillator Cont
             -rol
  81      =2  sfr  OSCICL       =  0xB3;             // Internal Oscillator Cali
             -bration
  82      =2  sfr  SBRLL1       =  0xB4;             // UART1 Baud Rate Generato
             -r Low
  83      =2  sfr  SBRLH1       =  0xB5;             // UART1 Baud Rate Generato
             -r High
  84      =2  sfr  FLSCL        =  0xB6;             // Flash Scale
  85      =2  sfr  FLKEY        =  0xB7;             // Flash Lock and Key
  86      =2  sfr  IP           =  0xB8;             // Interrupt Priority
  87      =2  sfr  CLKMUL       =  0xB9;             // Clock Multiplier
  88      =2  sfr  AMX0N        =  0xBA;             // AMUX0 Negative Channel S
             -elect
  89      =2  sfr  AMX0P        =  0xBB;             // AMUX0 Positive Channel S
             -elect
  90      =2  sfr  ADC0CF       =  0xBC;             // ADC0 Configuration
  91      =2  sfr  ADC0L        =  0xBD;             // ADC0 Low
  92      =2  sfr  ADC0H        =  0xBE;             // ADC0 High
  93      =2  sfr  SMB0CN       =  0xC0;             // SMBus Control
  94      =2  sfr  SMB0CF       =  0xC1;             // SMBus Configuration
  95      =2  sfr  SMB0DAT      =  0xC2;             // SMBus Data
  96      =2  sfr  ADC0GTL      =  0xC3;             // ADC0 Greater-Than Compar
             -e Low
  97      =2  sfr  ADC0GTH      =  0xC4;             // ADC0 Greater-Than Compar
             -e High
  98      =2  sfr  ADC0LTL      =  0xC5;             // ADC0 Less-Than Compare W
             -ord Low
  99      =2  sfr  ADC0LTH      =  0xC6;             // ADC0 Less-Than Compare W
             -ord High
 100      =2  sfr  P4           =  0xC7;             // Port 4 Latch
 101      =2  sfr  TMR2CN       =  0xC8;             // Timer/Counter 2 Control
 102      =2  sfr  REG0CN       =  0xC9;             // Voltage Regulator Contro
             -l
 103      =2  sfr  TMR2RLL      =  0xCA;             // Timer/Counter 2 Reload L
             -ow
 104      =2  sfr  TMR2RLH      =  0xCB;             // Timer/Counter 2 Reload H
             -igh
 105      =2  sfr  TMR2L        =  0xCC;             // Timer/Counter 2 Low
 106      =2  sfr  TMR2H        =  0xCD;             // Timer/Counter 2 High
 107      =2  sfr  PSW          =  0xD0;             // Program Status Word
 108      =2  sfr  REF0CN       =  0xD1;             // Voltage Reference Contro
             -l
 109      =2  sfr  SCON1        =  0xD2;             // UART1 Control
 110      =2  sfr  SBUF1        =  0xD3;             // UART1 Data Buffer
 111      =2  sfr  P0SKIP       =  0xD4;             // Port 0 Skip
 112      =2  sfr  P1SKIP       =  0xD5;             // Port 1 Skip
 113      =2  sfr  P2SKIP       =  0xD6;             // Port 2 Skip
 114      =2  sfr  USB0XCN      =  0xD7;             // USB0 Transceiver Control
 115      =2  sfr  PCA0CN       =  0xD8;             // PCA0 Control
 116      =2  sfr  PCA0MD       =  0xD9;             // PCA0 Mode
 117      =2  sfr  PCA0CPM0     =  0xDA;             // PCA0 Module 0 Mode Regis
             -ter
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 5   

 118      =2  sfr  PCA0CPM1     =  0xDB;             // PCA0 Module 1 Mode Regis
             -ter
 119      =2  sfr  PCA0CPM2     =  0xDC;             // PCA0 Module 2 Mode Regis
             -ter
 120      =2  sfr  PCA0CPM3     =  0xDD;             // PCA0 Module 3 Mode Regis
             -ter
 121      =2  sfr  PCA0CPM4     =  0xDE;             // PCA0 Module 4 Mode Regis
             -ter
 122      =2  sfr  P3SKIP       =  0xDF;             // Port 3 Skip
 123      =2  sfr  ACC          =  0xE0;             // Accumulator
 124      =2  sfr  XBR0         =  0xE1;             // Port I/O Crossbar Contro
             -l 0
 125      =2  sfr  XBR1         =  0xE2;             // Port I/O Crossbar Contro
             -l 1
 126      =2  sfr  XBR2         =  0xE3;             // Port I/O Crossbar Contro
             -l 2
 127      =2  sfr  IT01CF       =  0xE4;             // INT0/INT1 Configuration
 128      =2  sfr  SMOD1        =  0xE5;             // UART1 Mode
 129      =2  sfr  EIE1         =  0xE6;             // Extended Interrupt Enabl
             -e 1
 130      =2  sfr  EIE2         =  0xE7;             // Extended Interrupt Enabl
             -e 2
 131      =2  sfr  ADC0CN       =  0xE8;             // ADC0 Control
 132      =2  sfr  PCA0CPL1     =  0xE9;             // PCA0 Capture 1 Low
 133      =2  sfr  PCA0CPH1     =  0xEA;             // PCA0 Capture 1 High
 134      =2  sfr  PCA0CPL2     =  0xEB;             // PCA0 Capture 2 Low
 135      =2  sfr  PCA0CPH2     =  0xEC;             // PCA0 Capture 2 High
 136      =2  sfr  PCA0CPL3     =  0xED;             // PCA0 Capture 3 Low
 137      =2  sfr  PCA0CPH3     =  0xEE;             // PCA0 Capture 3 High
 138      =2  sfr  RSTSRC       =  0xEF;             // Reset Source Configurati
             -on/Status
 139      =2  sfr  B            =  0xF0;             // B Register
 140      =2  sfr  P0MDIN       =  0xF1;             // Port 0 Input Mode Config
             -uration
 141      =2  sfr  P1MDIN       =  0xF2;             // Port 1 Input Mode Config
             -uration
 142      =2  sfr  P2MDIN       =  0xF3;             // Port 2 Input Mode Config
             -uration
 143      =2  sfr  P3MDIN       =  0xF4;             // Port 3 Input Mode Config
             -uration
 144      =2  sfr  P4MDIN       =  0xF5;             // Port 4 Input Mode Config
             -uration
 145      =2  sfr  EIP1         =  0xF6;             // Extended Interrupt Prior
             -ity 1
 146      =2  sfr  EIP2         =  0xF7;             // Extended Interrupt Prior
             -ity 2
 147      =2  sfr  SPI0CN       =  0xF8;             // SPI0 Control
 148      =2  sfr  PCA0L        =  0xF9;             // PCA0 Counter Low
 149      =2  sfr  PCA0H        =  0xFA;             // PCA0 Counter High
 150      =2  sfr  PCA0CPL0     =  0xFB;             // PCA0 Capture 0 Low
 151      =2  sfr  PCA0CPH0     =  0xFC;             // PCA0 Capture 0 High
 152      =2  sfr  PCA0CPL4     =  0xFD;             // PCA0 Capture 4 Low
 153      =2  sfr  PCA0CPH4     =  0xFE;             // PCA0 Capture 4 High
 154      =2  sfr  VDM0CN       =  0xFF;             // VDD Monitor Control
 155      =2  
 156      =2  
 157      =2  //----------------------------------------------------------------
             --------------
 158      =2  // Bit Definitions
 159      =2  //----------------------------------------------------------------
             --------------
 160      =2  
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 6   

 161      =2  // TCON 0x88
 162      =2  sbit TF1     = 0x8F;                   // Timer1 overflow flag
 163      =2  sbit TR1     = 0x8E;                   // Timer1 on/off control
 164      =2  sbit TF0     = 0x8D;                   // Timer0 overflow flag
 165      =2  sbit TR0     = 0x8C;                   // Timer0 on/off control
 166      =2  sbit IE1     = 0x8B;                   // Ext interrupt 1 edge fla
             -g
 167      =2  sbit IT1     = 0x8A;                   // Ext interrupt 1 type
 168      =2  sbit IE0     = 0x89;                   // Ext interrupt 0 edge fla
             -g
 169      =2  sbit IT0     = 0x88;                   // Ext interrupt 0 type
 170      =2  
 171      =2  // SCON0 0x98
 172      =2  sbit S0MODE  = 0x9F;                   // Serial mode control bit 
             -0
 173      =2                                         // Bit6 UNUSED
 174      =2  sbit MCE0    = 0x9D;                   // Multiprocessor communica
             -tion enable
 175      =2  sbit REN0    = 0x9C;                   // Receive enable
 176      =2  sbit TB80    = 0x9B;                   // Transmit bit 8
 177      =2  sbit RB80    = 0x9A;                   // Receive bit 8
 178      =2  sbit TI0     = 0x99;                   // Transmit interrupt flag
 179      =2  sbit RI0     = 0x98;                   // Receive interrupt flag
 180      =2  
 181      =2  // IE 0xA8
 182      =2  sbit EA      = 0xAF;                   // Global interrupt enable
 183      =2  sbit ESPI0   = 0xAE;                   // SPI0 interrupt enable
 184      =2  sbit ET2     = 0xAD;                   // Timer2 interrupt enable
 185      =2  sbit ES0     = 0xAC;                   // UART0 interrupt enable
 186      =2  sbit ET1     = 0xAB;                   // Timer1 interrupt enable
 187      =2  sbit EX1     = 0xAA;                   // External interrupt 1 ena
             -ble
 188      =2  sbit ET0     = 0xA9;                   // Timer0 interrupt enable
 189      =2  sbit EX0     = 0xA8;                   // External interrupt 0 ena
             -ble
 190      =2  
 191      =2  // IP 0xB8
 192      =2                                         // Bit7 UNUSED
 193      =2  sbit PSPI0   = 0xBE;                   // SPI0 interrupt priority
 194      =2  sbit PT2     = 0xBD;                   // Timer2 priority
 195      =2  sbit PS0     = 0xBC;                   // UART0 priority
 196      =2  sbit PT1     = 0xBB;                   // Timer1 priority
 197      =2  sbit PX1     = 0xBA;                   // External interrupt 1 pri
             -ority
 198      =2  sbit PT0     = 0xB9;                   // Timer0 priority
 199      =2  sbit PX0     = 0xB8;                   // External interrupt 0 pri
             -ority
 200      =2  
 201      =2  // SMB0CN 0xC0
 202      =2  sbit MASTER  = 0xC7;                   // Master/slave indicator
 203      =2  sbit TXMODE  = 0xC6;                   // Transmit mode indicator
 204      =2  sbit STA     = 0xC5;                   // Start flag
 205      =2  sbit STO     = 0xC4;                   // Stop flag
 206      =2  sbit ACKRQ   = 0xC3;                   // Acknowledge request
 207      =2  sbit ARBLOST = 0xC2;                   // Arbitration lost indicat
             -or
 208      =2  sbit ACK     = 0xC1;                   // Acknowledge flag
 209      =2  sbit SI      = 0xC0;                   // SMBus interrupt flag
 210      =2  
 211      =2  // TMR2CN 0xC8
 212      =2  sbit TF2H    = 0xCF;                   // Timer2 high byte overflo
             -w flag
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 7   

 213      =2  sbit TF2L    = 0xCE;                   // Timer2 low byte overflow
             - flag
 214      =2  sbit TF2LEN  = 0xCD;                   // Timer2 low byte interrup
             -t enable
 215      =2  sbit T2CE    = 0xCC;                   // Timer2 capture enable
 216      =2  sbit T2SPLIT = 0xCB;                   // Timer2 split mode enable
 217      =2  sbit TR2     = 0xCA;                   // Timer2 on/off control
 218      =2  sbit T2CSS   = 0xC9;                   // Timer 2 Capture Source s
             -elect
 219      =2  sbit T2XCLK  = 0xC8;                   // Timer2 external clock se
             -lect
 220      =2  
 221      =2  // PSW 0xD0
 222      =2  sbit CY      = 0xD7;                   // Carry flag
 223      =2  sbit AC      = 0xD6;                   // Auxiliary carry flag
 224      =2  sbit F0      = 0xD5;                   // User flag 0
 225      =2  sbit RS1     = 0xD4;                   // Register bank select 1
 226      =2  sbit RS0     = 0xD3;                   // Register bank select 0
 227      =2  sbit OV      = 0xD2;                   // Overflow flag
 228      =2  sbit F1      = 0xD1;                   // User flag 1
 229      =2  sbit P       = 0xD0;                   // Accumulator parity flag
 230      =2  
 231      =2  // PCA0CN 0xD8
 232      =2  sbit CF      = 0xDF;                   // PCA0 counter overflow fl
             -ag
 233      =2  sbit CR      = 0xDE;                   // PCA0 counter run control
 234      =2                                         // Bit5 UNUSED
 235      =2  sbit CCF4    = 0xDC;                   // PCA0 module4 capture/com
             -pare flag
 236      =2  sbit CCF3    = 0xDB;                   // PCA0 module3 capture/com
             -pare flag
 237      =2  sbit CCF2    = 0xDA;                   // PCA0 module2 capture/com
             -pare flag
 238      =2  sbit CCF1    = 0xD9;                   // PCA0 module1 capture/com
             -pare flag
 239      =2  sbit CCF0    = 0xD8;                   // PCA0 module0 capture/com
             -pare flag
 240      =2  
 241      =2  // ADC0CN 0xE8
 242      =2  sbit AD0EN   = 0xEF;                   // ADC0 enable
 243      =2  sbit AD0TM   = 0xEE;                   // ADC0 track mode
 244      =2  sbit AD0INT  = 0xED;                   // ADC0 conversion complete
             - interrupt flag
 245      =2  sbit AD0BUSY = 0xEC;                   // ADC0 busy flag
 246      =2  sbit AD0WINT = 0xEB;                   // ADC0 window compare inte
             -rrupt flag
 247      =2  sbit AD0CM2  = 0xEA;                   // ADC0 conversion mode sel
             -ect 2
 248      =2  sbit AD0CM1  = 0xE9;                   // ADC0 conversion mode sel
             -ect 1
 249      =2  sbit AD0CM0  = 0xE8;                   // ADC0 conversion mode sel
             -ect 0
 250      =2  
 251      =2  // SPI0CN 0xF8
 252      =2  sbit SPIF    = 0xFF;                   // SPI0 interrupt flag
 253      =2  sbit WCOL    = 0xFE;                   // SPI0 write collision fla
             -g
 254      =2  sbit MODF    = 0xFD;                   // SPI0 mode fault flag
 255      =2  sbit RXOVRN  = 0xFC;                   // SPI0 rx overrun flag
 256      =2  sbit NSSMD1  = 0xFB;                   // SPI0 slave select mode 1
 257      =2  sbit NSSMD0  = 0xFA;                   // SPI0 slave select mode 0
 258      =2  sbit TXBMT   = 0xF9;                   // SPI0 transmit buffer emp
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 8   

             -ty
 259      =2  sbit SPIEN   = 0xF8;                   // SPI0 SPI enable
 260      =2  
 261      =2  
 262      =2  //----------------------------------------------------------------
             --------------
 263      =2  // Interrupt Priorities
 264      =2  //----------------------------------------------------------------
             --------------
 265      =2  
 266      =2  #define INTERRUPT_INT0             0   // External Interrupt 0
 267      =2  #define INTERRUPT_TIMER0           1   // Timer0 Overflow
 268      =2  #define INTERRUPT_INT1             2   // External Interrupt 1
 269      =2  #define INTERRUPT_TIMER1           3   // Timer1 Overflow
 270      =2  #define INTERRUPT_UART0            4   // Serial Port 0
 271      =2  #define INTERRUPT_TIMER2           5   // Timer2 Overflow
 272      =2  #define INTERRUPT_SPI0             6   // Serial Peripheral Interf
             -ace 0
 273      =2  #define INTERRUPT_SMBUS0           7   // SMBus0 Interface
 274      =2  #define INTERRUPT_USB0             8   // USB Interface
 275      =2  #define INTERRUPT_ADC0_WINDOW      9   // ADC0 Window Comparison
 276      =2  #define INTERRUPT_ADC0_EOC         10  // ADC0 End Of Conversion
 277      =2  #define INTERRUPT_PCA0             11  // PCA0 Peripheral
 278      =2  #define INTERRUPT_COMPARATOR0      12  // Comparator0
 279      =2  #define INTERRUPT_COMPARATOR1      13  // Comparator1
 280      =2  #define INTERRUPT_TIMER3           14  // Timer3 Overflow
 281      =2  #define INTERRUPT_VBUS_LEVEL       15  // VBUS level-triggered int
             -errupt
 282      =2  #define INTERRUPT_UART1            16  // Serial Port 1
 283      =2  
 284      =2  //----------------------------------------------------------------
             --------------
 285      =2  // Header File PreProcessor Directive
 286      =2  //----------------------------------------------------------------
             --------------
 287      =2  
 288      =2  #endif                                 // #define C8051F340_H
 289      =2  
 290      =2  //----------------------------------------------------------------
             --------------
 291      =2  // End Of File
 292      =2  //----------------------------------------------------------------
             --------------
  36      =1  #ifdef DEBUG_TIMEOUTS
  37      =1  sbit START_STOP_SPI = P3^0 ;
  38      =1  sbit START_STOP_READ_TO = P3^1;
  39      =1  sbit START_STOP_WRITE_TO = P3^2;
  40      =1  
  41      =1  #define START_SPI_TIMEOUT (START_STOP_SPI = 1)
  42      =1  #define STOP_SPI_TIME_OUT (START_STOP_SPI = 0)
  43      =1  #define START_READ_COPY (START_STOP_READ_TO = 1)
  44      =1  #define STOP_READ_COPY (START_STOP_READ_TO = 0)
  45      =1  #define START_WRITE_COPY (START_STOP_WRITE_TO = 1)
  46      =1  #define STOP_WRITE_COPY (START_STOP_WRITE_TO = 0)
  47      =1  #else
           =1 
           =1 #define START_SPI_TIMEOUT /\
           =1 /
           =1 #define STOP_SPI_TIME_OUT /\
           =1 /
           =1 #define START_READ_COPY /\
           =1 /
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 9   

           =1 #define STOP_READ_COPY /\
           =1 /
           =1 #define START_WRITE_COPY /\
           =1 /
           =1 #define STOP_WRITE_COPY /\
           =1 /
           =1 
           =1 #endif
  63      =1  
  64      =1  #define ENDLINE         "\r\n"
  65      =1  #define ENDLINE_SGN '\r'
  66      =1  
  67      =1  #endif
  38          #include "F34x_MSD_Physical_Settings.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Physical_Settings.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with common definitions
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000048
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef __PHYSICAL_SETTINGS_H__
  32      =1  #define __PHYSICAL_SETTINGS_H__
  33      =1  
  34      =1  #include "c8051f340.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // C8051F340.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2005 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 10  

   8      =2  //
   9      =2  // Register/bit definitions for the C8051F34x family.
  10      =2  //
  11      =2  //
  12      =2  // FID:            34X000002
  13      =2  // Target:         C8051F340, 'F341, 'F342, 'F343, 'F344, 'F345, '
             -F346, 'F347
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   None
  16      =2  //
  17      =2  // Release 1.0
  18      =2  //    -Initial Release (GP\PKC)
  19      =2  //    -13 DEC 2005
  20      =2  
  21      =2  //----------------------------------------------------------------
             --------------
  22      =2  // Header File Preprocessor Directive
  23      =2  //----------------------------------------------------------------
             --------------
  24      =2  
  25      =2  #ifndef C8051F340_H
           =2 #define C8051F340_H
           =2 
           =2 //----------------------------------------------------------------
             --------------
           =2 // Byte Registers
           =2 //----------------------------------------------------------------
             --------------
           =2 
           =2 sfr  P0           =  0x80;             // Port 0 Latch
           =2 sfr  SP           =  0x81;             // Stack Pointer
           =2 sfr  DPL          =  0x82;             // Data Pointer Low
           =2 sfr  DPH          =  0x83;             // Data Pointer High
           =2 sfr  EMI0TC       =  0x84;             // EMIF Timing
           =2 sfr  EMI0CF       =  0x85;             // EMIF Configuration
           =2 sfr  OSCLCN       =  0x86;             // Internal Low-Freq Oscill
             -ator Control
           =2 sfr  PCON         =  0x87;             // Power Control
           =2 sfr  TCON         =  0x88;             // Timer/Counter Control
           =2 sfr  TMOD         =  0x89;             // Timer/Counter Mode
           =2 sfr  TL0          =  0x8A;             // Timer/Counter 0 Low
           =2 sfr  TL1          =  0x8B;             // Timer/Counter 1 Low
           =2 sfr  TH0          =  0x8C;             // Timer/Counter 0 High
           =2 sfr  TH1          =  0x8D;             // Timer/Counter 1 High
           =2 sfr  CKCON        =  0x8E;             // Clock Control
           =2 sfr  PSCTL        =  0x8F;             // Program Store R/W Contro
             -l
           =2 sfr  P1           =  0x90;             // Port 1 Latch
           =2 sfr  TMR3CN       =  0x91;             // Timer/Counter 3Control
           =2 sfr  TMR3RLL      =  0x92;             // Timer/Counter 3 Reload L
             -ow
           =2 sfr  TMR3RLH      =  0x93;             // Timer/Counter 3 Reload H
             -igh
           =2 sfr  TMR3L        =  0x94;             // Timer/Counter 3Low
           =2 sfr  TMR3H        =  0x95;             // Timer/Counter 3 High
           =2 sfr  USB0ADR      =  0x96;             // USB0 Indirect Address Re
             -gister
           =2 sfr  USB0DAT      =  0x97;             // USB0 Data Register
           =2 sfr  SCON0        =  0x98;             // UART0 Control
           =2 sfr  SBUF0        =  0x99;             // UART0 Data Buffer
           =2 sfr  CPT1CN       =  0x9A;             // Comparator1 Control
           =2 sfr  CPT0CN       =  0x9B;             // Comparator0 Control
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 11  

           =2 sfr  CPT1MD       =  0x9C;             // Comparator1 Mode Selecti
             -on
           =2 sfr  CPT0MD       =  0x9D;             // Comparator0 Mode Selecti
             -on
           =2 sfr  CPT1MX       =  0x9E;             // Comparator1 MUX Selectio
             -n
           =2 sfr  CPT0MX       =  0x9F;             // Comparator0 MUX Selectio
             -n
           =2 sfr  P2           =  0xA0;             // Port 2 Latch
           =2 sfr  SPI0CFG      =  0xA1;             // SPI Configuration
           =2 sfr  SPI0CKR      =  0xA2;             // SPI Clock Rate Control
           =2 sfr  SPI0DAT      =  0xA3;             // SPI Data
           =2 sfr  P0MDOUT      =  0xA4;             // Port 0 Output Mode Confi
             -guration
           =2 sfr  P1MDOUT      =  0xA5;             // Port 1 Output Mode Confi
             -guration
           =2 sfr  P2MDOUT      =  0xA6;             // Port 2 Output Mode Confi
             -guration
           =2 sfr  P3MDOUT      =  0xA7;             // Port 3 Output Mode Confi
             -guration
           =2 sfr  IE           =  0xA8;             // Interrupt Enable
           =2 sfr  CLKSEL       =  0xA9;             // Clock Select
           =2 sfr  EMI0CN       =  0xAA;             // External Memory Interfac
             -e Control
           =2 sfr  SBCON1       =  0xAC;             // UART1 Baud Rate Generato
             -r Control
           =2 sfr  P4MDOUT      =  0xAE;             // Port 4 Output Mode Confi
             -guration
           =2 sfr  PFE0CN       =  0xAF;             // Prefetch Engine Control
           =2 sfr  P3           =  0xB0;             // Port 3 Latch
           =2 sfr  OSCXCN       =  0xB1;             // External Oscillator Cont
             -rol
           =2 sfr  OSCICN       =  0xB2;             // Internal Oscillator Cont
             -rol
           =2 sfr  OSCICL       =  0xB3;             // Internal Oscillator Cali
             -bration
           =2 sfr  SBRLL1       =  0xB4;             // UART1 Baud Rate Generato
             -r Low
           =2 sfr  SBRLH1       =  0xB5;             // UART1 Baud Rate Generato
             -r High
           =2 sfr  FLSCL        =  0xB6;             // Flash Scale
           =2 sfr  FLKEY        =  0xB7;             // Flash Lock and Key
           =2 sfr  IP           =  0xB8;             // Interrupt Priority
           =2 sfr  CLKMUL       =  0xB9;             // Clock Multiplier
           =2 sfr  AMX0N        =  0xBA;             // AMUX0 Negative Channel S
             -elect
           =2 sfr  AMX0P        =  0xBB;             // AMUX0 Positive Channel S
             -elect
           =2 sfr  ADC0CF       =  0xBC;             // ADC0 Configuration
           =2 sfr  ADC0L        =  0xBD;             // ADC0 Low
           =2 sfr  ADC0H        =  0xBE;             // ADC0 High
           =2 sfr  SMB0CN       =  0xC0;             // SMBus Control
           =2 sfr  SMB0CF       =  0xC1;             // SMBus Configuration
           =2 sfr  SMB0DAT      =  0xC2;             // SMBus Data
           =2 sfr  ADC0GTL      =  0xC3;             // ADC0 Greater-Than Compar
             -e Low
           =2 sfr  ADC0GTH      =  0xC4;             // ADC0 Greater-Than Compar
             -e High
           =2 sfr  ADC0LTL      =  0xC5;             // ADC0 Less-Than Compare W
             -ord Low
           =2 sfr  ADC0LTH      =  0xC6;             // ADC0 Less-Than Compare W
             -ord High
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 12  

           =2 sfr  P4           =  0xC7;             // Port 4 Latch
           =2 sfr  TMR2CN       =  0xC8;             // Timer/Counter 2 Control
           =2 sfr  REG0CN       =  0xC9;             // Voltage Regulator Contro
             -l
           =2 sfr  TMR2RLL      =  0xCA;             // Timer/Counter 2 Reload L
             -ow
           =2 sfr  TMR2RLH      =  0xCB;             // Timer/Counter 2 Reload H
             -igh
           =2 sfr  TMR2L        =  0xCC;             // Timer/Counter 2 Low
           =2 sfr  TMR2H        =  0xCD;             // Timer/Counter 2 High
           =2 sfr  PSW          =  0xD0;             // Program Status Word
           =2 sfr  REF0CN       =  0xD1;             // Voltage Reference Contro
             -l
           =2 sfr  SCON1        =  0xD2;             // UART1 Control
           =2 sfr  SBUF1        =  0xD3;             // UART1 Data Buffer
           =2 sfr  P0SKIP       =  0xD4;             // Port 0 Skip
           =2 sfr  P1SKIP       =  0xD5;             // Port 1 Skip
           =2 sfr  P2SKIP       =  0xD6;             // Port 2 Skip
           =2 sfr  USB0XCN      =  0xD7;             // USB0 Transceiver Control
           =2 sfr  PCA0CN       =  0xD8;             // PCA0 Control
           =2 sfr  PCA0MD       =  0xD9;             // PCA0 Mode
           =2 sfr  PCA0CPM0     =  0xDA;             // PCA0 Module 0 Mode Regis
             -ter
           =2 sfr  PCA0CPM1     =  0xDB;             // PCA0 Module 1 Mode Regis
             -ter
           =2 sfr  PCA0CPM2     =  0xDC;             // PCA0 Module 2 Mode Regis
             -ter
           =2 sfr  PCA0CPM3     =  0xDD;             // PCA0 Module 3 Mode Regis
             -ter
           =2 sfr  PCA0CPM4     =  0xDE;             // PCA0 Module 4 Mode Regis
             -ter
           =2 sfr  P3SKIP       =  0xDF;             // Port 3 Skip
           =2 sfr  ACC          =  0xE0;             // Accumulator
           =2 sfr  XBR0         =  0xE1;             // Port I/O Crossbar Contro
             -l 0
           =2 sfr  XBR1         =  0xE2;             // Port I/O Crossbar Contro
             -l 1
           =2 sfr  XBR2         =  0xE3;             // Port I/O Crossbar Contro
             -l 2
           =2 sfr  IT01CF       =  0xE4;             // INT0/INT1 Configuration
           =2 sfr  SMOD1        =  0xE5;             // UART1 Mode
           =2 sfr  EIE1         =  0xE6;             // Extended Interrupt Enabl
             -e 1
           =2 sfr  EIE2         =  0xE7;             // Extended Interrupt Enabl
             -e 2
           =2 sfr  ADC0CN       =  0xE8;             // ADC0 Control
           =2 sfr  PCA0CPL1     =  0xE9;             // PCA0 Capture 1 Low
           =2 sfr  PCA0CPH1     =  0xEA;             // PCA0 Capture 1 High
           =2 sfr  PCA0CPL2     =  0xEB;             // PCA0 Capture 2 Low
           =2 sfr  PCA0CPH2     =  0xEC;             // PCA0 Capture 2 High
           =2 sfr  PCA0CPL3     =  0xED;             // PCA0 Capture 3 Low
           =2 sfr  PCA0CPH3     =  0xEE;             // PCA0 Capture 3 High
           =2 sfr  RSTSRC       =  0xEF;             // Reset Source Configurati
             -on/Status
           =2 sfr  B            =  0xF0;             // B Register
           =2 sfr  P0MDIN       =  0xF1;             // Port 0 Input Mode Config
             -uration
           =2 sfr  P1MDIN       =  0xF2;             // Port 1 Input Mode Config
             -uration
           =2 sfr  P2MDIN       =  0xF3;             // Port 2 Input Mode Config
             -uration
           =2 sfr  P3MDIN       =  0xF4;             // Port 3 Input Mode Config
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 13  

             -uration
           =2 sfr  P4MDIN       =  0xF5;             // Port 4 Input Mode Config
             -uration
           =2 sfr  EIP1         =  0xF6;             // Extended Interrupt Prior
             -ity 1
           =2 sfr  EIP2         =  0xF7;             // Extended Interrupt Prior
             -ity 2
           =2 sfr  SPI0CN       =  0xF8;             // SPI0 Control
           =2 sfr  PCA0L        =  0xF9;             // PCA0 Counter Low
           =2 sfr  PCA0H        =  0xFA;             // PCA0 Counter High
           =2 sfr  PCA0CPL0     =  0xFB;             // PCA0 Capture 0 Low
           =2 sfr  PCA0CPH0     =  0xFC;             // PCA0 Capture 0 High
           =2 sfr  PCA0CPL4     =  0xFD;             // PCA0 Capture 4 Low
           =2 sfr  PCA0CPH4     =  0xFE;             // PCA0 Capture 4 High
           =2 sfr  VDM0CN       =  0xFF;             // VDD Monitor Control
           =2 
           =2 
           =2 //----------------------------------------------------------------
             --------------
           =2 // Bit Definitions
           =2 //----------------------------------------------------------------
             --------------
           =2 
           =2 // TCON 0x88
           =2 sbit TF1     = 0x8F;                   // Timer1 overflow flag
           =2 sbit TR1     = 0x8E;                   // Timer1 on/off control
           =2 sbit TF0     = 0x8D;                   // Timer0 overflow flag
           =2 sbit TR0     = 0x8C;                   // Timer0 on/off control
           =2 sbit IE1     = 0x8B;                   // Ext interrupt 1 edge fla
             -g
           =2 sbit IT1     = 0x8A;                   // Ext interrupt 1 type
           =2 sbit IE0     = 0x89;                   // Ext interrupt 0 edge fla
             -g
           =2 sbit IT0     = 0x88;                   // Ext interrupt 0 type
           =2 
           =2 // SCON0 0x98
           =2 sbit S0MODE  = 0x9F;                   // Serial mode control bit 
             -0
           =2                                        // Bit6 UNUSED
           =2 sbit MCE0    = 0x9D;                   // Multiprocessor communica
             -tion enable
           =2 sbit REN0    = 0x9C;                   // Receive enable
           =2 sbit TB80    = 0x9B;                   // Transmit bit 8
           =2 sbit RB80    = 0x9A;                   // Receive bit 8
           =2 sbit TI0     = 0x99;                   // Transmit interrupt flag
           =2 sbit RI0     = 0x98;                   // Receive interrupt flag
           =2 
           =2 // IE 0xA8
           =2 sbit EA      = 0xAF;                   // Global interrupt enable
           =2 sbit ESPI0   = 0xAE;                   // SPI0 interrupt enable
           =2 sbit ET2     = 0xAD;                   // Timer2 interrupt enable
           =2 sbit ES0     = 0xAC;                   // UART0 interrupt enable
           =2 sbit ET1     = 0xAB;                   // Timer1 interrupt enable
           =2 sbit EX1     = 0xAA;                   // External interrupt 1 ena
             -ble
           =2 sbit ET0     = 0xA9;                   // Timer0 interrupt enable
           =2 sbit EX0     = 0xA8;                   // External interrupt 0 ena
             -ble
           =2 
           =2 // IP 0xB8
           =2                                        // Bit7 UNUSED
           =2 sbit PSPI0   = 0xBE;                   // SPI0 interrupt priority
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 14  

           =2 sbit PT2     = 0xBD;                   // Timer2 priority
           =2 sbit PS0     = 0xBC;                   // UART0 priority
           =2 sbit PT1     = 0xBB;                   // Timer1 priority
           =2 sbit PX1     = 0xBA;                   // External interrupt 1 pri
             -ority
           =2 sbit PT0     = 0xB9;                   // Timer0 priority
           =2 sbit PX0     = 0xB8;                   // External interrupt 0 pri
             -ority
           =2 
           =2 // SMB0CN 0xC0
           =2 sbit MASTER  = 0xC7;                   // Master/slave indicator
           =2 sbit TXMODE  = 0xC6;                   // Transmit mode indicator
           =2 sbit STA     = 0xC5;                   // Start flag
           =2 sbit STO     = 0xC4;                   // Stop flag
           =2 sbit ACKRQ   = 0xC3;                   // Acknowledge request
           =2 sbit ARBLOST = 0xC2;                   // Arbitration lost indicat
             -or
           =2 sbit ACK     = 0xC1;                   // Acknowledge flag
           =2 sbit SI      = 0xC0;                   // SMBus interrupt flag
           =2 
           =2 // TMR2CN 0xC8
           =2 sbit TF2H    = 0xCF;                   // Timer2 high byte overflo
             -w flag
           =2 sbit TF2L    = 0xCE;                   // Timer2 low byte overflow
             - flag
           =2 sbit TF2LEN  = 0xCD;                   // Timer2 low byte interrup
             -t enable
           =2 sbit T2CE    = 0xCC;                   // Timer2 capture enable
           =2 sbit T2SPLIT = 0xCB;                   // Timer2 split mode enable
           =2 sbit TR2     = 0xCA;                   // Timer2 on/off control
           =2 sbit T2CSS   = 0xC9;                   // Timer 2 Capture Source s
             -elect
           =2 sbit T2XCLK  = 0xC8;                   // Timer2 external clock se
             -lect
           =2 
           =2 // PSW 0xD0
           =2 sbit CY      = 0xD7;                   // Carry flag
           =2 sbit AC      = 0xD6;                   // Auxiliary carry flag
           =2 sbit F0      = 0xD5;                   // User flag 0
           =2 sbit RS1     = 0xD4;                   // Register bank select 1
           =2 sbit RS0     = 0xD3;                   // Register bank select 0
           =2 sbit OV      = 0xD2;                   // Overflow flag
           =2 sbit F1      = 0xD1;                   // User flag 1
           =2 sbit P       = 0xD0;                   // Accumulator parity flag
           =2 
           =2 // PCA0CN 0xD8
           =2 sbit CF      = 0xDF;                   // PCA0 counter overflow fl
             -ag
           =2 sbit CR      = 0xDE;                   // PCA0 counter run control
           =2                                        // Bit5 UNUSED
           =2 sbit CCF4    = 0xDC;                   // PCA0 module4 capture/com
             -pare flag
           =2 sbit CCF3    = 0xDB;                   // PCA0 module3 capture/com
             -pare flag
           =2 sbit CCF2    = 0xDA;                   // PCA0 module2 capture/com
             -pare flag
           =2 sbit CCF1    = 0xD9;                   // PCA0 module1 capture/com
             -pare flag
           =2 sbit CCF0    = 0xD8;                   // PCA0 module0 capture/com
             -pare flag
           =2 
           =2 // ADC0CN 0xE8
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 15  

           =2 sbit AD0EN   = 0xEF;                   // ADC0 enable
           =2 sbit AD0TM   = 0xEE;                   // ADC0 track mode
           =2 sbit AD0INT  = 0xED;                   // ADC0 conversion complete
             - interrupt flag
           =2 sbit AD0BUSY = 0xEC;                   // ADC0 busy flag
           =2 sbit AD0WINT = 0xEB;                   // ADC0 window compare inte
             -rrupt flag
           =2 sbit AD0CM2  = 0xEA;                   // ADC0 conversion mode sel
             -ect 2
           =2 sbit AD0CM1  = 0xE9;                   // ADC0 conversion mode sel
             -ect 1
           =2 sbit AD0CM0  = 0xE8;                   // ADC0 conversion mode sel
             -ect 0
           =2 
           =2 // SPI0CN 0xF8
           =2 sbit SPIF    = 0xFF;                   // SPI0 interrupt flag
           =2 sbit WCOL    = 0xFE;                   // SPI0 write collision fla
             -g
           =2 sbit MODF    = 0xFD;                   // SPI0 mode fault flag
           =2 sbit RXOVRN  = 0xFC;                   // SPI0 rx overrun flag
           =2 sbit NSSMD1  = 0xFB;                   // SPI0 slave select mode 1
           =2 sbit NSSMD0  = 0xFA;                   // SPI0 slave select mode 0
           =2 sbit TXBMT   = 0xF9;                   // SPI0 transmit buffer emp
             -ty
           =2 sbit SPIEN   = 0xF8;                   // SPI0 SPI enable
           =2 
           =2 
           =2 //----------------------------------------------------------------
             --------------
           =2 // Interrupt Priorities
           =2 //----------------------------------------------------------------
             --------------
           =2 
           =2 #define INTERRUPT_INT0             0   // External Interrupt 0
           =2 #define INTERRUPT_TIMER0           1   // Timer0 Overflow
           =2 #define INTERRUPT_INT1             2   // External Interrupt 1
           =2 #define INTERRUPT_TIMER1           3   // Timer1 Overflow
           =2 #define INTERRUPT_UART0            4   // Serial Port 0
           =2 #define INTERRUPT_TIMER2           5   // Timer2 Overflow
           =2 #define INTERRUPT_SPI0             6   // Serial Peripheral Interf
             -ace 0
           =2 #define INTERRUPT_SMBUS0           7   // SMBus0 Interface
           =2 #define INTERRUPT_USB0             8   // USB Interface
           =2 #define INTERRUPT_ADC0_WINDOW      9   // ADC0 Window Comparison
           =2 #define INTERRUPT_ADC0_EOC         10  // ADC0 End Of Conversion
           =2 #define INTERRUPT_PCA0             11  // PCA0 Peripheral
           =2 #define INTERRUPT_COMPARATOR0      12  // Comparator0
           =2 #define INTERRUPT_COMPARATOR1      13  // Comparator1
           =2 #define INTERRUPT_TIMER3           14  // Timer3 Overflow
           =2 #define INTERRUPT_VBUS_LEVEL       15  // VBUS level-triggered int
             -errupt
           =2 #define INTERRUPT_UART1            16  // Serial Port 1
           =2 
           =2 //----------------------------------------------------------------
             --------------
           =2 // Header File PreProcessor Directive
           =2 //----------------------------------------------------------------
             --------------
           =2 
           =2 #endif                                 // #define C8051F340_H
 289      =2  
 290      =2  //----------------------------------------------------------------
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 16  

             --------------
 291      =2  // End Of File
 292      =2  //----------------------------------------------------------------
             --------------
  35      =1  
  36      =1  // Physical size in bytes of one MMC FLASH sector
  37      =1  #define PHYSICAL_BLOCK_SIZE     512   
  38      =1  
  39      =1  sbit SCLK = P0^0;
  40      =1  sbit SCS  = P0^3;
  41      =1  sbit MISO = P0^1;
  42      =1  sbit MOSI = P0^2;
  43      =1  
  44      =1  #endif
  39          #include "F34x_MSD_CF_Basic_Functions.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_CF_Basic_Functions.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_CF_Basic_
             -Functions.c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000029
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef __CF_BASIC_H__
  32      =1  #define __CF_BASIC_H__
  33      =1  
  34      =1  #include <intrins.h>
   1      =2  /*----------------------------------------------------------------
             -----------
   2      =2  INTRINS.H
   3      =2  
   4      =2  Intrinsic functions for C51.
   5      =2  Copyright (c) 1988-2004 Keil Elektronik GmbH and Keil Software, In
             -c.
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 17  

   6      =2  All rights reserved.
   7      =2  ------------------------------------------------------------------
             ---------*/
   8      =2  
   9      =2  #ifndef __INTRINS_H__
  10      =2  #define __INTRINS_H__
  11      =2  
  12      =2  extern void          _nop_     (void);
  13      =2  extern bit           _testbit_ (bit);
  14      =2  extern unsigned char _cror_    (unsigned char, unsigned char);
  15      =2  extern unsigned int  _iror_    (unsigned int,  unsigned char);
  16      =2  extern unsigned long _lror_    (unsigned long, unsigned char);
  17      =2  extern unsigned char _crol_    (unsigned char, unsigned char);
  18      =2  extern unsigned int  _irol_    (unsigned int,  unsigned char);
  19      =2  extern unsigned long _lrol_    (unsigned long, unsigned char);
  20      =2  extern unsigned char _chkfloat_(float);
  21      =2  extern void          _push_    (unsigned char _sfr);
  22      =2  extern void          _pop_     (unsigned char _sfr);
  23      =2  
  24      =2  #endif
  25      =2  
  35      =1  #include "c8051f340.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // C8051F340.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2005 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Register/bit definitions for the C8051F34x family.
  10      =2  //
  11      =2  //
  12      =2  // FID:            34X000002
  13      =2  // Target:         C8051F340, 'F341, 'F342, 'F343, 'F344, 'F345, '
             -F346, 'F347
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   None
  16      =2  //
  17      =2  // Release 1.0
  18      =2  //    -Initial Release (GP\PKC)
  19      =2  //    -13 DEC 2005
  20      =2  
  21      =2  //----------------------------------------------------------------
             --------------
  22      =2  // Header File Preprocessor Directive
  23      =2  //----------------------------------------------------------------
             --------------
  24      =2  
  25      =2  #ifndef C8051F340_H
           =2 #define C8051F340_H
           =2 
           =2 //----------------------------------------------------------------
             --------------
           =2 // Byte Registers
           =2 //----------------------------------------------------------------
             --------------
           =2 
           =2 sfr  P0           =  0x80;             // Port 0 Latch
           =2 sfr  SP           =  0x81;             // Stack Pointer
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 18  

           =2 sfr  DPL          =  0x82;             // Data Pointer Low
           =2 sfr  DPH          =  0x83;             // Data Pointer High
           =2 sfr  EMI0TC       =  0x84;             // EMIF Timing
           =2 sfr  EMI0CF       =  0x85;             // EMIF Configuration
           =2 sfr  OSCLCN       =  0x86;             // Internal Low-Freq Oscill
             -ator Control
           =2 sfr  PCON         =  0x87;             // Power Control
           =2 sfr  TCON         =  0x88;             // Timer/Counter Control
           =2 sfr  TMOD         =  0x89;             // Timer/Counter Mode
           =2 sfr  TL0          =  0x8A;             // Timer/Counter 0 Low
           =2 sfr  TL1          =  0x8B;             // Timer/Counter 1 Low
           =2 sfr  TH0          =  0x8C;             // Timer/Counter 0 High
           =2 sfr  TH1          =  0x8D;             // Timer/Counter 1 High
           =2 sfr  CKCON        =  0x8E;             // Clock Control
           =2 sfr  PSCTL        =  0x8F;             // Program Store R/W Contro
             -l
           =2 sfr  P1           =  0x90;             // Port 1 Latch
           =2 sfr  TMR3CN       =  0x91;             // Timer/Counter 3Control
           =2 sfr  TMR3RLL      =  0x92;             // Timer/Counter 3 Reload L
             -ow
           =2 sfr  TMR3RLH      =  0x93;             // Timer/Counter 3 Reload H
             -igh
           =2 sfr  TMR3L        =  0x94;             // Timer/Counter 3Low
           =2 sfr  TMR3H        =  0x95;             // Timer/Counter 3 High
           =2 sfr  USB0ADR      =  0x96;             // USB0 Indirect Address Re
             -gister
           =2 sfr  USB0DAT      =  0x97;             // USB0 Data Register
           =2 sfr  SCON0        =  0x98;             // UART0 Control
           =2 sfr  SBUF0        =  0x99;             // UART0 Data Buffer
           =2 sfr  CPT1CN       =  0x9A;             // Comparator1 Control
           =2 sfr  CPT0CN       =  0x9B;             // Comparator0 Control
           =2 sfr  CPT1MD       =  0x9C;             // Comparator1 Mode Selecti
             -on
           =2 sfr  CPT0MD       =  0x9D;             // Comparator0 Mode Selecti
             -on
           =2 sfr  CPT1MX       =  0x9E;             // Comparator1 MUX Selectio
             -n
           =2 sfr  CPT0MX       =  0x9F;             // Comparator0 MUX Selectio
             -n
           =2 sfr  P2           =  0xA0;             // Port 2 Latch
           =2 sfr  SPI0CFG      =  0xA1;             // SPI Configuration
           =2 sfr  SPI0CKR      =  0xA2;             // SPI Clock Rate Control
           =2 sfr  SPI0DAT      =  0xA3;             // SPI Data
           =2 sfr  P0MDOUT      =  0xA4;             // Port 0 Output Mode Confi
             -guration
           =2 sfr  P1MDOUT      =  0xA5;             // Port 1 Output Mode Confi
             -guration
           =2 sfr  P2MDOUT      =  0xA6;             // Port 2 Output Mode Confi
             -guration
           =2 sfr  P3MDOUT      =  0xA7;             // Port 3 Output Mode Confi
             -guration
           =2 sfr  IE           =  0xA8;             // Interrupt Enable
           =2 sfr  CLKSEL       =  0xA9;             // Clock Select
           =2 sfr  EMI0CN       =  0xAA;             // External Memory Interfac
             -e Control
           =2 sfr  SBCON1       =  0xAC;             // UART1 Baud Rate Generato
             -r Control
           =2 sfr  P4MDOUT      =  0xAE;             // Port 4 Output Mode Confi
             -guration
           =2 sfr  PFE0CN       =  0xAF;             // Prefetch Engine Control
           =2 sfr  P3           =  0xB0;             // Port 3 Latch
           =2 sfr  OSCXCN       =  0xB1;             // External Oscillator Cont
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 19  

             -rol
           =2 sfr  OSCICN       =  0xB2;             // Internal Oscillator Cont
             -rol
           =2 sfr  OSCICL       =  0xB3;             // Internal Oscillator Cali
             -bration
           =2 sfr  SBRLL1       =  0xB4;             // UART1 Baud Rate Generato
             -r Low
           =2 sfr  SBRLH1       =  0xB5;             // UART1 Baud Rate Generato
             -r High
           =2 sfr  FLSCL        =  0xB6;             // Flash Scale
           =2 sfr  FLKEY        =  0xB7;             // Flash Lock and Key
           =2 sfr  IP           =  0xB8;             // Interrupt Priority
           =2 sfr  CLKMUL       =  0xB9;             // Clock Multiplier
           =2 sfr  AMX0N        =  0xBA;             // AMUX0 Negative Channel S
             -elect
           =2 sfr  AMX0P        =  0xBB;             // AMUX0 Positive Channel S
             -elect
           =2 sfr  ADC0CF       =  0xBC;             // ADC0 Configuration
           =2 sfr  ADC0L        =  0xBD;             // ADC0 Low
           =2 sfr  ADC0H        =  0xBE;             // ADC0 High
           =2 sfr  SMB0CN       =  0xC0;             // SMBus Control
           =2 sfr  SMB0CF       =  0xC1;             // SMBus Configuration
           =2 sfr  SMB0DAT      =  0xC2;             // SMBus Data
           =2 sfr  ADC0GTL      =  0xC3;             // ADC0 Greater-Than Compar
             -e Low
           =2 sfr  ADC0GTH      =  0xC4;             // ADC0 Greater-Than Compar
             -e High
           =2 sfr  ADC0LTL      =  0xC5;             // ADC0 Less-Than Compare W
             -ord Low
           =2 sfr  ADC0LTH      =  0xC6;             // ADC0 Less-Than Compare W
             -ord High
           =2 sfr  P4           =  0xC7;             // Port 4 Latch
           =2 sfr  TMR2CN       =  0xC8;             // Timer/Counter 2 Control
           =2 sfr  REG0CN       =  0xC9;             // Voltage Regulator Contro
             -l
           =2 sfr  TMR2RLL      =  0xCA;             // Timer/Counter 2 Reload L
             -ow
           =2 sfr  TMR2RLH      =  0xCB;             // Timer/Counter 2 Reload H
             -igh
           =2 sfr  TMR2L        =  0xCC;             // Timer/Counter 2 Low
           =2 sfr  TMR2H        =  0xCD;             // Timer/Counter 2 High
           =2 sfr  PSW          =  0xD0;             // Program Status Word
           =2 sfr  REF0CN       =  0xD1;             // Voltage Reference Contro
             -l
           =2 sfr  SCON1        =  0xD2;             // UART1 Control
           =2 sfr  SBUF1        =  0xD3;             // UART1 Data Buffer
           =2 sfr  P0SKIP       =  0xD4;             // Port 0 Skip
           =2 sfr  P1SKIP       =  0xD5;             // Port 1 Skip
           =2 sfr  P2SKIP       =  0xD6;             // Port 2 Skip
           =2 sfr  USB0XCN      =  0xD7;             // USB0 Transceiver Control
           =2 sfr  PCA0CN       =  0xD8;             // PCA0 Control
           =2 sfr  PCA0MD       =  0xD9;             // PCA0 Mode
           =2 sfr  PCA0CPM0     =  0xDA;             // PCA0 Module 0 Mode Regis
             -ter
           =2 sfr  PCA0CPM1     =  0xDB;             // PCA0 Module 1 Mode Regis
             -ter
           =2 sfr  PCA0CPM2     =  0xDC;             // PCA0 Module 2 Mode Regis
             -ter
           =2 sfr  PCA0CPM3     =  0xDD;             // PCA0 Module 3 Mode Regis
             -ter
           =2 sfr  PCA0CPM4     =  0xDE;             // PCA0 Module 4 Mode Regis
             -ter
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 20  

           =2 sfr  P3SKIP       =  0xDF;             // Port 3 Skip
           =2 sfr  ACC          =  0xE0;             // Accumulator
           =2 sfr  XBR0         =  0xE1;             // Port I/O Crossbar Contro
             -l 0
           =2 sfr  XBR1         =  0xE2;             // Port I/O Crossbar Contro
             -l 1
           =2 sfr  XBR2         =  0xE3;             // Port I/O Crossbar Contro
             -l 2
           =2 sfr  IT01CF       =  0xE4;             // INT0/INT1 Configuration
           =2 sfr  SMOD1        =  0xE5;             // UART1 Mode
           =2 sfr  EIE1         =  0xE6;             // Extended Interrupt Enabl
             -e 1
           =2 sfr  EIE2         =  0xE7;             // Extended Interrupt Enabl
             -e 2
           =2 sfr  ADC0CN       =  0xE8;             // ADC0 Control
           =2 sfr  PCA0CPL1     =  0xE9;             // PCA0 Capture 1 Low
           =2 sfr  PCA0CPH1     =  0xEA;             // PCA0 Capture 1 High
           =2 sfr  PCA0CPL2     =  0xEB;             // PCA0 Capture 2 Low
           =2 sfr  PCA0CPH2     =  0xEC;             // PCA0 Capture 2 High
           =2 sfr  PCA0CPL3     =  0xED;             // PCA0 Capture 3 Low
           =2 sfr  PCA0CPH3     =  0xEE;             // PCA0 Capture 3 High
           =2 sfr  RSTSRC       =  0xEF;             // Reset Source Configurati
             -on/Status
           =2 sfr  B            =  0xF0;             // B Register
           =2 sfr  P0MDIN       =  0xF1;             // Port 0 Input Mode Config
             -uration
           =2 sfr  P1MDIN       =  0xF2;             // Port 1 Input Mode Config
             -uration
           =2 sfr  P2MDIN       =  0xF3;             // Port 2 Input Mode Config
             -uration
           =2 sfr  P3MDIN       =  0xF4;             // Port 3 Input Mode Config
             -uration
           =2 sfr  P4MDIN       =  0xF5;             // Port 4 Input Mode Config
             -uration
           =2 sfr  EIP1         =  0xF6;             // Extended Interrupt Prior
             -ity 1
           =2 sfr  EIP2         =  0xF7;             // Extended Interrupt Prior
             -ity 2
           =2 sfr  SPI0CN       =  0xF8;             // SPI0 Control
           =2 sfr  PCA0L        =  0xF9;             // PCA0 Counter Low
           =2 sfr  PCA0H        =  0xFA;             // PCA0 Counter High
           =2 sfr  PCA0CPL0     =  0xFB;             // PCA0 Capture 0 Low
           =2 sfr  PCA0CPH0     =  0xFC;             // PCA0 Capture 0 High
           =2 sfr  PCA0CPL4     =  0xFD;             // PCA0 Capture 4 Low
           =2 sfr  PCA0CPH4     =  0xFE;             // PCA0 Capture 4 High
           =2 sfr  VDM0CN       =  0xFF;             // VDD Monitor Control
           =2 
           =2 
           =2 //----------------------------------------------------------------
             --------------
           =2 // Bit Definitions
           =2 //----------------------------------------------------------------
             --------------
           =2 
           =2 // TCON 0x88
           =2 sbit TF1     = 0x8F;                   // Timer1 overflow flag
           =2 sbit TR1     = 0x8E;                   // Timer1 on/off control
           =2 sbit TF0     = 0x8D;                   // Timer0 overflow flag
           =2 sbit TR0     = 0x8C;                   // Timer0 on/off control
           =2 sbit IE1     = 0x8B;                   // Ext interrupt 1 edge fla
             -g
           =2 sbit IT1     = 0x8A;                   // Ext interrupt 1 type
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 21  

           =2 sbit IE0     = 0x89;                   // Ext interrupt 0 edge fla
             -g
           =2 sbit IT0     = 0x88;                   // Ext interrupt 0 type
           =2 
           =2 // SCON0 0x98
           =2 sbit S0MODE  = 0x9F;                   // Serial mode control bit 
             -0
           =2                                        // Bit6 UNUSED
           =2 sbit MCE0    = 0x9D;                   // Multiprocessor communica
             -tion enable
           =2 sbit REN0    = 0x9C;                   // Receive enable
           =2 sbit TB80    = 0x9B;                   // Transmit bit 8
           =2 sbit RB80    = 0x9A;                   // Receive bit 8
           =2 sbit TI0     = 0x99;                   // Transmit interrupt flag
           =2 sbit RI0     = 0x98;                   // Receive interrupt flag
           =2 
           =2 // IE 0xA8
           =2 sbit EA      = 0xAF;                   // Global interrupt enable
           =2 sbit ESPI0   = 0xAE;                   // SPI0 interrupt enable
           =2 sbit ET2     = 0xAD;                   // Timer2 interrupt enable
           =2 sbit ES0     = 0xAC;                   // UART0 interrupt enable
           =2 sbit ET1     = 0xAB;                   // Timer1 interrupt enable
           =2 sbit EX1     = 0xAA;                   // External interrupt 1 ena
             -ble
           =2 sbit ET0     = 0xA9;                   // Timer0 interrupt enable
           =2 sbit EX0     = 0xA8;                   // External interrupt 0 ena
             -ble
           =2 
           =2 // IP 0xB8
           =2                                        // Bit7 UNUSED
           =2 sbit PSPI0   = 0xBE;                   // SPI0 interrupt priority
           =2 sbit PT2     = 0xBD;                   // Timer2 priority
           =2 sbit PS0     = 0xBC;                   // UART0 priority
           =2 sbit PT1     = 0xBB;                   // Timer1 priority
           =2 sbit PX1     = 0xBA;                   // External interrupt 1 pri
             -ority
           =2 sbit PT0     = 0xB9;                   // Timer0 priority
           =2 sbit PX0     = 0xB8;                   // External interrupt 0 pri
             -ority
           =2 
           =2 // SMB0CN 0xC0
           =2 sbit MASTER  = 0xC7;                   // Master/slave indicator
           =2 sbit TXMODE  = 0xC6;                   // Transmit mode indicator
           =2 sbit STA     = 0xC5;                   // Start flag
           =2 sbit STO     = 0xC4;                   // Stop flag
           =2 sbit ACKRQ   = 0xC3;                   // Acknowledge request
           =2 sbit ARBLOST = 0xC2;                   // Arbitration lost indicat
             -or
           =2 sbit ACK     = 0xC1;                   // Acknowledge flag
           =2 sbit SI      = 0xC0;                   // SMBus interrupt flag
           =2 
           =2 // TMR2CN 0xC8
           =2 sbit TF2H    = 0xCF;                   // Timer2 high byte overflo
             -w flag
           =2 sbit TF2L    = 0xCE;                   // Timer2 low byte overflow
             - flag
           =2 sbit TF2LEN  = 0xCD;                   // Timer2 low byte interrup
             -t enable
           =2 sbit T2CE    = 0xCC;                   // Timer2 capture enable
           =2 sbit T2SPLIT = 0xCB;                   // Timer2 split mode enable
           =2 sbit TR2     = 0xCA;                   // Timer2 on/off control
           =2 sbit T2CSS   = 0xC9;                   // Timer 2 Capture Source s
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 22  

             -elect
           =2 sbit T2XCLK  = 0xC8;                   // Timer2 external clock se
             -lect
           =2 
           =2 // PSW 0xD0
           =2 sbit CY      = 0xD7;                   // Carry flag
           =2 sbit AC      = 0xD6;                   // Auxiliary carry flag
           =2 sbit F0      = 0xD5;                   // User flag 0
           =2 sbit RS1     = 0xD4;                   // Register bank select 1
           =2 sbit RS0     = 0xD3;                   // Register bank select 0
           =2 sbit OV      = 0xD2;                   // Overflow flag
           =2 sbit F1      = 0xD1;                   // User flag 1
           =2 sbit P       = 0xD0;                   // Accumulator parity flag
           =2 
           =2 // PCA0CN 0xD8
           =2 sbit CF      = 0xDF;                   // PCA0 counter overflow fl
             -ag
           =2 sbit CR      = 0xDE;                   // PCA0 counter run control
           =2                                        // Bit5 UNUSED
           =2 sbit CCF4    = 0xDC;                   // PCA0 module4 capture/com
             -pare flag
           =2 sbit CCF3    = 0xDB;                   // PCA0 module3 capture/com
             -pare flag
           =2 sbit CCF2    = 0xDA;                   // PCA0 module2 capture/com
             -pare flag
           =2 sbit CCF1    = 0xD9;                   // PCA0 module1 capture/com
             -pare flag
           =2 sbit CCF0    = 0xD8;                   // PCA0 module0 capture/com
             -pare flag
           =2 
           =2 // ADC0CN 0xE8
           =2 sbit AD0EN   = 0xEF;                   // ADC0 enable
           =2 sbit AD0TM   = 0xEE;                   // ADC0 track mode
           =2 sbit AD0INT  = 0xED;                   // ADC0 conversion complete
             - interrupt flag
           =2 sbit AD0BUSY = 0xEC;                   // ADC0 busy flag
           =2 sbit AD0WINT = 0xEB;                   // ADC0 window compare inte
             -rrupt flag
           =2 sbit AD0CM2  = 0xEA;                   // ADC0 conversion mode sel
             -ect 2
           =2 sbit AD0CM1  = 0xE9;                   // ADC0 conversion mode sel
             -ect 1
           =2 sbit AD0CM0  = 0xE8;                   // ADC0 conversion mode sel
             -ect 0
           =2 
           =2 // SPI0CN 0xF8
           =2 sbit SPIF    = 0xFF;                   // SPI0 interrupt flag
           =2 sbit WCOL    = 0xFE;                   // SPI0 write collision fla
             -g
           =2 sbit MODF    = 0xFD;                   // SPI0 mode fault flag
           =2 sbit RXOVRN  = 0xFC;                   // SPI0 rx overrun flag
           =2 sbit NSSMD1  = 0xFB;                   // SPI0 slave select mode 1
           =2 sbit NSSMD0  = 0xFA;                   // SPI0 slave select mode 0
           =2 sbit TXBMT   = 0xF9;                   // SPI0 transmit buffer emp
             -ty
           =2 sbit SPIEN   = 0xF8;                   // SPI0 SPI enable
           =2 
           =2 
           =2 //----------------------------------------------------------------
             --------------
           =2 // Interrupt Priorities
           =2 //----------------------------------------------------------------
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 23  

             --------------
           =2 
           =2 #define INTERRUPT_INT0             0   // External Interrupt 0
           =2 #define INTERRUPT_TIMER0           1   // Timer0 Overflow
           =2 #define INTERRUPT_INT1             2   // External Interrupt 1
           =2 #define INTERRUPT_TIMER1           3   // Timer1 Overflow
           =2 #define INTERRUPT_UART0            4   // Serial Port 0
           =2 #define INTERRUPT_TIMER2           5   // Timer2 Overflow
           =2 #define INTERRUPT_SPI0             6   // Serial Peripheral Interf
             -ace 0
           =2 #define INTERRUPT_SMBUS0           7   // SMBus0 Interface
           =2 #define INTERRUPT_USB0             8   // USB Interface
           =2 #define INTERRUPT_ADC0_WINDOW      9   // ADC0 Window Comparison
           =2 #define INTERRUPT_ADC0_EOC         10  // ADC0 End Of Conversion
           =2 #define INTERRUPT_PCA0             11  // PCA0 Peripheral
           =2 #define INTERRUPT_COMPARATOR0      12  // Comparator0
           =2 #define INTERRUPT_COMPARATOR1      13  // Comparator1
           =2 #define INTERRUPT_TIMER3           14  // Timer3 Overflow
           =2 #define INTERRUPT_VBUS_LEVEL       15  // VBUS level-triggered int
             -errupt
           =2 #define INTERRUPT_UART1            16  // Serial Port 1
           =2 
           =2 //----------------------------------------------------------------
             --------------
           =2 // Header File PreProcessor Directive
           =2 //----------------------------------------------------------------
             --------------
           =2 
           =2 #endif                                 // #define C8051F340_H
 289      =2  
 290      =2  //----------------------------------------------------------------
             --------------
 291      =2  // End Of File
 292      =2  //----------------------------------------------------------------
             --------------
  36      =1  
  37      =1  #define         CF_NO_CARD              0x01
  38      =1  sbit CF_RST = P1^0;
  39      =1  sbit CF_OE = P1^1;
  40      =1  sbit CF_CE1 = P1^2;
  41      =1  sbit CF_CD1 = P1^3;
  42      =1  sbit CF_RDY = P1^4;
  43      =1  sbit CF_WE = P1^6;
  44      =1  
  45      =1  
  46      =1  //----------------------------------------------------------------
             --------------
  47      =1  // Macro Prototypes
  48      =1  //----------------------------------------------------------------
             --------------
  49      =1  
  50      =1  #define CF_SET_ADDR_LINE(value) {\
  51      =1          P3 &= ~0xe0;\
  52      =1          P3 |= (value << 5) & 0xe0;\
  53      =1  }
  54      =1  
  55      =1  #define CF_WR_DATA(value) {\
  56      =1          P4MDOUT = 0xFF;\
  57      =1          P4 = value;\
  58      =1  }
  59      =1  
  60      =1  #define CF_READ_DATA    P4
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 24  

  61      =1  
  62      =1  #define CF_WAIT_STATE {\
  63      =1          _nop_ ();\
  64      =1          _nop_ ();\
  65      =1          _nop_ ();\
  66      =1  }
  67      =1  
  68      =1  #define CF_READWRITE_IDLE {\
  69      =1          P4MDOUT = 0x00;\
  70      =1          P4 =0xff;\
  71      =1          CF_OE = 1;\
  72      =1          CF_WE = 1;\
  73      =1  }
  74      =1  
  75      =1  #define CF_WRITE {\
  76      =1          CF_OE = 1;\
  77      =1          CF_WE = 0;\
  78      =1  }
  79      =1  
  80      =1  #define CF_READ {\
  81      =1          P4MDOUT = 0x00;\
  82      =1          P4 =0xff;\
  83      =1          CF_WE = 1;\
  84      =1          CF_OE = 0;\
  85      =1  }
  86      =1  
  87      =1  
  88      =1  //----------------------------------------------------------------
             --------------
  89      =1  // Function Prototypes
  90      =1  //----------------------------------------------------------------
             --------------
  91      =1  
  92      =1  char Dtct_Card(void);
  93      =1  void Wait_Drq();
  94      =1  void Wait_Busy();
  95      =1  char Identify_Drive(char* buffer);
  96      =1  char Init_CF();
  97      =1  char Write_Sector(unsigned long address, char* buffer);
  98      =1  char Read_Sector(unsigned long address, char* buffer);
  99      =1  
 100      =1  //----------------------------------------------------------------
             --------------
 101      =1  // Macro Prototypes
 102      =1  //----------------------------------------------------------------
             --------------
 103      =1  
 104      =1  //#define MACRO_CF_VERSIONS
 105      =1  #ifndef MACRO_CF_VERSIONS
 106      =1  
 107      =1  //----------------------------------------------------------------
             --------------
 108      =1  // Function Prototypes
 109      =1  //----------------------------------------------------------------
             --------------
 110      =1  
 111      =1  char CF_GET_REGISTER_VALUE(char addr);
 112      =1  void CF_SET_REGISTER_VALUE(char addr, char value);
 113      =1  
 114      =1  #else
           =1 #define CF_GET_REGISTER_VALUE(addr,value) {\
           =1         CF_SET_ADDR_LINE(addr);\
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 25  

           =1         CF_READ;\
           =1         CF_WAIT_STATE;\
           =1         value = CF_READ_DATA;\
           =1         CF_READWRITE_IDLE;\
           =1 }
           =1 #define CF_SET_REGISTER_VALUE(addr,value) {\
           =1         CF_SET_ADDR_LINE(addr);\
           =1         CF_WR_DATA(value);\
           =1         CF_WRITE;\
           =1         CF_WAIT_STATE;\
           =1         CF_READWRITE_IDLE;\
           =1 }
           =1 #endif
 130      =1  
 131      =1  #endif
  40          #include "c8051f340.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // C8051F340.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2005 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Register/bit definitions for the C8051F34x family.
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000002
  13      =1  // Target:         C8051F340, 'F341, 'F342, 'F343, 'F344, 'F345, '
             -F346, 'F347
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   None
  16      =1  //
  17      =1  // Release 1.0
  18      =1  //    -Initial Release (GP\PKC)
  19      =1  //    -13 DEC 2005
  20      =1  
  21      =1  //----------------------------------------------------------------
             --------------
  22      =1  // Header File Preprocessor Directive
  23      =1  //----------------------------------------------------------------
             --------------
  24      =1  
  25      =1  #ifndef C8051F340_H
           =1 #define C8051F340_H
           =1 
           =1 //----------------------------------------------------------------
             --------------
           =1 // Byte Registers
           =1 //----------------------------------------------------------------
             --------------
           =1 
           =1 sfr  P0           =  0x80;             // Port 0 Latch
           =1 sfr  SP           =  0x81;             // Stack Pointer
           =1 sfr  DPL          =  0x82;             // Data Pointer Low
           =1 sfr  DPH          =  0x83;             // Data Pointer High
           =1 sfr  EMI0TC       =  0x84;             // EMIF Timing
           =1 sfr  EMI0CF       =  0x85;             // EMIF Configuration
           =1 sfr  OSCLCN       =  0x86;             // Internal Low-Freq Oscill
             -ator Control
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 26  

           =1 sfr  PCON         =  0x87;             // Power Control
           =1 sfr  TCON         =  0x88;             // Timer/Counter Control
           =1 sfr  TMOD         =  0x89;             // Timer/Counter Mode
           =1 sfr  TL0          =  0x8A;             // Timer/Counter 0 Low
           =1 sfr  TL1          =  0x8B;             // Timer/Counter 1 Low
           =1 sfr  TH0          =  0x8C;             // Timer/Counter 0 High
           =1 sfr  TH1          =  0x8D;             // Timer/Counter 1 High
           =1 sfr  CKCON        =  0x8E;             // Clock Control
           =1 sfr  PSCTL        =  0x8F;             // Program Store R/W Contro
             -l
           =1 sfr  P1           =  0x90;             // Port 1 Latch
           =1 sfr  TMR3CN       =  0x91;             // Timer/Counter 3Control
           =1 sfr  TMR3RLL      =  0x92;             // Timer/Counter 3 Reload L
             -ow
           =1 sfr  TMR3RLH      =  0x93;             // Timer/Counter 3 Reload H
             -igh
           =1 sfr  TMR3L        =  0x94;             // Timer/Counter 3Low
           =1 sfr  TMR3H        =  0x95;             // Timer/Counter 3 High
           =1 sfr  USB0ADR      =  0x96;             // USB0 Indirect Address Re
             -gister
           =1 sfr  USB0DAT      =  0x97;             // USB0 Data Register
           =1 sfr  SCON0        =  0x98;             // UART0 Control
           =1 sfr  SBUF0        =  0x99;             // UART0 Data Buffer
           =1 sfr  CPT1CN       =  0x9A;             // Comparator1 Control
           =1 sfr  CPT0CN       =  0x9B;             // Comparator0 Control
           =1 sfr  CPT1MD       =  0x9C;             // Comparator1 Mode Selecti
             -on
           =1 sfr  CPT0MD       =  0x9D;             // Comparator0 Mode Selecti
             -on
           =1 sfr  CPT1MX       =  0x9E;             // Comparator1 MUX Selectio
             -n
           =1 sfr  CPT0MX       =  0x9F;             // Comparator0 MUX Selectio
             -n
           =1 sfr  P2           =  0xA0;             // Port 2 Latch
           =1 sfr  SPI0CFG      =  0xA1;             // SPI Configuration
           =1 sfr  SPI0CKR      =  0xA2;             // SPI Clock Rate Control
           =1 sfr  SPI0DAT      =  0xA3;             // SPI Data
           =1 sfr  P0MDOUT      =  0xA4;             // Port 0 Output Mode Confi
             -guration
           =1 sfr  P1MDOUT      =  0xA5;             // Port 1 Output Mode Confi
             -guration
           =1 sfr  P2MDOUT      =  0xA6;             // Port 2 Output Mode Confi
             -guration
           =1 sfr  P3MDOUT      =  0xA7;             // Port 3 Output Mode Confi
             -guration
           =1 sfr  IE           =  0xA8;             // Interrupt Enable
           =1 sfr  CLKSEL       =  0xA9;             // Clock Select
           =1 sfr  EMI0CN       =  0xAA;             // External Memory Interfac
             -e Control
           =1 sfr  SBCON1       =  0xAC;             // UART1 Baud Rate Generato
             -r Control
           =1 sfr  P4MDOUT      =  0xAE;             // Port 4 Output Mode Confi
             -guration
           =1 sfr  PFE0CN       =  0xAF;             // Prefetch Engine Control
           =1 sfr  P3           =  0xB0;             // Port 3 Latch
           =1 sfr  OSCXCN       =  0xB1;             // External Oscillator Cont
             -rol
           =1 sfr  OSCICN       =  0xB2;             // Internal Oscillator Cont
             -rol
           =1 sfr  OSCICL       =  0xB3;             // Internal Oscillator Cali
             -bration
           =1 sfr  SBRLL1       =  0xB4;             // UART1 Baud Rate Generato
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 27  

             -r Low
           =1 sfr  SBRLH1       =  0xB5;             // UART1 Baud Rate Generato
             -r High
           =1 sfr  FLSCL        =  0xB6;             // Flash Scale
           =1 sfr  FLKEY        =  0xB7;             // Flash Lock and Key
           =1 sfr  IP           =  0xB8;             // Interrupt Priority
           =1 sfr  CLKMUL       =  0xB9;             // Clock Multiplier
           =1 sfr  AMX0N        =  0xBA;             // AMUX0 Negative Channel S
             -elect
           =1 sfr  AMX0P        =  0xBB;             // AMUX0 Positive Channel S
             -elect
           =1 sfr  ADC0CF       =  0xBC;             // ADC0 Configuration
           =1 sfr  ADC0L        =  0xBD;             // ADC0 Low
           =1 sfr  ADC0H        =  0xBE;             // ADC0 High
           =1 sfr  SMB0CN       =  0xC0;             // SMBus Control
           =1 sfr  SMB0CF       =  0xC1;             // SMBus Configuration
           =1 sfr  SMB0DAT      =  0xC2;             // SMBus Data
           =1 sfr  ADC0GTL      =  0xC3;             // ADC0 Greater-Than Compar
             -e Low
           =1 sfr  ADC0GTH      =  0xC4;             // ADC0 Greater-Than Compar
             -e High
           =1 sfr  ADC0LTL      =  0xC5;             // ADC0 Less-Than Compare W
             -ord Low
           =1 sfr  ADC0LTH      =  0xC6;             // ADC0 Less-Than Compare W
             -ord High
           =1 sfr  P4           =  0xC7;             // Port 4 Latch
           =1 sfr  TMR2CN       =  0xC8;             // Timer/Counter 2 Control
           =1 sfr  REG0CN       =  0xC9;             // Voltage Regulator Contro
             -l
           =1 sfr  TMR2RLL      =  0xCA;             // Timer/Counter 2 Reload L
             -ow
           =1 sfr  TMR2RLH      =  0xCB;             // Timer/Counter 2 Reload H
             -igh
           =1 sfr  TMR2L        =  0xCC;             // Timer/Counter 2 Low
           =1 sfr  TMR2H        =  0xCD;             // Timer/Counter 2 High
           =1 sfr  PSW          =  0xD0;             // Program Status Word
           =1 sfr  REF0CN       =  0xD1;             // Voltage Reference Contro
             -l
           =1 sfr  SCON1        =  0xD2;             // UART1 Control
           =1 sfr  SBUF1        =  0xD3;             // UART1 Data Buffer
           =1 sfr  P0SKIP       =  0xD4;             // Port 0 Skip
           =1 sfr  P1SKIP       =  0xD5;             // Port 1 Skip
           =1 sfr  P2SKIP       =  0xD6;             // Port 2 Skip
           =1 sfr  USB0XCN      =  0xD7;             // USB0 Transceiver Control
           =1 sfr  PCA0CN       =  0xD8;             // PCA0 Control
           =1 sfr  PCA0MD       =  0xD9;             // PCA0 Mode
           =1 sfr  PCA0CPM0     =  0xDA;             // PCA0 Module 0 Mode Regis
             -ter
           =1 sfr  PCA0CPM1     =  0xDB;             // PCA0 Module 1 Mode Regis
             -ter
           =1 sfr  PCA0CPM2     =  0xDC;             // PCA0 Module 2 Mode Regis
             -ter
           =1 sfr  PCA0CPM3     =  0xDD;             // PCA0 Module 3 Mode Regis
             -ter
           =1 sfr  PCA0CPM4     =  0xDE;             // PCA0 Module 4 Mode Regis
             -ter
           =1 sfr  P3SKIP       =  0xDF;             // Port 3 Skip
           =1 sfr  ACC          =  0xE0;             // Accumulator
           =1 sfr  XBR0         =  0xE1;             // Port I/O Crossbar Contro
             -l 0
           =1 sfr  XBR1         =  0xE2;             // Port I/O Crossbar Contro
             -l 1
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 28  

           =1 sfr  XBR2         =  0xE3;             // Port I/O Crossbar Contro
             -l 2
           =1 sfr  IT01CF       =  0xE4;             // INT0/INT1 Configuration
           =1 sfr  SMOD1        =  0xE5;             // UART1 Mode
           =1 sfr  EIE1         =  0xE6;             // Extended Interrupt Enabl
             -e 1
           =1 sfr  EIE2         =  0xE7;             // Extended Interrupt Enabl
             -e 2
           =1 sfr  ADC0CN       =  0xE8;             // ADC0 Control
           =1 sfr  PCA0CPL1     =  0xE9;             // PCA0 Capture 1 Low
           =1 sfr  PCA0CPH1     =  0xEA;             // PCA0 Capture 1 High
           =1 sfr  PCA0CPL2     =  0xEB;             // PCA0 Capture 2 Low
           =1 sfr  PCA0CPH2     =  0xEC;             // PCA0 Capture 2 High
           =1 sfr  PCA0CPL3     =  0xED;             // PCA0 Capture 3 Low
           =1 sfr  PCA0CPH3     =  0xEE;             // PCA0 Capture 3 High
           =1 sfr  RSTSRC       =  0xEF;             // Reset Source Configurati
             -on/Status
           =1 sfr  B            =  0xF0;             // B Register
           =1 sfr  P0MDIN       =  0xF1;             // Port 0 Input Mode Config
             -uration
           =1 sfr  P1MDIN       =  0xF2;             // Port 1 Input Mode Config
             -uration
           =1 sfr  P2MDIN       =  0xF3;             // Port 2 Input Mode Config
             -uration
           =1 sfr  P3MDIN       =  0xF4;             // Port 3 Input Mode Config
             -uration
           =1 sfr  P4MDIN       =  0xF5;             // Port 4 Input Mode Config
             -uration
           =1 sfr  EIP1         =  0xF6;             // Extended Interrupt Prior
             -ity 1
           =1 sfr  EIP2         =  0xF7;             // Extended Interrupt Prior
             -ity 2
           =1 sfr  SPI0CN       =  0xF8;             // SPI0 Control
           =1 sfr  PCA0L        =  0xF9;             // PCA0 Counter Low
           =1 sfr  PCA0H        =  0xFA;             // PCA0 Counter High
           =1 sfr  PCA0CPL0     =  0xFB;             // PCA0 Capture 0 Low
           =1 sfr  PCA0CPH0     =  0xFC;             // PCA0 Capture 0 High
           =1 sfr  PCA0CPL4     =  0xFD;             // PCA0 Capture 4 Low
           =1 sfr  PCA0CPH4     =  0xFE;             // PCA0 Capture 4 High
           =1 sfr  VDM0CN       =  0xFF;             // VDD Monitor Control
           =1 
           =1 
           =1 //----------------------------------------------------------------
             --------------
           =1 // Bit Definitions
           =1 //----------------------------------------------------------------
             --------------
           =1 
           =1 // TCON 0x88
           =1 sbit TF1     = 0x8F;                   // Timer1 overflow flag
           =1 sbit TR1     = 0x8E;                   // Timer1 on/off control
           =1 sbit TF0     = 0x8D;                   // Timer0 overflow flag
           =1 sbit TR0     = 0x8C;                   // Timer0 on/off control
           =1 sbit IE1     = 0x8B;                   // Ext interrupt 1 edge fla
             -g
           =1 sbit IT1     = 0x8A;                   // Ext interrupt 1 type
           =1 sbit IE0     = 0x89;                   // Ext interrupt 0 edge fla
             -g
           =1 sbit IT0     = 0x88;                   // Ext interrupt 0 type
           =1 
           =1 // SCON0 0x98
           =1 sbit S0MODE  = 0x9F;                   // Serial mode control bit 
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 29  

             -0
           =1                                        // Bit6 UNUSED
           =1 sbit MCE0    = 0x9D;                   // Multiprocessor communica
             -tion enable
           =1 sbit REN0    = 0x9C;                   // Receive enable
           =1 sbit TB80    = 0x9B;                   // Transmit bit 8
           =1 sbit RB80    = 0x9A;                   // Receive bit 8
           =1 sbit TI0     = 0x99;                   // Transmit interrupt flag
           =1 sbit RI0     = 0x98;                   // Receive interrupt flag
           =1 
           =1 // IE 0xA8
           =1 sbit EA      = 0xAF;                   // Global interrupt enable
           =1 sbit ESPI0   = 0xAE;                   // SPI0 interrupt enable
           =1 sbit ET2     = 0xAD;                   // Timer2 interrupt enable
           =1 sbit ES0     = 0xAC;                   // UART0 interrupt enable
           =1 sbit ET1     = 0xAB;                   // Timer1 interrupt enable
           =1 sbit EX1     = 0xAA;                   // External interrupt 1 ena
             -ble
           =1 sbit ET0     = 0xA9;                   // Timer0 interrupt enable
           =1 sbit EX0     = 0xA8;                   // External interrupt 0 ena
             -ble
           =1 
           =1 // IP 0xB8
           =1                                        // Bit7 UNUSED
           =1 sbit PSPI0   = 0xBE;                   // SPI0 interrupt priority
           =1 sbit PT2     = 0xBD;                   // Timer2 priority
           =1 sbit PS0     = 0xBC;                   // UART0 priority
           =1 sbit PT1     = 0xBB;                   // Timer1 priority
           =1 sbit PX1     = 0xBA;                   // External interrupt 1 pri
             -ority
           =1 sbit PT0     = 0xB9;                   // Timer0 priority
           =1 sbit PX0     = 0xB8;                   // External interrupt 0 pri
             -ority
           =1 
           =1 // SMB0CN 0xC0
           =1 sbit MASTER  = 0xC7;                   // Master/slave indicator
           =1 sbit TXMODE  = 0xC6;                   // Transmit mode indicator
           =1 sbit STA     = 0xC5;                   // Start flag
           =1 sbit STO     = 0xC4;                   // Stop flag
           =1 sbit ACKRQ   = 0xC3;                   // Acknowledge request
           =1 sbit ARBLOST = 0xC2;                   // Arbitration lost indicat
             -or
           =1 sbit ACK     = 0xC1;                   // Acknowledge flag
           =1 sbit SI      = 0xC0;                   // SMBus interrupt flag
           =1 
           =1 // TMR2CN 0xC8
           =1 sbit TF2H    = 0xCF;                   // Timer2 high byte overflo
             -w flag
           =1 sbit TF2L    = 0xCE;                   // Timer2 low byte overflow
             - flag
           =1 sbit TF2LEN  = 0xCD;                   // Timer2 low byte interrup
             -t enable
           =1 sbit T2CE    = 0xCC;                   // Timer2 capture enable
           =1 sbit T2SPLIT = 0xCB;                   // Timer2 split mode enable
           =1 sbit TR2     = 0xCA;                   // Timer2 on/off control
           =1 sbit T2CSS   = 0xC9;                   // Timer 2 Capture Source s
             -elect
           =1 sbit T2XCLK  = 0xC8;                   // Timer2 external clock se
             -lect
           =1 
           =1 // PSW 0xD0
           =1 sbit CY      = 0xD7;                   // Carry flag
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 30  

           =1 sbit AC      = 0xD6;                   // Auxiliary carry flag
           =1 sbit F0      = 0xD5;                   // User flag 0
           =1 sbit RS1     = 0xD4;                   // Register bank select 1
           =1 sbit RS0     = 0xD3;                   // Register bank select 0
           =1 sbit OV      = 0xD2;                   // Overflow flag
           =1 sbit F1      = 0xD1;                   // User flag 1
           =1 sbit P       = 0xD0;                   // Accumulator parity flag
           =1 
           =1 // PCA0CN 0xD8
           =1 sbit CF      = 0xDF;                   // PCA0 counter overflow fl
             -ag
           =1 sbit CR      = 0xDE;                   // PCA0 counter run control
           =1                                        // Bit5 UNUSED
           =1 sbit CCF4    = 0xDC;                   // PCA0 module4 capture/com
             -pare flag
           =1 sbit CCF3    = 0xDB;                   // PCA0 module3 capture/com
             -pare flag
           =1 sbit CCF2    = 0xDA;                   // PCA0 module2 capture/com
             -pare flag
           =1 sbit CCF1    = 0xD9;                   // PCA0 module1 capture/com
             -pare flag
           =1 sbit CCF0    = 0xD8;                   // PCA0 module0 capture/com
             -pare flag
           =1 
           =1 // ADC0CN 0xE8
           =1 sbit AD0EN   = 0xEF;                   // ADC0 enable
           =1 sbit AD0TM   = 0xEE;                   // ADC0 track mode
           =1 sbit AD0INT  = 0xED;                   // ADC0 conversion complete
             - interrupt flag
           =1 sbit AD0BUSY = 0xEC;                   // ADC0 busy flag
           =1 sbit AD0WINT = 0xEB;                   // ADC0 window compare inte
             -rrupt flag
           =1 sbit AD0CM2  = 0xEA;                   // ADC0 conversion mode sel
             -ect 2
           =1 sbit AD0CM1  = 0xE9;                   // ADC0 conversion mode sel
             -ect 1
           =1 sbit AD0CM0  = 0xE8;                   // ADC0 conversion mode sel
             -ect 0
           =1 
           =1 // SPI0CN 0xF8
           =1 sbit SPIF    = 0xFF;                   // SPI0 interrupt flag
           =1 sbit WCOL    = 0xFE;                   // SPI0 write collision fla
             -g
           =1 sbit MODF    = 0xFD;                   // SPI0 mode fault flag
           =1 sbit RXOVRN  = 0xFC;                   // SPI0 rx overrun flag
           =1 sbit NSSMD1  = 0xFB;                   // SPI0 slave select mode 1
           =1 sbit NSSMD0  = 0xFA;                   // SPI0 slave select mode 0
           =1 sbit TXBMT   = 0xF9;                   // SPI0 transmit buffer emp
             -ty
           =1 sbit SPIEN   = 0xF8;                   // SPI0 SPI enable
           =1 
           =1 
           =1 //----------------------------------------------------------------
             --------------
           =1 // Interrupt Priorities
           =1 //----------------------------------------------------------------
             --------------
           =1 
           =1 #define INTERRUPT_INT0             0   // External Interrupt 0
           =1 #define INTERRUPT_TIMER0           1   // Timer0 Overflow
           =1 #define INTERRUPT_INT1             2   // External Interrupt 1
           =1 #define INTERRUPT_TIMER1           3   // Timer1 Overflow
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 31  

           =1 #define INTERRUPT_UART0            4   // Serial Port 0
           =1 #define INTERRUPT_TIMER2           5   // Timer2 Overflow
           =1 #define INTERRUPT_SPI0             6   // Serial Peripheral Interf
             -ace 0
           =1 #define INTERRUPT_SMBUS0           7   // SMBus0 Interface
           =1 #define INTERRUPT_USB0             8   // USB Interface
           =1 #define INTERRUPT_ADC0_WINDOW      9   // ADC0 Window Comparison
           =1 #define INTERRUPT_ADC0_EOC         10  // ADC0 End Of Conversion
           =1 #define INTERRUPT_PCA0             11  // PCA0 Peripheral
           =1 #define INTERRUPT_COMPARATOR0      12  // Comparator0
           =1 #define INTERRUPT_COMPARATOR1      13  // Comparator1
           =1 #define INTERRUPT_TIMER3           14  // Timer3 Overflow
           =1 #define INTERRUPT_VBUS_LEVEL       15  // VBUS level-triggered int
             -errupt
           =1 #define INTERRUPT_UART1            16  // Serial Port 1
           =1 
           =1 //----------------------------------------------------------------
             --------------
           =1 // Header File PreProcessor Directive
           =1 //----------------------------------------------------------------
             --------------
           =1 
           =1 #endif                                 // #define C8051F340_H
 289      =1  
 290      =1  //----------------------------------------------------------------
             --------------
 291      =1  // End Of File
 292      =1  //----------------------------------------------------------------
             --------------
  41          #include "F34x_MSD_USB_Register.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_USB_Register.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file for USB firmware. Includes all USB core register
  10      =1  // addresses, register access macros, and register bit masks.
  11      =1  //
  12      =1  // FID:            34X000065
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  // 11/22/02 - DM: 1. Updated function prototypes and added constan
             -ts
  27      =1  //                to F34x_USB_Main.h with sample interrupt firmwar
             -e.
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 32  

  28      =1  
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  // Header File Preprocessor Directive
  31      =1  //----------------------------------------------------------------
             --------------
  32      =1  
  33      =1  #ifndef  _USB_REGS_H_
  34      =1  #define  _USB_REGS_H_
  35      =1  
  36      =1  #include "F34x_MSD_Definitions.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_Definitions.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Header file with all definitions.
  10      =2  //
  11      =2  //
  12      =2  // FID:            34X000032
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  
  27      =2  //----------------------------------------------------------------
             --------------
  28      =2  // Header File Preprocessor Directive
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  
  31      =2  #ifndef __DEFINITIONS_H__
           =2 #define __DEFINITIONS_H__
           =2 
           =2 #define DEBUG_TIMEOUTS
           =2 #include "c8051f340.h"
           =2 #ifdef DEBUG_TIMEOUTS
           =2 sbit START_STOP_SPI = P3^0 ;
           =2 sbit START_STOP_READ_TO = P3^1;
           =2 sbit START_STOP_WRITE_TO = P3^2;
           =2 
           =2 #define START_SPI_TIMEOUT (START_STOP_SPI = 1)
           =2 #define STOP_SPI_TIME_OUT (START_STOP_SPI = 0)
           =2 #define START_READ_COPY (START_STOP_READ_TO = 1)
           =2 #define STOP_READ_COPY (START_STOP_READ_TO = 0)
           =2 #define START_WRITE_COPY (START_STOP_WRITE_TO = 1)
           =2 #define STOP_WRITE_COPY (START_STOP_WRITE_TO = 0)
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 33  

           =2 #else
           =2 
           =2 #define START_SPI_TIMEOUT /\
           =2 /
           =2 #define STOP_SPI_TIME_OUT /\
           =2 /
           =2 #define START_READ_COPY /\
           =2 /
           =2 #define STOP_READ_COPY /\
           =2 /
           =2 #define START_WRITE_COPY /\
           =2 /
           =2 #define STOP_WRITE_COPY /\
           =2 /
           =2 
           =2 #endif
           =2 
           =2 #define ENDLINE         "\r\n"
           =2 #define ENDLINE_SGN '\r'
           =2 
           =2 #endif
  37      =1  // BYTE type definition
  38      =1  #ifndef _BYTE_DEF_
  39      =1  #define _BYTE_DEF_
  40      =1  typedef unsigned char BYTE;
  41      =1  #endif   /* _BYTE_DEF_ */
  42      =1  
  43      =1  // USB Core Registers
  44      =1  #define  BASE     0x00
  45      =1  #define  FADDR    BASE
  46      =1  #define  POWER    BASE + 0x01
  47      =1  #define  IN1INT   BASE + 0x02
  48      =1  #define  OUT1INT  BASE + 0x04
  49      =1  #define  CMINT    BASE + 0x06
  50      =1  #define  IN1IE    BASE + 0x07
  51      =1  #define  OUT1IE   BASE + 0x09
  52      =1  #define  CMIE     BASE + 0x0B
  53      =1  #define  FRAMEL   BASE + 0x0C
  54      =1  #define  FRAMEH   BASE + 0x0D
  55      =1  #define  INDEX    BASE + 0x0E
  56      =1  #define  CLKREC   BASE + 0x0F
  57      =1  #define  E0CSR    BASE + 0x11
  58      =1  #define  EINCSR1  BASE + 0x11
  59      =1  #define  EINCSR2  BASE + 0x12
  60      =1  #define  EOUTCSR1 BASE + 0x14
  61      =1  #define  EOUTCSR2 BASE + 0x15
  62      =1  #define  E0CNT    BASE + 0x16
  63      =1  #define  EOUTCNTL BASE + 0x16
  64      =1  #define  EOUTCNTH BASE + 0x17
  65      =1  #define  FIFO_EP0 BASE + 0x20
  66      =1  #define  FIFO_EP1 BASE + 0x21
  67      =1  #ifdef __F326_VER__
           =1 #define  FIFO_EP2 BASE + 0x21
           =1 #else
  70      =1  #define  FIFO_EP2 BASE + 0x22
  71      =1  #endif
  72      =1  #define  FIFO_EP3 BASE + 0x23
  73      =1  
  74      =1  // USB Core Register Bits
  75      =1  
  76      =1  // POWER
  77      =1  #define  rbISOUD        0x80
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 34  

  78      =1  #define  rbSPEED        0x40
  79      =1  #define  rbUSBRST       0x08
  80      =1  #define  rbRESUME       0x04
  81      =1  #define  rbSUSMD        0x02
  82      =1  #define  rbSUSEN        0x01
  83      =1  
  84      =1  // IN1INT
  85      =1  #define  rbIN3          0x08
  86      =1  #define  rbIN2          0x04
  87      =1  #define  rbIN1          0x02
  88      =1  #define  rbEP0          0x01
  89      =1  
  90      =1  // OUT1INT
  91      =1  #define  rbOUT3         0x08
  92      =1  #ifdef __F326_VER__
           =1 #define  rbOUT2         0x02
           =1 #else
  95      =1  #define  rbOUT2         0x04
  96      =1  #endif
  97      =1  #define  rbOUT1         0x02
  98      =1  
  99      =1  // CMINT
 100      =1  #define  rbSOF          0x08
 101      =1  #define  rbRSTINT       0x04
 102      =1  #define  rbRSUINT       0x02
 103      =1  #define  rbSUSINT       0x01
 104      =1  
 105      =1  // IN1IE
 106      =1  #define  rbIN3E         0x08
 107      =1  #define  rbIN2E         0x04
 108      =1  #define  rbIN1E         0x02
 109      =1  #define  rbEP0E         0x01
 110      =1  
 111      =1  // OUT1IE
 112      =1  #define  rbOUT3E        0x08
 113      =1  #define  rbOUT2E        0x04
 114      =1  #define  rbOUT1E        0x02
 115      =1  
 116      =1  // CMIE
 117      =1  #define  rbSOFE         0x08
 118      =1  #define  rbRSTINTE      0x04
 119      =1  #define  rbRSUINTE      0x02
 120      =1  #define  rbSUSINTE      0x01
 121      =1  
 122      =1  // E0CSR
 123      =1  #define  rbSSUEND       0x80
 124      =1  #define  rbSOPRDY       0x40
 125      =1  #define  rbSDSTL        0x20
 126      =1  #define  rbSUEND        0x10
 127      =1  #define  rbDATAEND      0x08
 128      =1  #define  rbSTSTL        0x04
 129      =1  #define  rbINPRDY       0x02
 130      =1  #define  rbOPRDY        0x01
 131      =1  
 132      =1  // EINCSR1
 133      =1  #define  rbInCLRDT      0x40
 134      =1  #define  rbInSTSTL      0x20
 135      =1  #define  rbInSDSTL      0x10
 136      =1  #define  rbInFLUSH      0x08
 137      =1  #define  rbInUNDRUN     0x04
 138      =1  #define  rbInFIFONE     0x02
 139      =1  #define  rbInINPRDY     0x01
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 35  

 140      =1  
 141      =1  // EINCSR2
 142      =1  #define  rbInDBIEN      0x80
 143      =1  #define  rbInISO        0x40
 144      =1  #define  rbInDIRSEL     0x20
 145      =1  #define  rbInFCDT       0x08
 146      =1  #define  rbInSPLIT      0x04  
 147      =1  
 148      =1  // EOUTCSR1
 149      =1  #define  rbOutCLRDT     0x80
 150      =1  #define  rbOutSTSTL     0x40
 151      =1  #define  rbOutSDSTL     0x20
 152      =1  #define  rbOutFLUSH     0x10
 153      =1  #define  rbOutDATERR    0x08
 154      =1  #define  rbOutOVRUN     0x04
 155      =1  #define  rbOutFIFOFUL   0x02
 156      =1  #define  rbOutOPRDY     0x01
 157      =1  
 158      =1  // EOUTCSR2
 159      =1  #define  rbOutDBOEN     0x80
 160      =1  #define  rbOutISO       0x40 
 161      =1  
 162      =1  // INDEX IDENTIFIERS
 163      =1  #define  EP0_IDX                0x00
 164      =1  #ifdef __F326_VER__
           =1 #define  EP2_OUT_IDX    0x01
           =1 #else
 167      =1  #define   EP2_OUT_IDX   0x02
 168      =1  #endif
 169      =1  #define  EP1_IN_IDX             0x01
 170      =1  
 171      =1  // Register read/write macros
 172      =1  
 173      =1  // These first two macros do not poll for busy, and can be used to
             - increase program speed where
 174      =1  // neccessary, but should never be used for successive reads or wr
             -ites.
 175      =1  #define READ_BYTE(addr, target) USB0ADR = (0x80 | addr); while(USB
             -0ADR & 0x80); target = USB0DAT
 176      =1  #define WRITE_BYTE(addr, data) USB0ADR = (addr); USB0DAT = data
 177      =1  
 178      =1  // These two macros are polling versions of the above macros, and 
             -can be used for successive reads/
 179      =1  // writes without taking the chance that the Interface Engine is b
             -usy from the last register access.
 180      =1  #define POLL_READ_BYTE(addr, target) while(USB0ADR & 0x80); READ_B
             -YTE(addr, target);
 181      =1  #define POLL_WRITE_BYTE(addr, data) while(USB0ADR & 0x80); WRITE_B
             -YTE(addr, data);
 182      =1  
 183      =1  #endif /* _USB_REGS_H_ */
  42          #include "F34x_MSD_USB_Main.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_USB_Main.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 36  

   9      =1  // Main header file for USB firmware. Includes function prototypes
             -,
  10      =1  // standard constants, and configuration constants.//
  11      =1  //
  12      =1  // FID:            34X000063
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  // 11/22/02 - DM: 1. Updated function prototypes and added constan
             -ts
  27      =1  //                to F34x_USB_Main.h with sample interrupt firmwar
             -e.
  28      =1  
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  // Header File Preprocessor Directive
  31      =1  //----------------------------------------------------------------
             --------------
  32      =1  
  33      =1  #ifndef _USB_MAIN_H_
  34      =1  #define _USB_MAIN_H_
  35      =1  
  36      =1  #include "F34x_MSD_Definitions.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_Definitions.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Header file with all definitions.
  10      =2  //
  11      =2  //
  12      =2  // FID:            34X000032
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 37  

  26      =2  
  27      =2  //----------------------------------------------------------------
             --------------
  28      =2  // Header File Preprocessor Directive
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  
  31      =2  #ifndef __DEFINITIONS_H__
           =2 #define __DEFINITIONS_H__
           =2 
           =2 #define DEBUG_TIMEOUTS
           =2 #include "c8051f340.h"
           =2 #ifdef DEBUG_TIMEOUTS
           =2 sbit START_STOP_SPI = P3^0 ;
           =2 sbit START_STOP_READ_TO = P3^1;
           =2 sbit START_STOP_WRITE_TO = P3^2;
           =2 
           =2 #define START_SPI_TIMEOUT (START_STOP_SPI = 1)
           =2 #define STOP_SPI_TIME_OUT (START_STOP_SPI = 0)
           =2 #define START_READ_COPY (START_STOP_READ_TO = 1)
           =2 #define STOP_READ_COPY (START_STOP_READ_TO = 0)
           =2 #define START_WRITE_COPY (START_STOP_WRITE_TO = 1)
           =2 #define STOP_WRITE_COPY (START_STOP_WRITE_TO = 0)
           =2 #else
           =2 
           =2 #define START_SPI_TIMEOUT /\
           =2 /
           =2 #define STOP_SPI_TIME_OUT /\
           =2 /
           =2 #define START_READ_COPY /\
           =2 /
           =2 #define STOP_READ_COPY /\
           =2 /
           =2 #define START_WRITE_COPY /\
           =2 /
           =2 #define STOP_WRITE_COPY /\
           =2 /
           =2 
           =2 #endif
           =2 
           =2 #define ENDLINE         "\r\n"
           =2 #define ENDLINE_SGN '\r'
           =2 
           =2 #endif
  37      =1  //#define _USB_LOW_SPEED_                      // Change this comm
             -ent to make Full/Low speed
  38      =1  
  39      =1  #define SYSCLK                   12000000    // SYSCLK frequency i
             -n Hz
  40      =1  
  41      =1  // USB clock selections (SFR CLKSEL)
  42      =1  #define USB_4X_CLOCK             0x00        // Select 4x clock mu
             -ltiplier, for USB Full Speed
  43      =1  #define USB_INT_OSC_DIV_2        0x10        // See Data Sheet sec
             -tion 13. Oscillators
  44      =1  #define USB_EXT_OSC              0x20
  45      =1  #define USB_EXT_OSC_DIV_2        0x30
  46      =1  #define USB_EXT_OSC_DIV_3        0x40
  47      =1  #define USB_EXT_OSC_DIV_4        0x50
  48      =1  
  49      =1  // System clock selections (SFR CLKSEL)
  50      =1  #define SYS_INT_OSC              0x00        // Select to use inte
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 38  

             -rnal oscillator
  51      =1  #define SYS_4X_MUL               0x03        // Select to use inte
             -rnal oscillator
  52      =1  #define SYS_EXT_OSC              0x01        // Select to use an e
             -xternal oscillator
  53      =1  #define SYS_4X_DIV_2             0x02
  54      =1  
  55      =1  // BYTE type definition
  56      =1  #ifndef _BYTE_DEF_
           =1 #define _BYTE_DEF_
           =1 typedef unsigned char BYTE;
           =1 #endif   /* _BYTE_DEF_ */
  60      =1  
  61      =1  // WORD type definition, for KEIL Compiler
  62      =1  #ifndef _WORD_DEF_                           // Compiler Specific,
             - written for Little Endian
  63      =1  #define _WORD_DEF_
  64      =1  typedef union {unsigned int i; unsigned char c[2];} WORD;
  65      =1  #define LSB 1                                // All words sent to 
             -and received from the host are
  66      =1  #define MSB 0                                // little endian, thi
             -s is switched by software when
  67      =1                                               // neccessary.  These
             - sections of code have been marked
  68      =1                                                                                           // with "Compiler Specific" as above for easier modifi
             -cation
  69      =1  #endif   /* _WORD_DEF_ */
  70      =1  
  71      =1  // DWORD type definition
  72      =1  #ifndef _DWORD_DEF_
  73      =1  #define _DWORD_DEF_
  74      =1  typedef unsigned long DWORD;
  75      =1  #endif /* _DWORD_DEF_ */
  76      =1  
  77      =1  extern volatile DWORD xdata tickcount;
  78      =1  
  79      =1  // Define Endpoint Packet Sizes
  80      =1  #ifdef _USB_LOW_SPEED_
           =1 #define  EP0_PACKET_SIZE         0x40        // This value can be 
             -8,16,32,64 depending on device speed, see USB spec
           =1 #else
  83      =1  #define  EP0_PACKET_SIZE         0x40
  84      =1  #endif /* _USB_LOW_SPEED_ */ 
  85      =1  
  86      =1  #define  EP1_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type  
  87      =1  #define  EP1_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP1_PACKET_SIZE
  88      =1  #define  EP2_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type
  89      =1  #define  EP2_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP2_PACKET_SIZE
  90      =1  
  91      =1  // Standard Descriptor Types
  92      =1  #define  DSC_DEVICE              0x01        // Device Descriptor
  93      =1  #define  DSC_CONFIG              0x02        // Configuration Desc
             -riptor
  94      =1  #define  DSC_STRING              0x03        // String Descriptor
  95      =1  #define  DSC_INTERFACE           0x04        // Interface Descript
             -or
  96      =1  #define  DSC_ENDPOINT            0x05        // Endpoint Descripto
             -r
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 39  

  97      =1  
  98      =1  // HID Descriptor Types
  99      =1  #define DSC_HID                                 0x21            // HID Class Descriptor
 100      =1  #define DSC_HID_REPORT                  0x22            // HID Report Descriptor
 101      =1  
 102      =1  // Standard Request Codes
 103      =1  #define  GET_STATUS             0x00        // Code for Get Status
 104      =1  #define  CLEAR_FEATURE          0x01        // Code for Clear Feat
             -ure
 105      =1  #define  SET_FEATURE            0x03        // Code for Set Featur
             -e
 106      =1  #define  SET_ADDRESS            0x05        // Code for Set Addres
             -s
 107      =1  #define  GET_DESCRIPTOR         0x06        // Code for Get Descri
             -ptor
 108      =1  #define  SET_DESCRIPTOR         0x07        // Code for Set Descri
             -ptor(not used)
 109      =1  #define  GET_CONFIGURATION      0x08        // Code for Get Config
             -uration
 110      =1  #define  SET_CONFIGURATION      0x09        // Code for Set Config
             -uration
 111      =1  #define  GET_INTERFACE          0x0A        // Code for Get Interf
             -ace
 112      =1  #define  SET_INTERFACE          0x0B        // Code for Set Interf
             -ace
 113      =1  #define  SYNCH_FRAME            0x0C        // Code for Synch Fram
             -e(not used)
 114      =1  #define  MSD_RESET                              0xFF            // Mass-storage device Reset
 115      =1  #define  MSD_GET_MAX_LUN                0xFE            // Mass-storage device Get Max LU
             -N
 116      =1  
 117      =1  // HID Request Codes
 118      =1  #define GET_REPORT                              0x01            // Code for Get Report
 119      =1  #define GET_IDLE                                0x02            // Code for Get Idle
 120      =1  #define GET_PROTOCOL                    0x03            // Code for Get Protocol
 121      =1  #define SET_REPORT                              0x09            // Code for Set Report
 122      =1  #define SET_IDLE                                0x0A            // Code for Set Idle
 123      =1  #define SET_PROTOCOL                    0x0B            // Code for Set Protocol
 124      =1  
 125      =1  // Define device states
 126      =1  #define  DEV_ATTACHED            0x00        // Device is in Attac
             -hed State
 127      =1  #define  DEV_POWERED             0x01        // Device is in Power
             -ed State
 128      =1  #define  DEV_DEFAULT             0x02        // Device is in Defau
             -lt State
 129      =1  #define  DEV_ADDRESS             0x03        // Device is in Addre
             -ssed State
 130      =1  #define  DEV_CONFIGURED          0x04        // Device is in Confi
             -gured State
 131      =1  #define  DEV_SUSPENDED           0x05        // Device is in Suspe
             -nded State
 132      =1  
 133      =1  // Define bmRequestType bitmaps
 134      =1  #define  IN_DEVICE               0x00        // Request made to de
             -vice, direction is IN 
 135      =1  #define  OUT_DEVICE              0x80        // Request made to de
             -vice, direction is OUT
 136      =1  #define  IN_INTERFACE            0x01        // Request made to in
             -terface, direction is IN
 137      =1  #define  OUT_INTERFACE           0x81        // Request made to in
             -terface, direction is OUT
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 40  

 138      =1  #define  IN_ENDPOINT             0x02        // Request made to en
             -dpoint, direction is IN
 139      =1  #define  OUT_ENDPOINT            0x82        // Request made to en
             -dpoint, direction is OUT
 140      =1  
 141      =1  // Define wIndex bitmaps
 142      =1  #define  IN_EP1                  0x81        // Index values used 
             -by Set and Clear feature
 143      =1  #define  OUT_EP1                 0x01        // commands for Endpo
             -int_Halt
 144      =1  #define  IN_EP2                  0x82
 145      =1  #ifdef __F326_VER__
           =1 #define  OUT_EP2                                 0x01           
           =1 #else
 148      =1  #define  OUT_EP2                                 0x01           
 149      =1  #endif
 150      =1  
 151      =1  // Define wValue bitmaps for Standard Feature Selectors
 152      =1  #define  DEVICE_REMOTE_WAKEUP    0x01        // Remote wakeup feat
             -ure(not used)
 153      =1  #define  ENDPOINT_HALT           0x00        // Endpoint_Halt feat
             -ure selector
 154      =1  
 155      =1  // Define Endpoint States
 156      =1  #define  EP_IDLE                 0x00        // This signifies End
             -point Idle State
 157      =1  #define  EP_TX                   0x01        // Endpoint Transmit 
             -State
 158      =1  #define  EP_RX                   0x02        // Endpoint Receive S
             -tate
 159      =1  #define  EP_HALT                 0x03        // Endpoint Halt Stat
             -e (return stalls)
 160      =1  #define  EP_STALL                0x04        // Endpoint Stall (se
             -nd procedural stall next status phase)
 161      =1  #define  EP_ADDRESS              0x05        // Endpoint Address (
             -change FADDR during next status phase)
 162      =1  
 163      =1  // Function prototypes
 164      =1  // USB Routines
 165      =1  void USB_Resume(void);                       // This routine resum
             -es USB operation
 166      =1  void USB_Reset(void);                        // Called after USB b
             -us reset
 167      =1  void Handle_Setup(void);                     // Handle setup packe
             -t on Endpoint 0
 168      =1  void Handle_In1(BYTE* ptr_buf);                       // Handle in
             - packet on Endpoint 1
 169      =1  void Handle_Out2(void);                      // Handle out packet 
             -on Endpoint 2
 170      =1  void USB_Suspend(void);                      // This routine calle
             -d when suspend signalling on bus
 171      =1  void Out2_Get_Data(BYTE* ptr_buf);                               // Copies from FIFO to ptr_
             -buf, clears FIFO-full flag.
 172      =1  void Out2_Done(void);                                            // Call this when finished with the d
             -ata
 173      =1  
 174      =1  // Standard Requests
 175      =1  void Get_Status(void);                       // These are called f
             -or each specific standard request
 176      =1  void Clear_Feature(void);
 177      =1  void Set_Feature(void);
 178      =1  void Set_Address(void);
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 41  

 179      =1  void Get_Descriptor(void);
 180      =1  void Get_Configuration(void);
 181      =1  void Set_Configuration(void);
 182      =1  void Get_Interface(void);
 183      =1  void Set_Interface(void);
 184      =1  
 185      =1  // MSD Specific Requests
 186      =1  // void Reset_Msd(void);
 187      =1  // void Get_MaxLUN(void);
 188      =1  
 189      =1  // Initialization Routines
 190      =1  void Sys_Clk_Init(void);                      // Initialize the sy
             -stem clock(depends on Full/Low speed)
 191      =1  void Port_Init(void);                        // Configure ports fo
             -r this specific application
 192      =1  void USB0_Init(void);                        // Configure USB core
             - for either Full/Low speed
 193      =1  void Timer_Init(void);                       // Start timer 2 for 
             -use by ADC and to check switches
 194      =1  void Adc_Init(void);                         // Configure ADC for 
             -continuous conversion, low-power mode
 195      =1  
 196      =1  // Other Routines
 197      =1  void Timer2_ISR(void);                       // Called when Timer 
             -2 overflows, see if switches are pressed
 198      =1  void Adc_ConvComple_ISR(void);               // When a conversion 
             -completes, switch ADC multiplexor
 199      =1  void USB_ISR(void);                          // Called to determin
             -e type of USB interrupt
 200      =1  void Fifo_ReadC(BYTE, unsigned int, BYTE *) ;
 201      =1  extern void Fifo_Read (BYTE, unsigned int, BYTE *) ; // Used for m
             -ultiple byte reads of Endpoint fifos
 202      =1  extern void Fifo_Write (BYTE, unsigned int, BYTE *) reentrant;// U
             -sed for multiple byte writes of Endpoint fifos
 203      =1  void Force_Stall(void);                      // Forces a procedura
             -l stall on Endpoint 0
 204      =1  void Delay(void);                            // Approximately 80 u
             -s/1 ms on Full/Low Speed
 205      =1  
 206      =1  void USB_In(BYTE* ptr_buf,unsigned count);
 207      =1  
 208      =1  void USB_Bulk_Init(void);
 209      =1  
 210      =1  extern unsigned xdata Out_Count;
 211      =1  extern BYTE xdata Out_Packet[EP2_PACKET_SIZE];
 212      =1  extern BYTE xdata In_count;
 213      =1  extern BYTE xdata In_Packet[EP1_PACKET_SIZE];
 214      =1  //extern BYTE xdata In_Overrun;
 215      =1  
 216      =1  #endif      /* _USB_MAIN_H_ */
 217      =1  
  43          #include "F34x_MSD_USB_Descriptor.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_USB_Descriptor.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 42  

   9      =1  // Header file for USB firmware.  Defines standard
  10      =1  // descriptor structures.
  11      =1  //
  12      =1  //
  13      =1  // FID:            34X000060
  14      =1  // Target:         C8051F34x
  15      =1  // Tool chain:     Keil
  16      =1  // Command Line:   See Readme.txt
  17      =1  // Project Name:   F34x_USB_MSD
  18      =1  //
  19      =1  // Release 1.1
  20      =1  //    -All changes by PKC
  21      =1  //    -09 JUN 2006
  22      =1  //    -No changes; incremented revision number to match project re
             -vision
  23      =1  //
  24      =1  // Release 1.0
  25      =1  //    -Initial Release
  26      =1  //
  27      =1  
  28      =1  //----------------------------------------------------------------
             --------------
  29      =1  // Header File Preprocessor Directive
  30      =1  //----------------------------------------------------------------
             --------------
  31      =1  
  32      =1  #ifndef  _USB_DESC_H_
  33      =1  #define  _USB_DESC_H_
  34      =1  
  35      =1  // BYTE type definition
  36      =1  #ifndef _BYTE_DEF_
           =1 #define _BYTE_DEF_
           =1 typedef unsigned char BYTE;
           =1 #endif   /* _BYTE_DEF_ */
  40      =1  
  41      =1  // WORD type definition, for KEIL Compiler
  42      =1  #ifndef _WORD_DEF_              // Compiler Specific, written for 
             -Little Endian
           =1 #define _WORD_DEF_
           =1 typedef union {unsigned int i; unsigned char c[2];} WORD;
           =1 #define LSB 1                   // All words sent to and received 
             -from the host are
           =1 #define MSB 0                   // little endian, this is switched
             - by software when
           =1                                 // neccessary.  These sections of 
             -code have been marked
           =1                                 // with "Compiler Specific" as abo
             -ve for easier modification
           =1 #endif   /* _WORD_DEF_ */
  50      =1  
  51      =1  //------------------------------------------
  52      =1  // Standard Device Descriptor Type Defintion
  53      =1  //------------------------------------------
  54      =1  typedef code struct
  55      =1  {
  56      =1     BYTE bLength;                // Size of this Descriptor in Byte
             -s
  57      =1     BYTE bDescriptorType;        // Descriptor Type (=1)
  58      =1     WORD bcdUSB;                 // USB Spec Release Number in BCD
  59      =1     BYTE bDeviceClass;           // Device Class Code
  60      =1     BYTE bDeviceSubClass;        // Device Subclass Code 
  61      =1     BYTE bDeviceProtocol;        // Device Protocol Code
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 43  

  62      =1     BYTE bMaxPacketSize0;        // Maximum Packet Size for EP0 
  63      =1     WORD idVendor;               // Vendor ID 
  64      =1     WORD idProduct;              // Product ID
  65      =1     WORD bcdDevice;              // Device Release Number in BCD
  66      =1     BYTE iManufacturer;          // Index of String Desc for Manufa
             -cturer
  67      =1     BYTE iProduct;               // Index of String Desc for Produc
             -t
  68      =1     BYTE iSerialNumber;          // Index of String Desc for SerNo
  69      =1     BYTE bNumConfigurations;     // Number of possible Configuratio
             -ns
  70      =1  } device_descriptor;            // End of Device Descriptor Type
  71      =1  
  72      =1  //--------------------------------------------------
  73      =1  // Standard Configuration Descriptor Type Definition
  74      =1  //--------------------------------------------------
  75      =1  typedef code struct 
  76      =1  {
  77      =1     BYTE bLength;                // Size of this Descriptor in Byte
             -s
  78      =1     BYTE bDescriptorType;        // Descriptor Type (=2)
  79      =1     WORD wTotalLength;           // Total Length of Data for this C
             -onf
  80      =1     BYTE bNumInterfaces;         // No of Interfaces supported by t
             -his Conf
  81      =1     BYTE bConfigurationValue;    // Designator Value for *this* Con
             -figuration
  82      =1     BYTE iConfiguration;         // Index of String Desc for this C
             -onf
  83      =1     BYTE bmAttributes;           // Configuration Characteristics (
             -see below)
  84      =1     BYTE bMaxPower;              // Max. Power Consumption in this 
             -Conf (*2mA)
  85      =1  } configuration_descriptor;     // End of Configuration Descriptor
             - Type
  86      =1  
  87      =1  //----------------------------------------------
  88      =1  // Standard Interface Descriptor Type Definition
  89      =1  //----------------------------------------------
  90      =1  typedef code struct 
  91      =1  {
  92      =1     BYTE bLength;                // Size of this Descriptor in Byte
             -s
  93      =1     BYTE bDescriptorType;        // Descriptor Type (=4)
  94      =1     BYTE bInterfaceNumber;       // Number of *this* Interface (0..
             -)
  95      =1     BYTE bAlternateSetting;      // Alternative for this Interface 
             -(if any)
  96      =1     BYTE bNumEndpoints;          // No of EPs used by this IF (excl
             -. EP0)
  97      =1     BYTE bInterfaceClass;        // Interface Class Code
  98      =1     BYTE bInterfaceSubClass;     // Interface Subclass Code
  99      =1     BYTE bInterfaceProtocol;     // Interface Protocol Code
 100      =1     BYTE iInterface;             // Index of String Desc for this I
             -nterface
 101      =1  } interface_descriptor;         // End of Interface Descriptor Typ
             -e
 102      =1  
 103      =1  //---------------------------------------------
 104      =1  // Standard Endpoint Descriptor Type Definition
 105      =1  //---------------------------------------------
 106      =1  typedef code struct 
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 44  

 107      =1  {
 108      =1     BYTE bLength;                // Size of this Descriptor in Byte
             -s
 109      =1     BYTE bDescriptorType;        // Descriptor Type (=5)
 110      =1     BYTE bEndpointAddress;       // Endpoint Address (Number + Dire
             -ction)
 111      =1     BYTE bmAttributes;           // Endpoint Attributes (Transfer T
             -ype)
 112      =1     WORD wMaxPacketSize;         // Max. Endpoint Packet Size
 113      =1     BYTE bInterval;              // Polling Interval (Interrupt) ms
 114      =1  } endpoint_descriptor;          // End of Endpoint Descriptor Type
 115      =1  
 116      =1  
 117      =1  //-----------------------------
 118      =1  // Setup Packet Type Definition
 119      =1  //-----------------------------
 120      =1  typedef struct 
 121      =1  {
 122      =1     BYTE bmRequestType;          // Request recipient, type, and di
             -rection
 123      =1     BYTE bRequest;               // Specific standard request numbe
             -r
 124      =1     WORD wValue;                 // varies according to request
 125      =1     WORD wIndex;                 // varies according to request
 126      =1     WORD wLength;                // Number of bytes to transfer
 127      =1  } setup_buffer;                 // End of Setup Packet Type
 128      =1  
 129      =1  #endif  /* _USB_DESC_H_ */
  44          #include "F34x_MSD_VBUS_Functions.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_VBUS_Functions.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_MSD_VBUS_
             -Functions.c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000070
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 45  

  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef __F34X_MSD_VBUS_FUNCTIONS_H__
  32      =1  #define __F34X_MSD_VBUS_FUNCTIONS_H__
  33      =1  
  34      =1  //----------------------------------------------------------------
             --------------
  35      =1  // Function Prototypes
  36      =1  //----------------------------------------------------------------
             --------------
  37      =1  
  38      =1  void Switch_On_Off_UART();
  39      =1  
  40      =1  //----------------------------------------------------------------
             --------------
  41      =1  // Header File Preprocessor Directive
  42      =1  //----------------------------------------------------------------
             --------------
  43      =1  
  44      =1  #endif                                 // #define __F34X_MSD_VBUS_
             -FUNCTIONS_H__
  45      =1  
  46      =1  //----------------------------------------------------------------
             --------------
  47      =1  // End Of File
  48      =1  //----------------------------------------------------------------
             --------------
  45          
  46          #include "F34x_MSD_Sect_Serv.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Sect_Serv.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_Sect_Serv
             -.c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000054
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 46  

  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef _SECT_SERV_H_
  32      =1  #define _SECT_SERV_H_
  33      =1  
  34      =1  #include "F34x_MSD_USB_Main.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_USB_Main.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Main header file for USB firmware. Includes function prototypes
             -,
  10      =2  // standard constants, and configuration constants.//
  11      =2  //
  12      =2  // FID:            34X000063
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -No changes; incremented revision number to match project re
             -vision
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  // 11/22/02 - DM: 1. Updated function prototypes and added constan
             -ts
  27      =2  //                to F34x_USB_Main.h with sample interrupt firmwar
             -e.
  28      =2  
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  // Header File Preprocessor Directive
  31      =2  //----------------------------------------------------------------
             --------------
  32      =2  
  33      =2  #ifndef _USB_MAIN_H_
           =2 #define _USB_MAIN_H_
           =2 
           =2 #include "F34x_MSD_Definitions.h"
           =2 //#define _USB_LOW_SPEED_                      // Change this comm
             -ent to make Full/Low speed
           =2 
           =2 #define SYSCLK                   12000000    // SYSCLK frequency i
             -n Hz
           =2 
           =2 // USB clock selections (SFR CLKSEL)
           =2 #define USB_4X_CLOCK             0x00        // Select 4x clock mu
             -ltiplier, for USB Full Speed
           =2 #define USB_INT_OSC_DIV_2        0x10        // See Data Sheet sec
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 47  

             -tion 13. Oscillators
           =2 #define USB_EXT_OSC              0x20
           =2 #define USB_EXT_OSC_DIV_2        0x30
           =2 #define USB_EXT_OSC_DIV_3        0x40
           =2 #define USB_EXT_OSC_DIV_4        0x50
           =2 
           =2 // System clock selections (SFR CLKSEL)
           =2 #define SYS_INT_OSC              0x00        // Select to use inte
             -rnal oscillator
           =2 #define SYS_4X_MUL               0x03        // Select to use inte
             -rnal oscillator
           =2 #define SYS_EXT_OSC              0x01        // Select to use an e
             -xternal oscillator
           =2 #define SYS_4X_DIV_2             0x02
           =2 
           =2 // BYTE type definition
           =2 #ifndef _BYTE_DEF_
           =2 #define _BYTE_DEF_
           =2 typedef unsigned char BYTE;
           =2 #endif   /* _BYTE_DEF_ */
           =2 
           =2 // WORD type definition, for KEIL Compiler
           =2 #ifndef _WORD_DEF_                           // Compiler Specific,
             - written for Little Endian
           =2 #define _WORD_DEF_
           =2 typedef union {unsigned int i; unsigned char c[2];} WORD;
           =2 #define LSB 1                                // All words sent to 
             -and received from the host are
           =2 #define MSB 0                                // little endian, thi
             -s is switched by software when
           =2                                              // neccessary.  These
             - sections of code have been marked
           =2                                                                                          // with "Compiler Specific" as above for easier modifi
             -cation
           =2 #endif   /* _WORD_DEF_ */
           =2 
           =2 // DWORD type definition
           =2 #ifndef _DWORD_DEF_
           =2 #define _DWORD_DEF_
           =2 typedef unsigned long DWORD;
           =2 #endif /* _DWORD_DEF_ */
           =2 
           =2 extern volatile DWORD xdata tickcount;
           =2 
           =2 // Define Endpoint Packet Sizes
           =2 #ifdef _USB_LOW_SPEED_
           =2 #define  EP0_PACKET_SIZE         0x40        // This value can be 
             -8,16,32,64 depending on device speed, see USB spec
           =2 #else
           =2 #define  EP0_PACKET_SIZE         0x40
           =2 #endif /* _USB_LOW_SPEED_ */ 
           =2 
           =2 #define  EP1_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type  
           =2 #define  EP1_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP1_PACKET_SIZE
           =2 #define  EP2_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type
           =2 #define  EP2_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP2_PACKET_SIZE
           =2 
           =2 // Standard Descriptor Types
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 48  

           =2 #define  DSC_DEVICE              0x01        // Device Descriptor
           =2 #define  DSC_CONFIG              0x02        // Configuration Desc
             -riptor
           =2 #define  DSC_STRING              0x03        // String Descriptor
           =2 #define  DSC_INTERFACE           0x04        // Interface Descript
             -or
           =2 #define  DSC_ENDPOINT            0x05        // Endpoint Descripto
             -r
           =2 
           =2 // HID Descriptor Types
           =2 #define DSC_HID                                 0x21            // HID Class Descriptor
           =2 #define DSC_HID_REPORT                  0x22            // HID Report Descriptor
           =2 
           =2 // Standard Request Codes
           =2 #define  GET_STATUS             0x00        // Code for Get Status
           =2 #define  CLEAR_FEATURE          0x01        // Code for Clear Feat
             -ure
           =2 #define  SET_FEATURE            0x03        // Code for Set Featur
             -e
           =2 #define  SET_ADDRESS            0x05        // Code for Set Addres
             -s
           =2 #define  GET_DESCRIPTOR         0x06        // Code for Get Descri
             -ptor
           =2 #define  SET_DESCRIPTOR         0x07        // Code for Set Descri
             -ptor(not used)
           =2 #define  GET_CONFIGURATION      0x08        // Code for Get Config
             -uration
           =2 #define  SET_CONFIGURATION      0x09        // Code for Set Config
             -uration
           =2 #define  GET_INTERFACE          0x0A        // Code for Get Interf
             -ace
           =2 #define  SET_INTERFACE          0x0B        // Code for Set Interf
             -ace
           =2 #define  SYNCH_FRAME            0x0C        // Code for Synch Fram
             -e(not used)
           =2 #define  MSD_RESET                              0xFF            // Mass-storage device Reset
           =2 #define  MSD_GET_MAX_LUN                0xFE            // Mass-storage device Get Max LU
             -N
           =2 
           =2 // HID Request Codes
           =2 #define GET_REPORT                              0x01            // Code for Get Report
           =2 #define GET_IDLE                                0x02            // Code for Get Idle
           =2 #define GET_PROTOCOL                    0x03            // Code for Get Protocol
           =2 #define SET_REPORT                              0x09            // Code for Set Report
           =2 #define SET_IDLE                                0x0A            // Code for Set Idle
           =2 #define SET_PROTOCOL                    0x0B            // Code for Set Protocol
           =2 
           =2 // Define device states
           =2 #define  DEV_ATTACHED            0x00        // Device is in Attac
             -hed State
           =2 #define  DEV_POWERED             0x01        // Device is in Power
             -ed State
           =2 #define  DEV_DEFAULT             0x02        // Device is in Defau
             -lt State
           =2 #define  DEV_ADDRESS             0x03        // Device is in Addre
             -ssed State
           =2 #define  DEV_CONFIGURED          0x04        // Device is in Confi
             -gured State
           =2 #define  DEV_SUSPENDED           0x05        // Device is in Suspe
             -nded State
           =2 
           =2 // Define bmRequestType bitmaps
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 49  

           =2 #define  IN_DEVICE               0x00        // Request made to de
             -vice, direction is IN 
           =2 #define  OUT_DEVICE              0x80        // Request made to de
             -vice, direction is OUT
           =2 #define  IN_INTERFACE            0x01        // Request made to in
             -terface, direction is IN
           =2 #define  OUT_INTERFACE           0x81        // Request made to in
             -terface, direction is OUT
           =2 #define  IN_ENDPOINT             0x02        // Request made to en
             -dpoint, direction is IN
           =2 #define  OUT_ENDPOINT            0x82        // Request made to en
             -dpoint, direction is OUT
           =2 
           =2 // Define wIndex bitmaps
           =2 #define  IN_EP1                  0x81        // Index values used 
             -by Set and Clear feature
           =2 #define  OUT_EP1                 0x01        // commands for Endpo
             -int_Halt
           =2 #define  IN_EP2                  0x82
           =2 #ifdef __F326_VER__
           =2 #define  OUT_EP2                                 0x01           
           =2 #else
           =2 #define  OUT_EP2                                 0x01           
           =2 #endif
           =2 
           =2 // Define wValue bitmaps for Standard Feature Selectors
           =2 #define  DEVICE_REMOTE_WAKEUP    0x01        // Remote wakeup feat
             -ure(not used)
           =2 #define  ENDPOINT_HALT           0x00        // Endpoint_Halt feat
             -ure selector
           =2 
           =2 // Define Endpoint States
           =2 #define  EP_IDLE                 0x00        // This signifies End
             -point Idle State
           =2 #define  EP_TX                   0x01        // Endpoint Transmit 
             -State
           =2 #define  EP_RX                   0x02        // Endpoint Receive S
             -tate
           =2 #define  EP_HALT                 0x03        // Endpoint Halt Stat
             -e (return stalls)
           =2 #define  EP_STALL                0x04        // Endpoint Stall (se
             -nd procedural stall next status phase)
           =2 #define  EP_ADDRESS              0x05        // Endpoint Address (
             -change FADDR during next status phase)
           =2 
           =2 // Function prototypes
           =2 // USB Routines
           =2 void USB_Resume(void);                       // This routine resum
             -es USB operation
           =2 void USB_Reset(void);                        // Called after USB b
             -us reset
           =2 void Handle_Setup(void);                     // Handle setup packe
             -t on Endpoint 0
           =2 void Handle_In1(BYTE* ptr_buf);                       // Handle in
             - packet on Endpoint 1
           =2 void Handle_Out2(void);                      // Handle out packet 
             -on Endpoint 2
           =2 void USB_Suspend(void);                      // This routine calle
             -d when suspend signalling on bus
           =2 void Out2_Get_Data(BYTE* ptr_buf);                               // Copies from FIFO to ptr_
             -buf, clears FIFO-full flag.
           =2 void Out2_Done(void);                                            // Call this when finished with the d
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 50  

             -ata
           =2 
           =2 // Standard Requests
           =2 void Get_Status(void);                       // These are called f
             -or each specific standard request
           =2 void Clear_Feature(void);
           =2 void Set_Feature(void);
           =2 void Set_Address(void);
           =2 void Get_Descriptor(void);
           =2 void Get_Configuration(void);
           =2 void Set_Configuration(void);
           =2 void Get_Interface(void);
           =2 void Set_Interface(void);
           =2 
           =2 // MSD Specific Requests
           =2 // void Reset_Msd(void);
           =2 // void Get_MaxLUN(void);
           =2 
           =2 // Initialization Routines
           =2 void Sys_Clk_Init(void);                      // Initialize the sy
             -stem clock(depends on Full/Low speed)
           =2 void Port_Init(void);                        // Configure ports fo
             -r this specific application
           =2 void USB0_Init(void);                        // Configure USB core
             - for either Full/Low speed
           =2 void Timer_Init(void);                       // Start timer 2 for 
             -use by ADC and to check switches
           =2 void Adc_Init(void);                         // Configure ADC for 
             -continuous conversion, low-power mode
           =2 
           =2 // Other Routines
           =2 void Timer2_ISR(void);                       // Called when Timer 
             -2 overflows, see if switches are pressed
           =2 void Adc_ConvComple_ISR(void);               // When a conversion 
             -completes, switch ADC multiplexor
           =2 void USB_ISR(void);                          // Called to determin
             -e type of USB interrupt
           =2 void Fifo_ReadC(BYTE, unsigned int, BYTE *) ;
           =2 extern void Fifo_Read (BYTE, unsigned int, BYTE *) ; // Used for m
             -ultiple byte reads of Endpoint fifos
           =2 extern void Fifo_Write (BYTE, unsigned int, BYTE *) reentrant;// U
             -sed for multiple byte writes of Endpoint fifos
           =2 void Force_Stall(void);                      // Forces a procedura
             -l stall on Endpoint 0
           =2 void Delay(void);                            // Approximately 80 u
             -s/1 ms on Full/Low Speed
           =2 
           =2 void USB_In(BYTE* ptr_buf,unsigned count);
           =2 
           =2 void USB_Bulk_Init(void);
           =2 
           =2 extern unsigned xdata Out_Count;
           =2 extern BYTE xdata Out_Packet[EP2_PACKET_SIZE];
           =2 extern BYTE xdata In_count;
           =2 extern BYTE xdata In_Packet[EP1_PACKET_SIZE];
           =2 //extern BYTE xdata In_Overrun;
           =2 
           =2 #endif      /* _USB_MAIN_H_ */
 217      =2  
  35      =1  #include "F34x_MSD_Physical_Settings.h"
   1      =2  //----------------------------------------------------------------
             --------------
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 51  

   2      =2  // F34x_MSD_Physical_Settings.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Header file with common definitions
  10      =2  //
  11      =2  //
  12      =2  // FID:            34X000048
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -Replaced SFR definitions file "c8051f320.h" with "c8051f340
             -.h"
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  
  27      =2  //----------------------------------------------------------------
             --------------
  28      =2  // Header File Preprocessor Directive
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  
  31      =2  #ifndef __PHYSICAL_SETTINGS_H__
           =2 #define __PHYSICAL_SETTINGS_H__
           =2 
           =2 #include "c8051f340.h"
           =2 
           =2 // Physical size in bytes of one MMC FLASH sector
           =2 #define PHYSICAL_BLOCK_SIZE     512   
           =2 
           =2 sbit SCLK = P0^0;
           =2 sbit SCS  = P0^3;
           =2 sbit MISO = P0^1;
           =2 sbit MOSI = P0^2;
           =2 
           =2 #endif
  36      =1  //#include "F34x_MMC.h"
  37      =1  
  38      =1  //----------------------------------------------------------------
             --------------
  39      =1  // Structure Prototypes
  40      =1  //----------------------------------------------------------------
             --------------
  41      =1  
  42      =1  // This large bootrecord will be overlayed on the physical block t
             -hat was read.
  43      =1  typedef struct {
  44      =1    BYTE jmp[3];
  45      =1    char oem_name[8];
  46      =1    unsigned bytes_per_sector;
  47      =1    BYTE sectors_per_cluster;
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 52  

  48      =1    unsigned reserved_sectors;
  49      =1    BYTE fat_copies;
  50      =1    unsigned root_directory_entries;
  51      =1    unsigned number_of_sectors;
  52      =1    BYTE media_descriptor;
  53      =1    unsigned sectors_per_fat;
  54      =1    unsigned sectors_per_track;
  55      =1    unsigned heads;
  56      =1    DWORD hidden_sectors;
  57      =1    DWORD total_sectors;
  58      =1    BYTE drive_number;
  59      =1    BYTE reserved;
  60      =1    BYTE extended_signature;              // 0x29
  61      =1    BYTE serial_number[4];
  62      =1    char volume_label[11];
  63      =1    char filesystem[8];                           // "FAT16   "
  64      =1    BYTE bootstrap[448];
  65      =1    BYTE signature[2];                            // 0x55 0xAA
  66      =1  } bootrecord_large;
  67      =1  
  68      =1  // This small bootrecord will be in memory as long as the program 
             -is running
  69      =1  typedef struct {
  70      =1          BYTE valid;
  71      =1          BYTE fat_copies;
  72      =1          unsigned root_directory_entries;
  73      =1          unsigned number_of_sectors;
  74      =1          unsigned sectors_per_fat;
  75      =1          DWORD total_sectors;
  76      =1          unsigned reserved_sectors;
  77      =1          unsigned hidden_sectors;
  78      =1          BYTE sectors_per_cluster;
  79      =1  } bootrecord_small;
  80      =1  
  81      =1  // This is a global 512-byte buffer. 
  82      =1  // Sect_Read() puts data in this buffer.
  83      =1  // Sect_Write() gets data from this buffer.
  84      =1  extern BYTE xdata Scratch[];
  85      =1  
  86      =1  // Changed these functions into #define, to safe code memory.
  87      =1  #define Sect_Block_Size() ((unsigned)PHYSICAL_BLOCK_SIZE)
  88      =1  //#define Sect_Fat1() ((unsigned)1)
  89      =1  
  90      =1  //----------------------------------------------------------------
             --------------
  91      =1  // Function Prototypes
  92      =1  //----------------------------------------------------------------
             --------------
  93      =1  
  94      =1  void Sect_Init(void);                           // Must be called before calling any othe
             -r Sect_Function.
  95      =1  BYTE Sect_Formatted(void);                      // Returns TRUE is MMC card appears 
             -to be correctly formatted.
  96      =1  unsigned long Sect_Sectors(void);       // Returns number of sectors
  97      =1  DWORD Sect_Size(void);                          // Returns number of bytes available on
             - MMC card.
  98      =1  void Sect_Print(void);                          // Dumps some info (size, bootrecord, fi
             -lesystem, etc).
  99      =1  unsigned Sect_Read(unsigned long sector);       // Reads one sector into
             - Scratch buffer.
 100      =1  void Sect_Write(unsigned long sector);  // Write one sector from Sc
             -ratch buffer.
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 53  

 101      =1  unsigned Sect_Root_Dir(void);           // Returns sector number of root d
             -irectory.
 102      =1  unsigned Sect_Root_Dir_Last(void);      // Last sector number of root d
             -irectory.
 103      =1  unsigned Sect_File_Data(void);          // First sector of file data.
 104      =1  unsigned Sect_Fat1(void);
 105      =1  unsigned Sect_Fat2(void);                       // First sector of 2nd FAT.
 106      =1  void Sect_Write_Multi_Fat(unsigned long sector); // Automatically 
             -handle multiple FAT copies.
 107      =1  void Sect_Validate(void) reentrant;
 108      =1  
 109      =1  #endif
  47          #include "F34x_MSD_Msd.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_MMC.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_MMC.c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000047
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef _MSD_H_
  32      =1  #define _MSD_H_
  33      =1  
  34      =1  #include "F34x_MSD_USB_Main.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_USB_Main.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 54  

   9      =2  // Main header file for USB firmware. Includes function prototypes
             -,
  10      =2  // standard constants, and configuration constants.//
  11      =2  //
  12      =2  // FID:            34X000063
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -No changes; incremented revision number to match project re
             -vision
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  // 11/22/02 - DM: 1. Updated function prototypes and added constan
             -ts
  27      =2  //                to F34x_USB_Main.h with sample interrupt firmwar
             -e.
  28      =2  
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  // Header File Preprocessor Directive
  31      =2  //----------------------------------------------------------------
             --------------
  32      =2  
  33      =2  #ifndef _USB_MAIN_H_
           =2 #define _USB_MAIN_H_
           =2 
           =2 #include "F34x_MSD_Definitions.h"
           =2 //#define _USB_LOW_SPEED_                      // Change this comm
             -ent to make Full/Low speed
           =2 
           =2 #define SYSCLK                   12000000    // SYSCLK frequency i
             -n Hz
           =2 
           =2 // USB clock selections (SFR CLKSEL)
           =2 #define USB_4X_CLOCK             0x00        // Select 4x clock mu
             -ltiplier, for USB Full Speed
           =2 #define USB_INT_OSC_DIV_2        0x10        // See Data Sheet sec
             -tion 13. Oscillators
           =2 #define USB_EXT_OSC              0x20
           =2 #define USB_EXT_OSC_DIV_2        0x30
           =2 #define USB_EXT_OSC_DIV_3        0x40
           =2 #define USB_EXT_OSC_DIV_4        0x50
           =2 
           =2 // System clock selections (SFR CLKSEL)
           =2 #define SYS_INT_OSC              0x00        // Select to use inte
             -rnal oscillator
           =2 #define SYS_4X_MUL               0x03        // Select to use inte
             -rnal oscillator
           =2 #define SYS_EXT_OSC              0x01        // Select to use an e
             -xternal oscillator
           =2 #define SYS_4X_DIV_2             0x02
           =2 
           =2 // BYTE type definition
           =2 #ifndef _BYTE_DEF_
           =2 #define _BYTE_DEF_
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 55  

           =2 typedef unsigned char BYTE;
           =2 #endif   /* _BYTE_DEF_ */
           =2 
           =2 // WORD type definition, for KEIL Compiler
           =2 #ifndef _WORD_DEF_                           // Compiler Specific,
             - written for Little Endian
           =2 #define _WORD_DEF_
           =2 typedef union {unsigned int i; unsigned char c[2];} WORD;
           =2 #define LSB 1                                // All words sent to 
             -and received from the host are
           =2 #define MSB 0                                // little endian, thi
             -s is switched by software when
           =2                                              // neccessary.  These
             - sections of code have been marked
           =2                                                                                          // with "Compiler Specific" as above for easier modifi
             -cation
           =2 #endif   /* _WORD_DEF_ */
           =2 
           =2 // DWORD type definition
           =2 #ifndef _DWORD_DEF_
           =2 #define _DWORD_DEF_
           =2 typedef unsigned long DWORD;
           =2 #endif /* _DWORD_DEF_ */
           =2 
           =2 extern volatile DWORD xdata tickcount;
           =2 
           =2 // Define Endpoint Packet Sizes
           =2 #ifdef _USB_LOW_SPEED_
           =2 #define  EP0_PACKET_SIZE         0x40        // This value can be 
             -8,16,32,64 depending on device speed, see USB spec
           =2 #else
           =2 #define  EP0_PACKET_SIZE         0x40
           =2 #endif /* _USB_LOW_SPEED_ */ 
           =2 
           =2 #define  EP1_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type  
           =2 #define  EP1_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP1_PACKET_SIZE
           =2 #define  EP2_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type
           =2 #define  EP2_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP2_PACKET_SIZE
           =2 
           =2 // Standard Descriptor Types
           =2 #define  DSC_DEVICE              0x01        // Device Descriptor
           =2 #define  DSC_CONFIG              0x02        // Configuration Desc
             -riptor
           =2 #define  DSC_STRING              0x03        // String Descriptor
           =2 #define  DSC_INTERFACE           0x04        // Interface Descript
             -or
           =2 #define  DSC_ENDPOINT            0x05        // Endpoint Descripto
             -r
           =2 
           =2 // HID Descriptor Types
           =2 #define DSC_HID                                 0x21            // HID Class Descriptor
           =2 #define DSC_HID_REPORT                  0x22            // HID Report Descriptor
           =2 
           =2 // Standard Request Codes
           =2 #define  GET_STATUS             0x00        // Code for Get Status
           =2 #define  CLEAR_FEATURE          0x01        // Code for Clear Feat
             -ure
           =2 #define  SET_FEATURE            0x03        // Code for Set Featur
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 56  

             -e
           =2 #define  SET_ADDRESS            0x05        // Code for Set Addres
             -s
           =2 #define  GET_DESCRIPTOR         0x06        // Code for Get Descri
             -ptor
           =2 #define  SET_DESCRIPTOR         0x07        // Code for Set Descri
             -ptor(not used)
           =2 #define  GET_CONFIGURATION      0x08        // Code for Get Config
             -uration
           =2 #define  SET_CONFIGURATION      0x09        // Code for Set Config
             -uration
           =2 #define  GET_INTERFACE          0x0A        // Code for Get Interf
             -ace
           =2 #define  SET_INTERFACE          0x0B        // Code for Set Interf
             -ace
           =2 #define  SYNCH_FRAME            0x0C        // Code for Synch Fram
             -e(not used)
           =2 #define  MSD_RESET                              0xFF            // Mass-storage device Reset
           =2 #define  MSD_GET_MAX_LUN                0xFE            // Mass-storage device Get Max LU
             -N
           =2 
           =2 // HID Request Codes
           =2 #define GET_REPORT                              0x01            // Code for Get Report
           =2 #define GET_IDLE                                0x02            // Code for Get Idle
           =2 #define GET_PROTOCOL                    0x03            // Code for Get Protocol
           =2 #define SET_REPORT                              0x09            // Code for Set Report
           =2 #define SET_IDLE                                0x0A            // Code for Set Idle
           =2 #define SET_PROTOCOL                    0x0B            // Code for Set Protocol
           =2 
           =2 // Define device states
           =2 #define  DEV_ATTACHED            0x00        // Device is in Attac
             -hed State
           =2 #define  DEV_POWERED             0x01        // Device is in Power
             -ed State
           =2 #define  DEV_DEFAULT             0x02        // Device is in Defau
             -lt State
           =2 #define  DEV_ADDRESS             0x03        // Device is in Addre
             -ssed State
           =2 #define  DEV_CONFIGURED          0x04        // Device is in Confi
             -gured State
           =2 #define  DEV_SUSPENDED           0x05        // Device is in Suspe
             -nded State
           =2 
           =2 // Define bmRequestType bitmaps
           =2 #define  IN_DEVICE               0x00        // Request made to de
             -vice, direction is IN 
           =2 #define  OUT_DEVICE              0x80        // Request made to de
             -vice, direction is OUT
           =2 #define  IN_INTERFACE            0x01        // Request made to in
             -terface, direction is IN
           =2 #define  OUT_INTERFACE           0x81        // Request made to in
             -terface, direction is OUT
           =2 #define  IN_ENDPOINT             0x02        // Request made to en
             -dpoint, direction is IN
           =2 #define  OUT_ENDPOINT            0x82        // Request made to en
             -dpoint, direction is OUT
           =2 
           =2 // Define wIndex bitmaps
           =2 #define  IN_EP1                  0x81        // Index values used 
             -by Set and Clear feature
           =2 #define  OUT_EP1                 0x01        // commands for Endpo
             -int_Halt
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 57  

           =2 #define  IN_EP2                  0x82
           =2 #ifdef __F326_VER__
           =2 #define  OUT_EP2                                 0x01           
           =2 #else
           =2 #define  OUT_EP2                                 0x01           
           =2 #endif
           =2 
           =2 // Define wValue bitmaps for Standard Feature Selectors
           =2 #define  DEVICE_REMOTE_WAKEUP    0x01        // Remote wakeup feat
             -ure(not used)
           =2 #define  ENDPOINT_HALT           0x00        // Endpoint_Halt feat
             -ure selector
           =2 
           =2 // Define Endpoint States
           =2 #define  EP_IDLE                 0x00        // This signifies End
             -point Idle State
           =2 #define  EP_TX                   0x01        // Endpoint Transmit 
             -State
           =2 #define  EP_RX                   0x02        // Endpoint Receive S
             -tate
           =2 #define  EP_HALT                 0x03        // Endpoint Halt Stat
             -e (return stalls)
           =2 #define  EP_STALL                0x04        // Endpoint Stall (se
             -nd procedural stall next status phase)
           =2 #define  EP_ADDRESS              0x05        // Endpoint Address (
             -change FADDR during next status phase)
           =2 
           =2 // Function prototypes
           =2 // USB Routines
           =2 void USB_Resume(void);                       // This routine resum
             -es USB operation
           =2 void USB_Reset(void);                        // Called after USB b
             -us reset
           =2 void Handle_Setup(void);                     // Handle setup packe
             -t on Endpoint 0
           =2 void Handle_In1(BYTE* ptr_buf);                       // Handle in
             - packet on Endpoint 1
           =2 void Handle_Out2(void);                      // Handle out packet 
             -on Endpoint 2
           =2 void USB_Suspend(void);                      // This routine calle
             -d when suspend signalling on bus
           =2 void Out2_Get_Data(BYTE* ptr_buf);                               // Copies from FIFO to ptr_
             -buf, clears FIFO-full flag.
           =2 void Out2_Done(void);                                            // Call this when finished with the d
             -ata
           =2 
           =2 // Standard Requests
           =2 void Get_Status(void);                       // These are called f
             -or each specific standard request
           =2 void Clear_Feature(void);
           =2 void Set_Feature(void);
           =2 void Set_Address(void);
           =2 void Get_Descriptor(void);
           =2 void Get_Configuration(void);
           =2 void Set_Configuration(void);
           =2 void Get_Interface(void);
           =2 void Set_Interface(void);
           =2 
           =2 // MSD Specific Requests
           =2 // void Reset_Msd(void);
           =2 // void Get_MaxLUN(void);
           =2 
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 58  

           =2 // Initialization Routines
           =2 void Sys_Clk_Init(void);                      // Initialize the sy
             -stem clock(depends on Full/Low speed)
           =2 void Port_Init(void);                        // Configure ports fo
             -r this specific application
           =2 void USB0_Init(void);                        // Configure USB core
             - for either Full/Low speed
           =2 void Timer_Init(void);                       // Start timer 2 for 
             -use by ADC and to check switches
           =2 void Adc_Init(void);                         // Configure ADC for 
             -continuous conversion, low-power mode
           =2 
           =2 // Other Routines
           =2 void Timer2_ISR(void);                       // Called when Timer 
             -2 overflows, see if switches are pressed
           =2 void Adc_ConvComple_ISR(void);               // When a conversion 
             -completes, switch ADC multiplexor
           =2 void USB_ISR(void);                          // Called to determin
             -e type of USB interrupt
           =2 void Fifo_ReadC(BYTE, unsigned int, BYTE *) ;
           =2 extern void Fifo_Read (BYTE, unsigned int, BYTE *) ; // Used for m
             -ultiple byte reads of Endpoint fifos
           =2 extern void Fifo_Write (BYTE, unsigned int, BYTE *) reentrant;// U
             -sed for multiple byte writes of Endpoint fifos
           =2 void Force_Stall(void);                      // Forces a procedura
             -l stall on Endpoint 0
           =2 void Delay(void);                            // Approximately 80 u
             -s/1 ms on Full/Low Speed
           =2 
           =2 void USB_In(BYTE* ptr_buf,unsigned count);
           =2 
           =2 void USB_Bulk_Init(void);
           =2 
           =2 extern unsigned xdata Out_Count;
           =2 extern BYTE xdata Out_Packet[EP2_PACKET_SIZE];
           =2 extern BYTE xdata In_count;
           =2 extern BYTE xdata In_Packet[EP1_PACKET_SIZE];
           =2 //extern BYTE xdata In_Overrun;
           =2 
           =2 #endif      /* _USB_MAIN_H_ */
 217      =2  
  35      =1  
  36      =1  //----------------------------------------------------------------
             --------------
  37      =1  // Structure Prototypes
  38      =1  //----------------------------------------------------------------
             --------------
  39      =1  
  40      =1  typedef struct _CBW {
  41      =1          DWORD dCBWSignature;
  42      =1          DWORD dCBWTag;
  43      =1          DWORD dCBWDataTransferLength;
  44      =1          BYTE  bmCBWFlags;
  45      =1          BYTE  bCBWLUN;
  46      =1          BYTE  bCBWCBLength;
  47      =1          BYTE  CBWCB[16];
  48      =1  } CBW;
  49      =1  
  50      =1  typedef struct _CSW {
  51      =1          DWORD dCSWSignature;
  52      =1          DWORD dCSWTag;
  53      =1          DWORD dCSWDataResidue;
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 59  

  54      =1          BYTE  bCSWStatus;
  55      =1  } CSW;
  56      =1  
  57      =1  extern CBW xdata cbw;
  58      =1  extern CSW xdata csw;
  59      =1  
  60      =1  //----------------------------------------------------------------
             --------------
  61      =1  // Function Prototypes
  62      =1  //----------------------------------------------------------------
             --------------
  63      =1  
  64      =1  void Msd_Step(void);
  65      =1  
  66      =1  #endif
  48          #include "F34x_MSD_UART.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_UART.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_UART.c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000058
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef _UART_H_
  32      =1  #define _UART_H_
  33      =1  
  34      =1  //----------------------------------------------------------------
             --------------
  35      =1  // Function Prototypes
  36      =1  //----------------------------------------------------------------
             --------------
  37      =1  
  38      =1  void UART0_Init(void);
  39      =1  
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 60  

  40      =1  unsigned char key_available(void);
  41      =1  
  42      =1  #endif
  49          #include "F34x_MSD_File_System.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_File_System.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_File_Syst
             -em..c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000036
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef _FILESYS_H_
  32      =1  #define _FILESYS_H_
  33      =1  
  34      =1  #include "F34x_MSD_USB_Main.h"
   1      =2  //----------------------------------------------------------------
             --------------
   2      =2  // F34x_MSD_USB_Main.h
   3      =2  //----------------------------------------------------------------
             --------------
   4      =2  // Copyright 2006 Silicon Laboratories, Inc.
   5      =2  // http://www.silabs.com
   6      =2  //
   7      =2  // Program Description:
   8      =2  //
   9      =2  // Main header file for USB firmware. Includes function prototypes
             -,
  10      =2  // standard constants, and configuration constants.//
  11      =2  //
  12      =2  // FID:            34X000063
  13      =2  // Target:         C8051F34x
  14      =2  // Tool chain:     Keil
  15      =2  // Command Line:   See Readme.txt
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 61  

  16      =2  // Project Name:   F34x_USB_MSD
  17      =2  //
  18      =2  // Release 1.1
  19      =2  //    -All changes by PKC
  20      =2  //    -09 JUN 2006
  21      =2  //    -No changes; incremented revision number to match project re
             -vision
  22      =2  //
  23      =2  // Release 1.0
  24      =2  //    -Initial Release
  25      =2  //
  26      =2  // 11/22/02 - DM: 1. Updated function prototypes and added constan
             -ts
  27      =2  //                to F34x_USB_Main.h with sample interrupt firmwar
             -e.
  28      =2  
  29      =2  //----------------------------------------------------------------
             --------------
  30      =2  // Header File Preprocessor Directive
  31      =2  //----------------------------------------------------------------
             --------------
  32      =2  
  33      =2  #ifndef _USB_MAIN_H_
           =2 #define _USB_MAIN_H_
           =2 
           =2 #include "F34x_MSD_Definitions.h"
           =2 //#define _USB_LOW_SPEED_                      // Change this comm
             -ent to make Full/Low speed
           =2 
           =2 #define SYSCLK                   12000000    // SYSCLK frequency i
             -n Hz
           =2 
           =2 // USB clock selections (SFR CLKSEL)
           =2 #define USB_4X_CLOCK             0x00        // Select 4x clock mu
             -ltiplier, for USB Full Speed
           =2 #define USB_INT_OSC_DIV_2        0x10        // See Data Sheet sec
             -tion 13. Oscillators
           =2 #define USB_EXT_OSC              0x20
           =2 #define USB_EXT_OSC_DIV_2        0x30
           =2 #define USB_EXT_OSC_DIV_3        0x40
           =2 #define USB_EXT_OSC_DIV_4        0x50
           =2 
           =2 // System clock selections (SFR CLKSEL)
           =2 #define SYS_INT_OSC              0x00        // Select to use inte
             -rnal oscillator
           =2 #define SYS_4X_MUL               0x03        // Select to use inte
             -rnal oscillator
           =2 #define SYS_EXT_OSC              0x01        // Select to use an e
             -xternal oscillator
           =2 #define SYS_4X_DIV_2             0x02
           =2 
           =2 // BYTE type definition
           =2 #ifndef _BYTE_DEF_
           =2 #define _BYTE_DEF_
           =2 typedef unsigned char BYTE;
           =2 #endif   /* _BYTE_DEF_ */
           =2 
           =2 // WORD type definition, for KEIL Compiler
           =2 #ifndef _WORD_DEF_                           // Compiler Specific,
             - written for Little Endian
           =2 #define _WORD_DEF_
           =2 typedef union {unsigned int i; unsigned char c[2];} WORD;
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 62  

           =2 #define LSB 1                                // All words sent to 
             -and received from the host are
           =2 #define MSB 0                                // little endian, thi
             -s is switched by software when
           =2                                              // neccessary.  These
             - sections of code have been marked
           =2                                                                                          // with "Compiler Specific" as above for easier modifi
             -cation
           =2 #endif   /* _WORD_DEF_ */
           =2 
           =2 // DWORD type definition
           =2 #ifndef _DWORD_DEF_
           =2 #define _DWORD_DEF_
           =2 typedef unsigned long DWORD;
           =2 #endif /* _DWORD_DEF_ */
           =2 
           =2 extern volatile DWORD xdata tickcount;
           =2 
           =2 // Define Endpoint Packet Sizes
           =2 #ifdef _USB_LOW_SPEED_
           =2 #define  EP0_PACKET_SIZE         0x40        // This value can be 
             -8,16,32,64 depending on device speed, see USB spec
           =2 #else
           =2 #define  EP0_PACKET_SIZE         0x40
           =2 #endif /* _USB_LOW_SPEED_ */ 
           =2 
           =2 #define  EP1_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type  
           =2 #define  EP1_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP1_PACKET_SIZE
           =2 #define  EP2_PACKET_SIZE         0x0040      // Can range 0 - 1024
             - depending on data and transfer type
           =2 #define  EP2_PACKET_SIZE_LE      0x4000      // IMPORTANT- this sh
             -ould be Little-Endian version of EP2_PACKET_SIZE
           =2 
           =2 // Standard Descriptor Types
           =2 #define  DSC_DEVICE              0x01        // Device Descriptor
           =2 #define  DSC_CONFIG              0x02        // Configuration Desc
             -riptor
           =2 #define  DSC_STRING              0x03        // String Descriptor
           =2 #define  DSC_INTERFACE           0x04        // Interface Descript
             -or
           =2 #define  DSC_ENDPOINT            0x05        // Endpoint Descripto
             -r
           =2 
           =2 // HID Descriptor Types
           =2 #define DSC_HID                                 0x21            // HID Class Descriptor
           =2 #define DSC_HID_REPORT                  0x22            // HID Report Descriptor
           =2 
           =2 // Standard Request Codes
           =2 #define  GET_STATUS             0x00        // Code for Get Status
           =2 #define  CLEAR_FEATURE          0x01        // Code for Clear Feat
             -ure
           =2 #define  SET_FEATURE            0x03        // Code for Set Featur
             -e
           =2 #define  SET_ADDRESS            0x05        // Code for Set Addres
             -s
           =2 #define  GET_DESCRIPTOR         0x06        // Code for Get Descri
             -ptor
           =2 #define  SET_DESCRIPTOR         0x07        // Code for Set Descri
             -ptor(not used)
           =2 #define  GET_CONFIGURATION      0x08        // Code for Get Config
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 63  

             -uration
           =2 #define  SET_CONFIGURATION      0x09        // Code for Set Config
             -uration
           =2 #define  GET_INTERFACE          0x0A        // Code for Get Interf
             -ace
           =2 #define  SET_INTERFACE          0x0B        // Code for Set Interf
             -ace
           =2 #define  SYNCH_FRAME            0x0C        // Code for Synch Fram
             -e(not used)
           =2 #define  MSD_RESET                              0xFF            // Mass-storage device Reset
           =2 #define  MSD_GET_MAX_LUN                0xFE            // Mass-storage device Get Max LU
             -N
           =2 
           =2 // HID Request Codes
           =2 #define GET_REPORT                              0x01            // Code for Get Report
           =2 #define GET_IDLE                                0x02            // Code for Get Idle
           =2 #define GET_PROTOCOL                    0x03            // Code for Get Protocol
           =2 #define SET_REPORT                              0x09            // Code for Set Report
           =2 #define SET_IDLE                                0x0A            // Code for Set Idle
           =2 #define SET_PROTOCOL                    0x0B            // Code for Set Protocol
           =2 
           =2 // Define device states
           =2 #define  DEV_ATTACHED            0x00        // Device is in Attac
             -hed State
           =2 #define  DEV_POWERED             0x01        // Device is in Power
             -ed State
           =2 #define  DEV_DEFAULT             0x02        // Device is in Defau
             -lt State
           =2 #define  DEV_ADDRESS             0x03        // Device is in Addre
             -ssed State
           =2 #define  DEV_CONFIGURED          0x04        // Device is in Confi
             -gured State
           =2 #define  DEV_SUSPENDED           0x05        // Device is in Suspe
             -nded State
           =2 
           =2 // Define bmRequestType bitmaps
           =2 #define  IN_DEVICE               0x00        // Request made to de
             -vice, direction is IN 
           =2 #define  OUT_DEVICE              0x80        // Request made to de
             -vice, direction is OUT
           =2 #define  IN_INTERFACE            0x01        // Request made to in
             -terface, direction is IN
           =2 #define  OUT_INTERFACE           0x81        // Request made to in
             -terface, direction is OUT
           =2 #define  IN_ENDPOINT             0x02        // Request made to en
             -dpoint, direction is IN
           =2 #define  OUT_ENDPOINT            0x82        // Request made to en
             -dpoint, direction is OUT
           =2 
           =2 // Define wIndex bitmaps
           =2 #define  IN_EP1                  0x81        // Index values used 
             -by Set and Clear feature
           =2 #define  OUT_EP1                 0x01        // commands for Endpo
             -int_Halt
           =2 #define  IN_EP2                  0x82
           =2 #ifdef __F326_VER__
           =2 #define  OUT_EP2                                 0x01           
           =2 #else
           =2 #define  OUT_EP2                                 0x01           
           =2 #endif
           =2 
           =2 // Define wValue bitmaps for Standard Feature Selectors
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 64  

           =2 #define  DEVICE_REMOTE_WAKEUP    0x01        // Remote wakeup feat
             -ure(not used)
           =2 #define  ENDPOINT_HALT           0x00        // Endpoint_Halt feat
             -ure selector
           =2 
           =2 // Define Endpoint States
           =2 #define  EP_IDLE                 0x00        // This signifies End
             -point Idle State
           =2 #define  EP_TX                   0x01        // Endpoint Transmit 
             -State
           =2 #define  EP_RX                   0x02        // Endpoint Receive S
             -tate
           =2 #define  EP_HALT                 0x03        // Endpoint Halt Stat
             -e (return stalls)
           =2 #define  EP_STALL                0x04        // Endpoint Stall (se
             -nd procedural stall next status phase)
           =2 #define  EP_ADDRESS              0x05        // Endpoint Address (
             -change FADDR during next status phase)
           =2 
           =2 // Function prototypes
           =2 // USB Routines
           =2 void USB_Resume(void);                       // This routine resum
             -es USB operation
           =2 void USB_Reset(void);                        // Called after USB b
             -us reset
           =2 void Handle_Setup(void);                     // Handle setup packe
             -t on Endpoint 0
           =2 void Handle_In1(BYTE* ptr_buf);                       // Handle in
             - packet on Endpoint 1
           =2 void Handle_Out2(void);                      // Handle out packet 
             -on Endpoint 2
           =2 void USB_Suspend(void);                      // This routine calle
             -d when suspend signalling on bus
           =2 void Out2_Get_Data(BYTE* ptr_buf);                               // Copies from FIFO to ptr_
             -buf, clears FIFO-full flag.
           =2 void Out2_Done(void);                                            // Call this when finished with the d
             -ata
           =2 
           =2 // Standard Requests
           =2 void Get_Status(void);                       // These are called f
             -or each specific standard request
           =2 void Clear_Feature(void);
           =2 void Set_Feature(void);
           =2 void Set_Address(void);
           =2 void Get_Descriptor(void);
           =2 void Get_Configuration(void);
           =2 void Set_Configuration(void);
           =2 void Get_Interface(void);
           =2 void Set_Interface(void);
           =2 
           =2 // MSD Specific Requests
           =2 // void Reset_Msd(void);
           =2 // void Get_MaxLUN(void);
           =2 
           =2 // Initialization Routines
           =2 void Sys_Clk_Init(void);                      // Initialize the sy
             -stem clock(depends on Full/Low speed)
           =2 void Port_Init(void);                        // Configure ports fo
             -r this specific application
           =2 void USB0_Init(void);                        // Configure USB core
             - for either Full/Low speed
           =2 void Timer_Init(void);                       // Start timer 2 for 
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 65  

             -use by ADC and to check switches
           =2 void Adc_Init(void);                         // Configure ADC for 
             -continuous conversion, low-power mode
           =2 
           =2 // Other Routines
           =2 void Timer2_ISR(void);                       // Called when Timer 
             -2 overflows, see if switches are pressed
           =2 void Adc_ConvComple_ISR(void);               // When a conversion 
             -completes, switch ADC multiplexor
           =2 void USB_ISR(void);                          // Called to determin
             -e type of USB interrupt
           =2 void Fifo_ReadC(BYTE, unsigned int, BYTE *) ;
           =2 extern void Fifo_Read (BYTE, unsigned int, BYTE *) ; // Used for m
             -ultiple byte reads of Endpoint fifos
           =2 extern void Fifo_Write (BYTE, unsigned int, BYTE *) reentrant;// U
             -sed for multiple byte writes of Endpoint fifos
           =2 void Force_Stall(void);                      // Forces a procedura
             -l stall on Endpoint 0
           =2 void Delay(void);                            // Approximately 80 u
             -s/1 ms on Full/Low Speed
           =2 
           =2 void USB_In(BYTE* ptr_buf,unsigned count);
           =2 
           =2 void USB_Bulk_Init(void);
           =2 
           =2 extern unsigned xdata Out_Count;
           =2 extern BYTE xdata Out_Packet[EP2_PACKET_SIZE];
           =2 extern BYTE xdata In_count;
           =2 extern BYTE xdata In_Packet[EP1_PACKET_SIZE];
           =2 //extern BYTE xdata In_Overrun;
           =2 
           =2 #endif      /* _USB_MAIN_H_ */
 217      =2  
  35      =1  
  36      =1  //----------------------------------------------------------------
             --------------
  37      =1  // Structure Prototypes
  38      =1  //----------------------------------------------------------------
             --------------
  39      =1  
  40      =1  typedef struct {
  41      =1          unsigned cluster_start;
  42      =1          unsigned long sector_current;
  43      =1          unsigned sector_direntry;
  44      =1          unsigned offset_direntry;
  45      =1          BYTE attrib;
  46      =1          DWORD pos;
  47      =1          DWORD size;
  48      =1          BYTE isopen;
  49      =1  } FILE;
  50      =1  
  51      =1  typedef WORD UNI; // Unicode character type
  52      =1  
  53      =1  typedef union {
  54      =1  
  55      =1  struct {
  56      =1          BYTE seq_nr; // Bit 0..4 = seqnr, ascending, start with 1. Bit 6:
             - final part of name
  57      =1          UNI unicode1_5[5]; // Little endian
  58      =1          BYTE attrib; // 0x0F
  59      =1          BYTE type; // 0x00
  60      =1          BYTE checksum; // int i;BYTE sum=0;for(i=0;i<11;i++) { sum=(sum>>
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 66  

             -1)+((sum&1)<<7);sum+=name[i]; }
  61      =1          UNI unicode6_11[6];
  62      =1          unsigned starting_cluster; // 0x0000
  63      =1          UNI unicode12_13[2];
  64      =1  } lfn;
  65      =1  
  66      =1  struct {
  67      =1          char name[11];
  68      =1          BYTE attrib;
  69      =1          BYTE reserved[10];
  70      =1          WORD time; // 5/6/5 bits for h/m/2*sec
  71      =1          WORD date; // 7/4/5 bits for y-1980/m/d
  72      =1          unsigned starting_cluster; // 0 for empty file
  73      =1          DWORD filesize;
  74      =1  } sfn;
  75      =1  
  76      =1  } dir_entry;
  77      =1  
  78      =1  typedef struct {
  79      =1          unsigned long block;
  80      =1          unsigned offset;
  81      =1          BYTE findempty;
  82      =1          dir_entry* direntry;
  83      =1  } find_info;
  84      =1  
  85      =1  
  86      =1  
  87      =1  #define ATTRIB_READ_ONLY        0x01
  88      =1  #define ATTRIB_HIDDEN           0x02
  89      =1  #define ATTRIB_SYSTEM           0x04
  90      =1  #define ATTRIB_LABEL            0x08
  91      =1  #define ATTRIB_SUBDIR           0x10
  92      =1  #define ATTRIB_ARCHIVE          0x20
  93      =1  
  94      =1  #define SEEK_CUR 0
  95      =1  #define SEEK_END 1
  96      =1  #define SEEK_SET 2
  97      =1  
  98      =1  //----------------------------------------------------------------
             --------------
  99      =1  // Function Prototypes
 100      =1  //----------------------------------------------------------------
             --------------
 101      =1  
 102      =1  int fopen(FILE* f,char* filename,char* mode);
 103      =1  int fseek(FILE* f,long offset,int origin);
 104      =1  DWORD ftell(FILE* f);
 105      =1  int feof(FILE* f);
 106      =1  unsigned fread(FILE* f,BYTE* buffer,unsigned count);
 107      =1  unsigned fwrite(FILE* f,BYTE* buffer,unsigned count);
 108      =1  void fclose(FILE* f);
 109      =1  int fexists(char* filename);
 110      =1  int fdelete(char* filename);
 111      =1  BYTE findfirst(find_info* findinfo,BYTE empty);
 112      =1  BYTE findnext(find_info* findinfo);
 113      =1  
 114      =1  
 115      =1  //----------------------------------------------------------------
             ----------------
 116      =1  // Functions only for F340 device
 117      =1  //----------------------------------------------------------------
             ----------------
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 67  

 118      =1  
 119      =1  #ifdef __F340_VER__
 120      =1  
 121      =1  #define DIRECTORY_EXISTS                1
 122      =1  #define NO_PLACE_FOR_DIRECTORY  2
 123      =1  #define DIRNAME_LENGTH_ERROR    3
 124      =1  
 125      =1  //----------------------------------------------------------------
             --------------
 126      =1  // Function Prototypes
 127      =1  //----------------------------------------------------------------
             --------------
 128      =1  
 129      =1  void FileSys_Init();
 130      =1  BYTE chngdir(char* dirname);
 131      =1  BYTE mkdir(char* dir_name);
 132      =1  BYTE rmdir(char* dir_name) ;
 133      =1  void write_current_dir();
 134      =1  
 135      =1  //----------------------------------------------------------------
             --------------
 136      =1  // Structure Prototypes
 137      =1  //----------------------------------------------------------------
             --------------
 138      =1  
 139      =1  typedef struct 
 140      =1  { 
 141      =1          unsigned long block;
 142      =1          unsigned offset;
 143      =1  }
 144      =1  PREV_SEARCH;
 145      =1  
 146      =1  
 147      =1  #endif
 148      =1  #endif
  50          #include <stdio.h>
   1      =1  /*----------------------------------------------------------------
             -----------
   2      =1  STDIO.H
   3      =1  
   4      =1  Prototypes for standard I/O functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, In
             -c.
   6      =1  All rights reserved.
   7      =1  ------------------------------------------------------------------
             ---------*/
   8      =1  
   9      =1  #ifndef __STDIO_H__
  10      =1  #define __STDIO_H__
  11      =1  
  12      =1  #ifndef EOF
  13      =1   #define EOF -1
  14      =1  #endif
  15      =1  
  16      =1  #ifndef NULL
  17      =1   #define NULL ((void *) 0)
  18      =1  #endif
  19      =1  
  20      =1  #ifndef _SIZE_T
  21      =1   #define _SIZE_T
  22      =1   typedef unsigned int size_t;
  23      =1  #endif
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 68  

  24      =1  
  25      =1  #pragma SAVE
  26      =1  #pragma REGPARMS
  27      =1  extern char _getkey (void);
  28      =1  extern char getchar (void);
  29      =1  extern char ungetchar (char);
  30      =1  extern char putchar (char);
  31      =1  extern int printf   (const char *, ...);
  32      =1  extern int sprintf  (char *, const char *, ...);
  33      =1  extern int vprintf  (const char *, char *);
  34      =1  extern int vsprintf (char *, const char *, char *);
  35      =1  extern char *gets (char *, int n);
  36      =1  extern int scanf (const char *, ...);
  37      =1  extern int sscanf (char *, const char *, ...);
  38      =1  extern int puts (const char *);
  39      =1  
  40      =1  #pragma RESTORE
  41      =1  
  42      =1  #endif
  43      =1  
  51          
  52          
  53          #include "F34x_MSD_Cmd.h" //wozb - 27-09-2005 - it's not need it w
             -as used to communicate via uart
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Cmd.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_Cmd.c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000031
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef _CMD_H_
  32      =1  #define _CMD_H_
  33      =1  
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 69  

  34      =1  #define CLS 12
  35      =1  #define BACKSPACE 8
  36      =1  #define CRLF '\n'
  37      =1  #define SPACE ' '
  38      =1  #define PROMPT '>'
  39      =1  
  40      =1  //----------------------------------------------------------------
             --------------
  41      =1  // Function Prototypes
  42      =1  //----------------------------------------------------------------
             --------------
  43      =1  
  44      =1  void Cmd_Init(void);
  45      =1  void Cmd_Step(void);
  46      =1  
  47      =1  #endif
  54          #include "F34x_MSD_Log.h" //wozb - 27-09-2005 - it's not need it w
             -as used to communicate via uart
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Log.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_Log.c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000042
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef _LOG_H_
  32      =1  #define _LOG_H_
  33      =1  
  34      =1  //----------------------------------------------------------------
             --------------
  35      =1  // Function Prototypes
  36      =1  //----------------------------------------------------------------
             --------------
  37      =1  
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 70  

  38      =1  void Log(char* filename);
  39      =1  void Log_Step(void);
  40      =1  void Stop_Logging();
  41      =1  
  42      =1  #endif
  55          
  56          #include "F34x_MSD_Temp_Sensor.h"
   1      =1  //----------------------------------------------------------------
             --------------
   2      =1  // F34x_MSD_Temp_Sensor.h
   3      =1  //----------------------------------------------------------------
             --------------
   4      =1  // Copyright 2006 Silicon Laboratories, Inc.
   5      =1  // http://www.silabs.com
   6      =1  //
   7      =1  // Program Description:
   8      =1  //
   9      =1  // Header file with function prototypes relevant to F34x_Temp_Sens
             -or.c
  10      =1  //
  11      =1  //
  12      =1  // FID:            34X000056
  13      =1  // Target:         C8051F34x
  14      =1  // Tool chain:     Keil
  15      =1  // Command Line:   See Readme.txt
  16      =1  // Project Name:   F34x_USB_MSD
  17      =1  //
  18      =1  // Release 1.1
  19      =1  //    -All changes by PKC
  20      =1  //    -09 JUN 2006
  21      =1  //    -No changes; incremented revision number to match project re
             -vision
  22      =1  //
  23      =1  // Release 1.0
  24      =1  //    -Initial Release
  25      =1  //
  26      =1  
  27      =1  //----------------------------------------------------------------
             --------------
  28      =1  // Header File Preprocessor Directive
  29      =1  //----------------------------------------------------------------
             --------------
  30      =1  
  31      =1  #ifndef __TEMP_SENSOR_H__
  32      =1  #define __TEMP_SENSOR_H__
  33      =1  
  34      =1  
  35      =1  //----------------------------------------------------------------
             --------------
  36      =1  // Function Prototypes
  37      =1  //----------------------------------------------------------------
             --------------
  38      =1  
  39      =1  void Init_Temp_Sensor();
  40      =1  void Calibrate(int temp_value);
  41      =1  int GetTemp();
  42      =1  void Temp_Log_Step(void);
  43      =1  void Temp_Log(char* filename);
  44      =1  void Temp_Sensor_Stop_Logging();
  45      =1  #endif
  57          
  58          //----------------------------------------------------------------
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 71  

             --------------
  59          // 16-bit SFR Definitions for 'F34x
  60          //----------------------------------------------------------------
             --------------
  61          
  62          sfr16 TMR2RL   = 0xca;                   // Timer2 reload value
  63          sfr16 TMR2     = 0xcc;                   // Timer2 counter     
  64          
  65          sbit C_PWR = P1^7;
  66          //----------------------------------------------------------------
             --------------
  67          // Main Routine
  68          //----------------------------------------------------------------
             --------------
  69          volatile DWORD xdata tickcount=0;
  70          
  71          extern void Wait_ms(unsigned int count);
  72          
  73          //----------------------------------------------------------------
             -------------
  74          // main
  75          //----------------------------------------------------------------
             -------------
  76          //
  77          // Main loop
  78          //
  79          // Parameters   :
  80          // Return Value :
  81          //----------------------------------------------------------------
             -------------
  82          
  83          void main(void) {
  84   1              PCA0MD &= ~0x40;                       // Disable Watchdog timer
  85   1      
  86   1              Sys_Clk_Init();                         // Initialize oscillator
  87   1      
  88   1              Port_Init();                           // Initialize crossbar and
             - GPIO
  89   1      
  90   1      
  91   1      
  92   1              UART0_Init();
  93   1      
  94   1      #ifdef __F340_VER__     
  95   1              Init_Temp_Sensor();                                             // initialize temerature sensor
  96   1      #endif
  97   1              Sect_Init();
  98   1      
  99   1              Timer_Init();                          // Initialize timer2
 100   1      
 101   1              USB0_Init();                           // Initialize USB0
 102   1      
 103   1              
 104   1      
 105   1      #ifdef __F340_VER__
 106   1              FileSys_Init();
 107   1      #endif
 108   1      
 109   1              Cmd_Init(); 
 110   1      
 111   1      
 112   1      
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 72  

 113   1              USB_Bulk_Init();
 114   1              
 115   1              while (1) { 
 116   2                      Cmd_Step(); 
 117   2                      Msd_Step();
 118   2                      Log_Step(); 
 119   2      #ifdef __F340_VER__
 120   2                      Temp_Log_Step();
 121   2                      Switch_On_Off_UART();
 122   2      #endif
 123   2              }
 124   1      }
 125          
 126          //----------------------------------------------------------------
             --------------
 127          // Initialization Subroutines
 128          //----------------------------------------------------------------
             --------------
 129          
 130          //----------------------------------------------------------------
             -------------
 131          // Sys_Clk_Init
 132          //----------------------------------------------------------------
             -------------
 133          //
 134          // This routine initilizes the system clock and USB clock
 135          //
 136          // Parameters   :
 137          // Return Value :
 138          //----------------------------------------------------------------
             -------------
 139          
 140          void Sys_Clk_Init(void)
 141          {
 142   1      #ifdef _USB_LOW_SPEED_
              
                 OSCICN |= 0x03;                       // Configure internal osc
             -illator for
                                                       // its maximum frequency 
             -and enable
                                                       // missing clock detector
              
                 CLKSEL  = SYS_INT_OSC;                // Select System clock
                 CLKSEL |= USB_INT_OSC_DIV_2;          // Select USB clock
              #else
 151   1         OSCICN |= 0x03;                       // Configure internal osc
             -illator for
 152   1                                               // its maximum frequency 
             -and enable
 153   1                                               // missing clock detector
 154   1      
 155   1         CLKMUL  = 0x00;                       // Select internal oscill
             -ator as 
 156   1                                               // input to clock multipl
             -ier
 157   1      
 158   1         CLKMUL |= 0x80;                       // Enable clock multiplie
             -r
 159   1         Delay();                              // Delay for clock multip
             -lier to begin
 160   1         CLKMUL |= 0xC0;                       // Initialize the clock m
             -ultiplier
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 73  

 161   1         Delay(); 
 162   1      
 163   1         while(!(CLKMUL & 0x20));                // Wait for multiplier 
             -to lock
 164   1      #ifdef __F340_VER__
 165   1      #ifdef F340_24M
                CLKSEL = SYS_4X_DIV_2;
              #else
 168   1        CLKSEL = SYS_4X_MUL;
 169   1      #endif
 170   1      #else
              #ifdef __F326_VER__
                 CLKSEL  = SYS_4X_DIV_2;
              #else
                 CLKSEL  = SYS_INT_OSC;                // Select system clock  
              #endif
              #endif
 177   1         CLKSEL |= USB_4X_CLOCK;               // Select USB clock
 178   1      #endif  /* _USB_LOW_SPEED_ */
 179   1      }
 180          
 181          
 182          //----------------------------------------------------------------
             -------------
 183          // Port_Init
 184          //----------------------------------------------------------------
             -------------
 185          //
 186          // Configure the Crossbar and GPIO ports.
 187          //
 188          // Parameters   :
 189          // Return Value :
 190          //----------------------------------------------------------------
             -------------
 191          
 192          void Port_Init(void) {
 193   1              // Default values on reset:
 194   1              // P0MDIN=0xFF;         P1MDIN=0xFF;    P2MDIN=0xFF;    P3MDIN=0xFF; 
 195   1              // P0MDOUT=0x00;        P1MDOUT=0x00;   P2MDOUT=0x00;   P3MDOUT=0x00;
 196   1              // P0SKIP=0x00;         P1SKIP=0x00;    P2SKIP=0x00;
 197   1              // XBR0=0x00;
 198   1              data    int i;
 199   1      #ifdef __F326_VER__
              
                      GPIOCN |= 0x40;
                      P0MDOUT = 0x0d;
                      P0 |= 0x02;
                      SCS = 1;
                      SCLK = 1;
              #else
 207   1              P1MDIN = 0xff;
 208   1      
 209   1      //   P1MDIN  = 0x7F;                        // Port 1 pin 7 set as
             - analog input
 210   1         ////p1.0 - out,p1.1-out,p1.2 - out,p1.3 -in,p1.4 - in p1.6 - ou
             -t
 211   1         P1MDOUT = 0xC7;
 212   1         P1 = 0x18;
 213   1         P3MDIN = 0xff;
 214   1         P3MDOUT = 0xFF;
 215   1         P3 &= ~(0xe0) ;
 216   1         P4MDIN = 0xff;
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 74  

 217   1         P4MDOUT = 0x00;
 218   1         P4  = 0xff;
 219   1         P0MDOUT = 0x1D;                    // enable TX0,SCK,MOSI as a 
             -push-pull
 220   1         P2MDOUT = 0x0C;                    // enable LEDs as a push-pul
             -l output
 221   1         XBR0    = 0x03;                     // UART0 TX and RX pins ena
             -bled, SPI enabled
 222   1         XBR1=(0x40 | 0x80); // Enable crossbar, disable weak pull-up
 223   1        // XBR1=0x40 ;
 224   1         CF_OE = 0;
 225   1         C_PWR = 1;
 226   1              for(i=0;i<5000;i++)
 227   1                 Delay();
 228   1         XBR1 &= ~ 0x80;
 229   1         CF_OE = 1;
 230   1         C_PWR = 0;
 231   1              for(i=0;i<5000;i++)
 232   1                 Delay();     
 233   1         XBR1 |= 0x80; // week pull-up off for CF
 234   1      #endif
 235   1      
 236   1      }
 237          
 238          
 239          //----------------------------------------------------------------
             -------------
 240          // USB0_Init
 241          //----------------------------------------------------------------
             -------------
 242          //
 243          // USB Initialization
 244          // - Initialize USB0
 245          // - Enable USB0 interrupts
 246          // - Enable USB0 transceiver
 247          // - Enable USB0 with suspend detection
 248          //
 249          // Parameters   :
 250          // Return Value :
 251          //----------------------------------------------------------------
             -------------
 252          
 253          void USB0_Init(void)
 254          {
 255   1         POLL_WRITE_BYTE(POWER,  0x08);          // Force Asynchronous U
             -SB Reset
 256   1         POLL_WRITE_BYTE(IN1IE,  0x07);          // Enable Endpoint 0-2 
             -in interrupts
 257   1         POLL_WRITE_BYTE(OUT1IE, 0x07);          // Enable Endpoint 0-2 
             -out interrupts
 258   1         POLL_WRITE_BYTE(CMIE,   0x07);          // Enable Reset, Resume
             -, and Suspend interrupts
 259   1      #ifdef _USB_LOW_SPEED_
                 USB0XCN = 0xC0;                         // Enable transceiver; 
             -select low speed
                 POLL_WRITE_BYTE(CLKREC, 0xA0);          // Enable clock recover
             -y; single-step mode
                                                         // disabled; low speed 
             -mode enabled
              #else                                      
 264   1         USB0XCN = 0xE0;                         // Enable transceiver; 
             -select full speed
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 75  

 265   1         POLL_WRITE_BYTE(CLKREC, 0x80);          // Enable clock recover
             -y, single-step mode
 266   1                                                 // disabled
 267   1      #endif /* _USB_LOW_SPEED_ */
 268   1      
 269   1         EIE1 |= 0x02;                           // Enable USB0 Interrup
             -ts
 270   1         EA = 1;                                 // Global Interrupt ena
             -ble
 271   1                                                 // Enable USB0 by clear
             -ing the USB Inhibit bit
 272   1         POLL_WRITE_BYTE(POWER,  0x01);          // and enable suspend d
             -etection
 273   1      
 274   1      
 275   1      }
 276          
 277          
 278          //----------------------------------------------------------------
             -------------
 279          // Timer_Init
 280          //----------------------------------------------------------------
             -------------
 281          //
 282          // Timer initialization
 283          // - Timer 2 reload, used to check if switch pressed on overflow a
             -nd
 284          // used for ADC continuous conversion
 285          //
 286          // Parameters   :
 287          // Return Value :
 288          //----------------------------------------------------------------
             -------------
 289          
 290          void Timer_Init(void)
 291          {
 292   1      #ifdef __F326_VER__
                      TMOD = 0x01;                                            //Timer 0 - 16 bit timer
                      CKCON = 0x00;
                      TL0             = 0x2e;
                      TH0             = 0xf8;
                      ET0             = 1;                                            // enable timer 0 interrupt
                  TR0         = 1;                                            // start timer 0
              #else
 300   1              
 301   1         TMR2CN  = 0x00;                        // Stop Timer2; Clear TF
             -2;
 302   1      
 303   1         CKCON  &= ~0xF0;                       // Timer2 clocked based 
             -on T2XCLK;
 304   1         TMR2RL  = 0xF000;                      // Initialize reload val
             -ue
 305   1         TMR2    = 0xffff;                      // Set to reload immedia
             -tely
 306   1      
 307   1         ET2     = 1;                           // Enable Timer2 interru
             -pts
 308   1         TR2     = 1;                           // Start Timer2
 309   1      #endif
 310   1      }
 311          
 312          
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 76  

 313          //----------------------------------------------------------------
             -------------
 314          // Timer2_ISR
 315          //----------------------------------------------------------------
             -------------
 316          //
 317          // Timer 2 interrupt routine
 318          // Called when timer 2 overflows
 319          //
 320          // Parameters   :
 321          // Return Value :
 322          //----------------------------------------------------------------
             -------------
 323          
 324          #ifndef __F326_VER__
 325          void Timer2_ISR(void) interrupt 5 {
 326   1              tickcount++;
 327   1      #ifdef __F340_VER__
 328   1      #ifdef F340_24M
                      TMR2RL = 0xF82e;
              #endif 
 331   1              TMR2RL = 0xF05e;
 332   1      //      TMR2RL = 0xFC16; 
 333   1      #else
                      TMR2RL = 0xFC16;                // Re-initialize reload value (1kHz, 1ms)
              #endif
 336   1              //TMR2RL = 0xE0B0;              // Re-initialize reload value (125Hz, 8ms)
 337   1              TF2H=0;                                 // Clear interrupt
 338   1      }
 339          
 340          #else
              
              //----------------------------------------------------------------
             -------------
              // Timer0_ISR
              //----------------------------------------------------------------
             -------------
              //
              // Timer 0 interrupt routine
              // Called when timer 0 overflows
              //
              // Parameters   :
              // Return Value :
              //----------------------------------------------------------------
             -------------
              void Timer0_ISR(void) interrupt 1
              {
              
                      TL0             += 0x2e;
                      TH0             = 0xf8;
                      tickcount++;
              }
              #endif
 360          
 361          
 362          //----------------------------------------------------------------
             -------------
 363          // Delay
 364          //----------------------------------------------------------------
             -------------
 365          //
 366          // Used for a small pause, approximately 80 us in Full Speed,
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 77  

 367          // and 1 ms when clock is configured for Low Speed
 368          //
 369          // Parameters   :
 370          // Return Value :
 371          //----------------------------------------------------------------
             -------------
 372          
 373          void Delay(void)
 374          {
 375   1         data int x;
 376   1         for(x = 0;x < 500;x)
 377   1            x++;
 378   1      }
 379          
 380          
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 78  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0025 (BEGIN)
0000         L?0038:
0000 C3                CLR     C
0001 9488              SUBB    A,#088H
0003 E500        R     MOV     A,i
0005 6480              XRL     A,#080H
0007 9493              SUBB    A,#093H
0009 22                RET     
             ; FUNCTION Com0025 (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 84
0000 53D9BF            ANL     PCA0MD,#0BFH
                                           ; SOURCE LINE # 86
0003 120000      R     LCALL   Sys_Clk_Init
                                           ; SOURCE LINE # 88
0006 120000      R     LCALL   Port_Init
                                           ; SOURCE LINE # 92
0009 120000      E     LCALL   UART0_Init
                                           ; SOURCE LINE # 95
000C 120000      E     LCALL   Init_Temp_Sensor
                                           ; SOURCE LINE # 97
000F 120000      E     LCALL   Sect_Init
                                           ; SOURCE LINE # 99
0012 120000      R     LCALL   Timer_Init
                                           ; SOURCE LINE # 101
0015 120000      R     LCALL   USB0_Init
                                           ; SOURCE LINE # 106
0018 120000      E     LCALL   FileSys_Init
                                           ; SOURCE LINE # 109
001B 120000      E     LCALL   Cmd_Init
                                           ; SOURCE LINE # 113
001E 120000      E     LCALL   USB_Bulk_Init
0021         ?C0001:
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 116
0021 120000      E     LCALL   Cmd_Step
                                           ; SOURCE LINE # 117
0024 120000      E     LCALL   Msd_Step
                                           ; SOURCE LINE # 118
0027 120000      E     LCALL   Log_Step
                                           ; SOURCE LINE # 120
002A 120000      E     LCALL   Temp_Log_Step
                                           ; SOURCE LINE # 121
002D 120000      E     LCALL   Switch_On_Off_UART
                                           ; SOURCE LINE # 123
0030 80EF              SJMP    ?C0001
             ; FUNCTION main (END)

             ; FUNCTION Sys_Clk_Init (BEGIN)
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 151
0000 43B203            ORL     OSCICN,#03H
                                           ; SOURCE LINE # 155
0003 E4                CLR     A
0004 F5B9              MOV     CLKMUL,A
                                           ; SOURCE LINE # 158
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 79  

0006 43B980            ORL     CLKMUL,#080H
                                           ; SOURCE LINE # 159
0009 120000      R     LCALL   Delay
                                           ; SOURCE LINE # 160
000C 43B9C0            ORL     CLKMUL,#0C0H
                                           ; SOURCE LINE # 161
000F 120000      R     LCALL   Delay
0012         ?C0004:
                                           ; SOURCE LINE # 163
0012 E5B9              MOV     A,CLKMUL
0014 30E5FB            JNB     ACC.5,?C0004
0017         ?C0005:
                                           ; SOURCE LINE # 168
0017 75A903            MOV     CLKSEL,#03H
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 179
001A 22                RET     
             ; FUNCTION Sys_Clk_Init (END)

             ; FUNCTION Port_Init (BEGIN)
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 207
0000 75F2FF            MOV     P1MDIN,#0FFH
                                           ; SOURCE LINE # 211
0003 75A5C7            MOV     P1MDOUT,#0C7H
                                           ; SOURCE LINE # 212
0006 759018            MOV     P1,#018H
                                           ; SOURCE LINE # 213
0009 75F4FF            MOV     P3MDIN,#0FFH
                                           ; SOURCE LINE # 214
000C 75A7FF            MOV     P3MDOUT,#0FFH
                                           ; SOURCE LINE # 215
000F 53B01F            ANL     P3,#01FH
                                           ; SOURCE LINE # 216
0012 75F5FF            MOV     P4MDIN,#0FFH
                                           ; SOURCE LINE # 217
0015 E4                CLR     A
0016 F5AE              MOV     P4MDOUT,A
                                           ; SOURCE LINE # 218
0018 75C7FF            MOV     P4,#0FFH
                                           ; SOURCE LINE # 219
001B 75A41D            MOV     P0MDOUT,#01DH
                                           ; SOURCE LINE # 220
001E 75A60C            MOV     P2MDOUT,#0CH
                                           ; SOURCE LINE # 221
0021 75E103            MOV     XBR0,#03H
                                           ; SOURCE LINE # 222
0024 75E2C0            MOV     XBR1,#0C0H
                                           ; SOURCE LINE # 224
0027 C291              CLR     CF_OE
                                           ; SOURCE LINE # 225
0029 D297              SETB    C_PWR
                                           ; SOURCE LINE # 226
002B F500        R     MOV     i,A
002D F500        R     MOV     i+01H,A
002F         ?C0007:
                                           ; SOURCE LINE # 227
002F 120000      R     LCALL   Delay
0032 0500        R     INC     i+01H
0034 E500        R     MOV     A,i+01H
0036 7002              JNZ     ?C0033
0038 0500        R     INC     i
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 80  

003A         ?C0033:
003A 120000      R     LCALL   L?0038
003D 40F0              JC      ?C0007
003F         ?C0008:
                                           ; SOURCE LINE # 228
003F 53E27F            ANL     XBR1,#07FH
                                           ; SOURCE LINE # 229
0042 D291              SETB    CF_OE
                                           ; SOURCE LINE # 230
0044 C297              CLR     C_PWR
                                           ; SOURCE LINE # 231
0046 E4                CLR     A
0047 F500        R     MOV     i,A
0049 F500        R     MOV     i+01H,A
004B         ?C0010:
                                           ; SOURCE LINE # 232
004B 120000      R     LCALL   Delay
004E 0500        R     INC     i+01H
0050 E500        R     MOV     A,i+01H
0052 7002              JNZ     ?C0034
0054 0500        R     INC     i
0056         ?C0034:
0056 120000      R     LCALL   L?0038
0059 40F0              JC      ?C0010
005B         ?C0011:
                                           ; SOURCE LINE # 233
005B 43E280            ORL     XBR1,#080H
                                           ; SOURCE LINE # 236
005E 22                RET     
             ; FUNCTION Port_Init (END)

             ; FUNCTION USB0_Init (BEGIN)
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
0000         ?C0014:
                                           ; SOURCE LINE # 255
0000 E596              MOV     A,USB0ADR
0002 20E7FB            JB      ACC.7,?C0014
0005         ?C0015:
0005 759601            MOV     USB0ADR,#01H
0008 759708            MOV     USB0DAT,#08H
000B         ?C0016:
                                           ; SOURCE LINE # 256
000B E596              MOV     A,USB0ADR
000D 20E7FB            JB      ACC.7,?C0016
0010         ?C0017:
0010 759607            MOV     USB0ADR,#07H
0013 759707            MOV     USB0DAT,#07H
0016         ?C0018:
                                           ; SOURCE LINE # 257
0016 E596              MOV     A,USB0ADR
0018 20E7FB            JB      ACC.7,?C0018
001B         ?C0019:
001B 759609            MOV     USB0ADR,#09H
001E 759707            MOV     USB0DAT,#07H
0021         ?C0020:
                                           ; SOURCE LINE # 258
0021 E596              MOV     A,USB0ADR
0023 20E7FB            JB      ACC.7,?C0020
0026         ?C0021:
0026 75960B            MOV     USB0ADR,#0BH
0029 759707            MOV     USB0DAT,#07H
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 81  

                                           ; SOURCE LINE # 264
002C 75D7E0            MOV     USB0XCN,#0E0H
002F         ?C0022:
                                           ; SOURCE LINE # 265
002F E596              MOV     A,USB0ADR
0031 20E7FB            JB      ACC.7,?C0022
0034         ?C0023:
0034 75960F            MOV     USB0ADR,#0FH
0037 759780            MOV     USB0DAT,#080H
                                           ; SOURCE LINE # 269
003A 43E602            ORL     EIE1,#02H
                                           ; SOURCE LINE # 270
003D D2AF              SETB    EA
003F         ?C0024:
                                           ; SOURCE LINE # 272
003F E596              MOV     A,USB0ADR
0041 20E7FB            JB      ACC.7,?C0024
0044         ?C0025:
0044 759601            MOV     USB0ADR,#01H
0047 759701            MOV     USB0DAT,#01H
                                           ; SOURCE LINE # 275
004A 22                RET     
             ; FUNCTION USB0_Init (END)

             ; FUNCTION Timer_Init (BEGIN)
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 301
0000 E4                CLR     A
0001 F5C8              MOV     TMR2CN,A
                                           ; SOURCE LINE # 303
0003 538E0F            ANL     CKCON,#0FH
                                           ; SOURCE LINE # 304
0006 75CBF0            MOV     TMR2RL+01H,#0F0H
0009 F5CA              MOV     TMR2RL,A
                                           ; SOURCE LINE # 305
000B 74FF              MOV     A,#0FFH
000D F5CD              MOV     TMR2+01H,A
000F F5CC              MOV     TMR2,A
                                           ; SOURCE LINE # 307
0011 D2AD              SETB    ET2
                                           ; SOURCE LINE # 308
0013 D2CA              SETB    TR2
                                           ; SOURCE LINE # 310
0015 22                RET     
             ; FUNCTION Timer_Init (END)

             ; FUNCTION Timer2_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D000            MOV     PSW,#00H
000D C000              PUSH    AR0
000F C004              PUSH    AR4
0011 C005              PUSH    AR5
0013 C006              PUSH    AR6
0015 C007              PUSH    AR7
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 326
0017 900000      R     MOV     DPTR,#tickcount
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 82  

001A 120000      E     LCALL   ?C?LLDXDATA
001D EF                MOV     A,R7
001E 2401              ADD     A,#01H
0020 FF                MOV     R7,A
0021 E4                CLR     A
0022 3E                ADDC    A,R6
0023 FE                MOV     R6,A
0024 E4                CLR     A
0025 3D                ADDC    A,R5
0026 FD                MOV     R5,A
0027 E4                CLR     A
0028 3C                ADDC    A,R4
0029 FC                MOV     R4,A
002A 900000      R     MOV     DPTR,#tickcount
002D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 331
0030 75CBF0            MOV     TMR2RL+01H,#0F0H
0033 75CA5E            MOV     TMR2RL,#05EH
                                           ; SOURCE LINE # 337
0036 C2CF              CLR     TF2H
                                           ; SOURCE LINE # 338
0038 D007              POP     AR7
003A D006              POP     AR6
003C D005              POP     AR5
003E D004              POP     AR4
0040 D000              POP     AR0
0042 D0D0              POP     PSW
0044 D082              POP     DPL
0046 D083              POP     DPH
0048 D0F0              POP     B
004A D0E0              POP     ACC
004C 32                RETI    
             ; FUNCTION Timer2_ISR (END)

             ; FUNCTION Delay (BEGIN)
                                           ; SOURCE LINE # 373
                                           ; SOURCE LINE # 374
                                           ; SOURCE LINE # 376
0000 E4                CLR     A
0001 F500        R     MOV     x,A
0003 F500        R     MOV     x+01H,A
0005         ?C0029:
                                           ; SOURCE LINE # 377
0005 0500        R     INC     x+01H
0007 E500        R     MOV     A,x+01H
0009 7002              JNZ     ?C0035
000B 0500        R     INC     x
000D         ?C0035:
000D B4F4F5            CJNE    A,#0F4H,?C0029
0010 E500        R     MOV     A,x
0012 B401F0            CJNE    A,#01H,?C0029
                                           ; SOURCE LINE # 378
0015         ?C0032:
0015 22                RET     
             ; FUNCTION Delay (END)

C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 83  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
P4 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C7H  1
EIE1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E6H  1
Timer2_ISR . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
USB0XCN. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D7H  1
Sect_Init. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Cmd_Init . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P0MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A4H  1
P1MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A5H  1
endpoint_descriptor. . . . . . . . . .  TYPEDEF  CODE   STRUCT   -----  7
  bLength. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bDescriptorType. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  bEndpointAddress . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  bmAttributes . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  wMaxPacketSize . . . . . . . . . . .  MEMBER   -----  UNION    0004H  2
  bInterval. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
P2MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A6H  1
P3MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A7H  1
P4MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AEH  1
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
USB0_Init. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
setup_buffer . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  bmRequestType. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bRequest . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  wValue . . . . . . . . . . . . . . .  MEMBER   -----  UNION    0002H  2
  wIndex . . . . . . . . . . . . . . .  MEMBER   -----  UNION    0004H  2
  wLength. . . . . . . . . . . . . . .  MEMBER   -----  UNION    0006H  2
Cmd_Step . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TF2H . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
PCA0MD . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D9H  1
Temp_Log_Step. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
device_descriptor. . . . . . . . . . .  TYPEDEF  CODE   STRUCT   -----  18
  bLength. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bDescriptorType. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  bcdUSB . . . . . . . . . . . . . . .  MEMBER   -----  UNION    0002H  2
  bDeviceClass . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  bDeviceSubClass. . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  bDeviceProtocol. . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  bMaxPacketSize0. . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  idVendor . . . . . . . . . . . . . .  MEMBER   -----  UNION    0008H  2
  idProduct. . . . . . . . . . . . . .  MEMBER   -----  UNION    000AH  2
  bcdDevice. . . . . . . . . . . . . .  MEMBER   -----  UNION    000CH  2
  iManufacturer. . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  iProduct . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  iSerialNumber. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  bNumConfigurations . . . . . . . . .  MEMBER   -----  U_CHAR   0011H  1
C_PWR. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
XBR0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E1H  1
Port_Init. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0000H  2
XBR1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E2H  1
FILE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  20
  cluster_start. . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 84  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  sector_current . . . . . . . . . . .  MEMBER   -----  U_LONG   0002H  4
  sector_direntry. . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  offset_direntry. . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  attrib . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  pos. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   000BH  4
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   000FH  4
  isopen . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0013H  1
Log_Step . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Msd_Step . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TMR2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00CCH  2
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
bootrecord_large . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  512
  jmp. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  oem_name . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0003H  8
  bytes_per_sector . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  sectors_per_cluster. . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  reserved_sectors . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  fat_copies . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  root_directory_entries . . . . . . .  MEMBER   -----  U_INT    0011H  2
  number_of_sectors. . . . . . . . . .  MEMBER   -----  U_INT    0013H  2
  media_descriptor . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
  sectors_per_fat. . . . . . . . . . .  MEMBER   -----  U_INT    0016H  2
  sectors_per_track. . . . . . . . . .  MEMBER   -----  U_INT    0018H  2
  heads. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    001AH  2
  hidden_sectors . . . . . . . . . . .  MEMBER   -----  U_LONG   001CH  4
  total_sectors. . . . . . . . . . . .  MEMBER   -----  U_LONG   0020H  4
  drive_number . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0024H  1
  reserved . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0025H  1
  extended_signature . . . . . . . . .  MEMBER   -----  U_CHAR   0026H  1
  serial_number. . . . . . . . . . . .  MEMBER   -----  ARRAY    0027H  4
  volume_label . . . . . . . . . . . .  MEMBER   -----  ARRAY    002BH  11
  filesystem . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0036H  8
  bootstrap. . . . . . . . . . . . . .  MEMBER   -----  ARRAY    003EH  448
  signature. . . . . . . . . . . . . .  MEMBER   -----  ARRAY    01FEH  2
configuration_descriptor . . . . . . .  TYPEDEF  CODE   STRUCT   -----  9
  bLength. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bDescriptorType. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  wTotalLength . . . . . . . . . . . .  MEMBER   -----  UNION    0002H  2
  bNumInterfaces . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  bConfigurationValue. . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  iConfiguration . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  bmAttributes . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bMaxPower. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
P1MDIN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F2H  1
P3MDIN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F4H  1
P4MDIN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F5H  1
Switch_On_Off_UART . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
find_info. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  10
  block. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  offset . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  findempty. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  direntry . . . . . . . . . . . . . .  MEMBER   -----  PTR      0007H  3
Sys_Clk_Init . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
bootrecord_small . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  17
  valid. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  fat_copies . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 85  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  root_directory_entries . . . . . . .  MEMBER   -----  U_INT    0002H  2
  number_of_sectors. . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  sectors_per_fat. . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  total_sectors. . . . . . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  reserved_sectors . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  hidden_sectors . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  sectors_per_cluster. . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
TMR2CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
FileSys_Init . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_CBW . . . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  31
  dCBWSignature. . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  dCBWTag. . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  dCBWDataTransferLength . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  bmCBWFlags . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  bCBWLUN. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  bCBWCBLength . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  CBWCB. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    000FH  16
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  i. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  c. . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
CLKSEL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A9H  1
OSCICN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B2H  1
TMR2RL . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00CAH  2
CLKMUL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B9H  1
ET2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
_CSW . . . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  13
  dCSWSignature. . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  dCSWTag. . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  dCSWDataResidue. . . . . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  bCSWStatus . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
USB_Bulk_Init. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
dir_entry. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  32
  lfn. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  32
  sfn. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  32
PREV_SEARCH. . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  block. . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  offset . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
TR2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
tickcount. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_LONG   0000H  4
CBW. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  31
  dCBWSignature. . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  dCBWTag. . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  dCBWDataTransferLength . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  bmCBWFlags . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  bCBWLUN. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  bCBWCBLength . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  CBWCB. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    000FH  16
interface_descriptor . . . . . . . . .  TYPEDEF  CODE   STRUCT   -----  9
  bLength. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bDescriptorType. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  bInterfaceNumber . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  bAlternateSetting. . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  bNumEndpoints. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  bInterfaceClass. . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  bInterfaceSubClass . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  bInterfaceProtocol . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  iInterface . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
C51 COMPILER V8.02   F34X_MSD_USB_MAIN             07/24/2007 22:07:38 PAGE 86  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


UART0_Init . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
UNI. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  i. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  c. . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
Init_Temp_Sensor . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CSW. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  13
  dCSWSignature. . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  dCSWTag. . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
  dCSWDataResidue. . . . . . . . . . .  MEMBER   -----  U_LONG   0008H  4
  bCSWStatus . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
CKCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
Delay. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  x. . . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0000H  2
USB0ADR. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0096H  1
USB0DAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0097H  1
Timer_Init . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
CF_OE. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    378    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
